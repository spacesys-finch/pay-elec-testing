
nucleo-h743zi2-dsp_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ecc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08009170  08009170  00019170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080095d4  080095d4  000195d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  080095e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e0  080097c4  000201e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000240  08009824  00020240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  240002a0  08009884  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000960  08009884  00020960  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c20  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bba  00000000  00000000  00039eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0003caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  0003dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e67d  00000000  00000000  0003ea10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006ff0  00000000  00000000  0004d08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000c5  00000000  00000000  0005407d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000538c  00000000  00000000  00054144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00000286  00000000  00000000  000594d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a0 	.word	0x240002a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009154 	.word	0x08009154

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a4 	.word	0x240002a4
 80002dc:	08009154 	.word	0x08009154

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 fe33 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f877 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 f9bf 	bl	8000a24 <MX_GPIO_Init>
  MX_ETH_Init();
 80006a6:	f000 f8f3 	bl	8000890 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006aa:	f000 f93d 	bl	8000928 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006ae:	f000 f987 	bl	80009c0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* try out ARM dot product */
  float32_t vectorA [] = {1,2,3};
 80006b2:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <main+0x94>)
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float32_t vectorB [] = {1,2,3};
 80006be:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <main+0x94>)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint32_t blockSize = 3;
 80006c8:	2303      	movs	r3, #3
 80006ca:	61fb      	str	r3, [r7, #28]
  float32_t result = 999;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <main+0x98>)
 80006ce:	603b      	str	r3, [r7, #0]


  // uart buffer stuff
  printf("initial result: %f\n", result);
 80006d0:	edd7 7a00 	vldr	s15, [r7]
 80006d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006d8:	ec53 2b17 	vmov	r2, r3, d7
 80006dc:	4814      	ldr	r0, [pc, #80]	; (8000730 <main+0x9c>)
 80006de:	f006 fc21 	bl	8006f24 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("hello world\n");
 80006e2:	4814      	ldr	r0, [pc, #80]	; (8000734 <main+0xa0>)
 80006e4:	f006 fcba 	bl	800705c <puts>
	  HAL_Delay(500);
 80006e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ec:	f000 fe9c 	bl	8001428 <HAL_Delay>

	  arm_dot_prod_f32(vectorA, vectorB, blockSize, &result);
 80006f0:	463b      	mov	r3, r7
 80006f2:	1d39      	adds	r1, r7, #4
 80006f4:	f107 0010 	add.w	r0, r7, #16
 80006f8:	69fa      	ldr	r2, [r7, #28]
 80006fa:	f005 ff43 	bl	8006584 <arm_dot_prod_f32>

	  pretty_print_float32_vector(vectorA, blockSize);
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	69f9      	ldr	r1, [r7, #28]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f819 	bl	800073c <pretty_print_float32_vector>
	  pretty_print_float32_vector(vectorB, blockSize);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	69f9      	ldr	r1, [r7, #28]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f814 	bl	800073c <pretty_print_float32_vector>
	  printf("result: %.1f\n", result);
 8000714:	edd7 7a00 	vldr	s15, [r7]
 8000718:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800071c:	ec53 2b17 	vmov	r2, r3, d7
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <main+0xa4>)
 8000722:	f006 fbff 	bl	8006f24 <iprintf>
	  printf("hello world\n");
 8000726:	e7dc      	b.n	80006e2 <main+0x4e>
 8000728:	080091a0 	.word	0x080091a0
 800072c:	4479c000 	.word	0x4479c000
 8000730:	08009170 	.word	0x08009170
 8000734:	08009184 	.word	0x08009184
 8000738:	08009190 	.word	0x08009190

0800073c <pretty_print_float32_vector>:
}

/**
 * print out vector over UART
 */
void pretty_print_float32_vector(float32_t *vec, uint32_t size){
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	printf("vector: ");
 8000746:	4810      	ldr	r0, [pc, #64]	; (8000788 <pretty_print_float32_vector+0x4c>)
 8000748:	f006 fbec 	bl	8006f24 <iprintf>
	uint32_t i;
	for (i=0; i<size; i++){
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e00f      	b.n	8000772 <pretty_print_float32_vector+0x36>
		printf("%.1f, ", vec[i]);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	edd3 7a00 	vldr	s15, [r3]
 800075e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000762:	ec53 2b17 	vmov	r2, r3, d7
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <pretty_print_float32_vector+0x50>)
 8000768:	f006 fbdc 	bl	8006f24 <iprintf>
	for (i=0; i<size; i++){
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	3301      	adds	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	d3eb      	bcc.n	8000752 <pretty_print_float32_vector+0x16>
	}
	printf("\n");
 800077a:	200a      	movs	r0, #10
 800077c:	f006 fbea 	bl	8006f54 <putchar>
}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	080091ac 	.word	0x080091ac
 800078c:	080091b8 	.word	0x080091b8

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b09c      	sub	sp, #112	; 0x70
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	224c      	movs	r2, #76	; 0x4c
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 ff76 	bl	8006690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2220      	movs	r2, #32
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 ff70 	bl	8006690 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f001 fe97 	bl	80024e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b33      	ldr	r3, [pc, #204]	; (8000888 <SystemClock_Config+0xf8>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	4a32      	ldr	r2, [pc, #200]	; (8000888 <SystemClock_Config+0xf8>)
 80007c0:	f023 0301 	bic.w	r3, r3, #1
 80007c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <SystemClock_Config+0xf8>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b2e      	ldr	r3, [pc, #184]	; (800088c <SystemClock_Config+0xfc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d8:	4a2c      	ldr	r2, [pc, #176]	; (800088c <SystemClock_Config+0xfc>)
 80007da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <SystemClock_Config+0xfc>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ec:	bf00      	nop
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <SystemClock_Config+0xfc>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007fa:	d1f8      	bne.n	80007ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007fc:	2303      	movs	r3, #3
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000800:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000806:	2301      	movs	r3, #1
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080a:	2340      	movs	r3, #64	; 0x40
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	2302      	movs	r3, #2
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800081a:	2318      	movs	r3, #24
 800081c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000822:	2304      	movs	r3, #4
 8000824:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800082a:	230c      	movs	r3, #12
 800082c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800082e:	2300      	movs	r3, #0
 8000830:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fe9c 	bl	8002578 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000846:	f000 f9ed 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	233f      	movs	r3, #63	; 0x3f
 800084c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2101      	movs	r1, #1
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fab0 	bl	8002dd4 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800087a:	f000 f9d3 	bl	8000c24 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3770      	adds	r7, #112	; 0x70
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	58000400 	.word	0x58000400
 800088c:	58024800 	.word	0x58024800

08000890 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_ETH_Init+0x80>)
 8000896:	4a1f      	ldr	r2, [pc, #124]	; (8000914 <MX_ETH_Init+0x84>)
 8000898:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_ETH_Init+0x88>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_ETH_Init+0x88>)
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_ETH_Init+0x88>)
 80008a8:	22e1      	movs	r2, #225	; 0xe1
 80008aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_ETH_Init+0x88>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_ETH_Init+0x88>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_ETH_Init+0x88>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_ETH_Init+0x80>)
 80008c0:	4a15      	ldr	r2, [pc, #84]	; (8000918 <MX_ETH_Init+0x88>)
 80008c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_ETH_Init+0x80>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_ETH_Init+0x80>)
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <MX_ETH_Init+0x8c>)
 80008ce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_ETH_Init+0x80>)
 80008d2:	4a13      	ldr	r2, [pc, #76]	; (8000920 <MX_ETH_Init+0x90>)
 80008d4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_ETH_Init+0x80>)
 80008d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008dc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_ETH_Init+0x80>)
 80008e0:	f000 feca 	bl	8001678 <HAL_ETH_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008ea:	f000 f99b 	bl	8000c24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008ee:	2238      	movs	r2, #56	; 0x38
 80008f0:	2100      	movs	r1, #0
 80008f2:	480c      	ldr	r0, [pc, #48]	; (8000924 <MX_ETH_Init+0x94>)
 80008f4:	f005 fecc 	bl	8006690 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_ETH_Init+0x94>)
 80008fa:	2221      	movs	r2, #33	; 0x21
 80008fc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_ETH_Init+0x94>)
 8000900:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000904:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_ETH_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	240002f4 	.word	0x240002f4
 8000914:	40028000 	.word	0x40028000
 8000918:	24000940 	.word	0x24000940
 800091c:	24000240 	.word	0x24000240
 8000920:	240001e0 	.word	0x240001e0
 8000924:	240002bc 	.word	0x240002bc

08000928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 800092e:	4a23      	ldr	r2, [pc, #140]	; (80009bc <MX_USART3_UART_Init+0x94>)
 8000930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000970:	4811      	ldr	r0, [pc, #68]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000972:	f004 f923 	bl	8004bbc <HAL_UART_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 f952 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000984:	f005 fa2a 	bl	8005ddc <HAL_UARTEx_SetTxFifoThreshold>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800098e:	f000 f949 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000996:	f005 fa5f 	bl	8005e58 <HAL_UARTEx_SetRxFifoThreshold>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009a0:	f000 f940 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 80009a6:	f005 f9e0 	bl	8005d6a <HAL_UARTEx_DisableFifoMode>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009b0:	f000 f938 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	240003a4 	.word	0x240003a4
 80009bc:	40004800 	.word	0x40004800

080009c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009cc:	2209      	movs	r2, #9
 80009ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009de:	2202      	movs	r2, #2
 80009e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a08:	f001 fc23 	bl	8002252 <HAL_PCD_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a12:	f000 f907 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	24000434 	.word	0x24000434
 8000a20:	40080000 	.word	0x40080000

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b62      	ldr	r3, [pc, #392]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	4a60      	ldr	r2, [pc, #384]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4a:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a58:	4b5a      	ldr	r3, [pc, #360]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	4a59      	ldr	r2, [pc, #356]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a68:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b53      	ldr	r3, [pc, #332]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a51      	ldr	r2, [pc, #324]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b4f      	ldr	r3, [pc, #316]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a4a      	ldr	r2, [pc, #296]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b47      	ldr	r3, [pc, #284]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a42      	ldr	r2, [pc, #264]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0308 	and.w	r3, r3, #8
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad0:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	4a3b      	ldr	r2, [pc, #236]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae0:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aee:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	4a33      	ldr	r2, [pc, #204]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afe:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <MX_GPIO_Init+0x1a0>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b12:	482d      	ldr	r0, [pc, #180]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000b14:	f001 fb84 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1e:	482b      	ldr	r0, [pc, #172]	; (8000bcc <MX_GPIO_Init+0x1a8>)
 8000b20:	f001 fb7e 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2102      	movs	r1, #2
 8000b28:	4829      	ldr	r0, [pc, #164]	; (8000bd0 <MX_GPIO_Init+0x1ac>)
 8000b2a:	f001 fb79 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4824      	ldr	r0, [pc, #144]	; (8000bd4 <MX_GPIO_Init+0x1b0>)
 8000b44:	f001 f9bc 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b48:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4819      	ldr	r0, [pc, #100]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000b62:	f001 f9ad 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MX_GPIO_Init+0x1a8>)
 8000b80:	f001 f99e 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000b9a:	f001 f991 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_GPIO_Init+0x1ac>)
 8000bb6:	f001 f983 	bl	8001ec0 <HAL_GPIO_Init>

}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	; 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	58020400 	.word	0x58020400
 8000bcc:	58020c00 	.word	0x58020c00
 8000bd0:	58021000 	.word	0x58021000
 8000bd4:	58020800 	.word	0x58020800
 8000bd8:	58021800 	.word	0x58021800

08000bdc <__io_putchar>:
  * @param  None
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the LPUART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000be4:	1d39      	adds	r1, r7, #4
 8000be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bea:	2201      	movs	r2, #1
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <__io_putchar+0x20>)
 8000bee:	f004 f835 	bl	8004c5c <HAL_UART_Transmit>

  return ch;
 8000bf2:	687b      	ldr	r3, [r7, #4]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	240003a4 	.word	0x240003a4

08000c00 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_UART_Receive(&huart3, &ch, 1, 0xFFFF);
 8000c06:	1df9      	adds	r1, r7, #7
 8000c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4804      	ldr	r0, [pc, #16]	; (8000c20 <__io_getchar+0x20>)
 8000c10:	f004 f8ba 	bl	8004d88 <HAL_UART_Receive>

	return ch;
 8000c14:	79fb      	ldrb	r3, [r7, #7]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	240003a4 	.word	0x240003a4

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_MspInit+0x30>)
 8000c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x30>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x30>)
 8000c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	58024400 	.word	0x58024400

08000c64 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a59      	ldr	r2, [pc, #356]	; (8000de8 <HAL_ETH_MspInit+0x184>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	f040 80ab 	bne.w	8000dde <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c88:	4b58      	ldr	r3, [pc, #352]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8e:	4a57      	ldr	r2, [pc, #348]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c98:	4b54      	ldr	r3, [pc, #336]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000c9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ca2:	623b      	str	r3, [r7, #32]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ca6:	4b51      	ldr	r3, [pc, #324]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000ca8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cac:	4a4f      	ldr	r2, [pc, #316]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000cb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000cc4:	4b49      	ldr	r3, [pc, #292]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000cc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cca:	4a48      	ldr	r2, [pc, #288]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cd4:	4b45      	ldr	r3, [pc, #276]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000cd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b42      	ldr	r3, [pc, #264]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a40      	ldr	r2, [pc, #256]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a39      	ldr	r2, [pc, #228]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b33      	ldr	r3, [pc, #204]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a31      	ldr	r2, [pc, #196]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000d26:	f043 0302 	orr.w	r3, r3, #2
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b27      	ldr	r3, [pc, #156]	; (8000dec <HAL_ETH_MspInit+0x188>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d5a:	2332      	movs	r3, #50	; 0x32
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6a:	230b      	movs	r3, #11
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	481e      	ldr	r0, [pc, #120]	; (8000df0 <HAL_ETH_MspInit+0x18c>)
 8000d76:	f001 f8a3 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d7a:	2386      	movs	r3, #134	; 0x86
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8a:	230b      	movs	r3, #11
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	4817      	ldr	r0, [pc, #92]	; (8000df4 <HAL_ETH_MspInit+0x190>)
 8000d96:	f001 f893 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dac:	230b      	movs	r3, #11
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4810      	ldr	r0, [pc, #64]	; (8000df8 <HAL_ETH_MspInit+0x194>)
 8000db8:	f001 f882 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000dbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dce:	230b      	movs	r3, #11
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <HAL_ETH_MspInit+0x198>)
 8000dda:	f001 f871 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3738      	adds	r7, #56	; 0x38
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40028000 	.word	0x40028000
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58020800 	.word	0x58020800
 8000df4:	58020000 	.word	0x58020000
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	58021800 	.word	0x58021800

08000e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0b8      	sub	sp, #224	; 0xe0
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	22bc      	movs	r2, #188	; 0xbc
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f005 fc35 	bl	8006690 <memset>
  if(huart->Instance==USART3)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <HAL_UART_MspInit+0xc0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d142      	bne.n	8000eb6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e30:	2302      	movs	r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fb54 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e4a:	f7ff feeb 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eaa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_UART_MspInit+0xc8>)
 8000eb2:	f001 f805 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	37e0      	adds	r7, #224	; 0xe0
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40004800 	.word	0x40004800
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58020c00 	.word	0x58020c00

08000ecc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0b8      	sub	sp, #224	; 0xe0
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	22bc      	movs	r2, #188	; 0xbc
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 fbcf 	bl	8006690 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <HAL_PCD_MspInit+0xe8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d156      	bne.n	8000faa <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000efc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f00:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 faec 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000f1a:	f7ff fe83 	bl	8000c24 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f1e:	f001 fb1b 	bl	8002558 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_PCD_MspInit+0xec>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <HAL_PCD_MspInit+0xec>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_PCD_MspInit+0xec>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f40:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f64:	4619      	mov	r1, r3
 8000f66:	4815      	ldr	r0, [pc, #84]	; (8000fbc <HAL_PCD_MspInit+0xf0>)
 8000f68:	f000 ffaa 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f84:	4619      	mov	r1, r3
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <HAL_PCD_MspInit+0xf0>)
 8000f88:	f000 ff9a 	bl	8001ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_PCD_MspInit+0xec>)
 8000f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <HAL_PCD_MspInit+0xec>)
 8000f94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_PCD_MspInit+0xec>)
 8000f9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	37e0      	adds	r7, #224	; 0xe0
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40080000 	.word	0x40080000
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58020000 	.word	0x58020000

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 f9ec 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	return 1;
 8001018:	2301      	movs	r3, #1
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_kill>:

int _kill(int pid, int sig)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800102e:	f005 fb05 	bl	800663c <__errno>
 8001032:	4603      	mov	r3, r0
 8001034:	2216      	movs	r2, #22
 8001036:	601a      	str	r2, [r3, #0]
	return -1;
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <_exit>:

void _exit (int status)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ffe7 	bl	8001024 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001056:	e7fe      	b.n	8001056 <_exit+0x12>

08001058 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e00a      	b.n	8001080 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800106a:	f7ff fdc9 	bl	8000c00 <__io_getchar>
 800106e:	4601      	mov	r1, r0
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	b2ca      	uxtb	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf0      	blt.n	800106a <_read+0x12>
	}

return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e009      	b.n	80010b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	60ba      	str	r2, [r7, #8]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fd95 	bl	8000bdc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbf1      	blt.n	80010a4 <_write+0x12>
	}
	return len;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_close>:

int _close(int file)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f2:	605a      	str	r2, [r3, #4]
	return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_isatty>:

int _isatty(int file)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	return 1;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f005 fa6a 	bl	800663c <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	24080000 	.word	0x24080000
 8001194:	00000400 	.word	0x00000400
 8001198:	24000948 	.word	0x24000948
 800119c:	24000960 	.word	0x24000960

080011a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011a4:	4b37      	ldr	r3, [pc, #220]	; (8001284 <SystemInit+0xe4>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011aa:	4a36      	ldr	r2, [pc, #216]	; (8001284 <SystemInit+0xe4>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011b4:	4b34      	ldr	r3, [pc, #208]	; (8001288 <SystemInit+0xe8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	2b06      	cmp	r3, #6
 80011be:	d807      	bhi.n	80011d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c0:	4b31      	ldr	r3, [pc, #196]	; (8001288 <SystemInit+0xe8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f023 030f 	bic.w	r3, r3, #15
 80011c8:	4a2f      	ldr	r2, [pc, #188]	; (8001288 <SystemInit+0xe8>)
 80011ca:	f043 0307 	orr.w	r3, r3, #7
 80011ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011d0:	4b2e      	ldr	r3, [pc, #184]	; (800128c <SystemInit+0xec>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a2d      	ldr	r2, [pc, #180]	; (800128c <SystemInit+0xec>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <SystemInit+0xec>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <SystemInit+0xec>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4929      	ldr	r1, [pc, #164]	; (800128c <SystemInit+0xec>)
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <SystemInit+0xf0>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <SystemInit+0xe8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <SystemInit+0xe8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 030f 	bic.w	r3, r3, #15
 8001202:	4a21      	ldr	r2, [pc, #132]	; (8001288 <SystemInit+0xe8>)
 8001204:	f043 0307 	orr.w	r3, r3, #7
 8001208:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <SystemInit+0xec>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <SystemInit+0xec>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <SystemInit+0xec>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <SystemInit+0xec>)
 800121e:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <SystemInit+0xf4>)
 8001220:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <SystemInit+0xec>)
 8001224:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <SystemInit+0xf8>)
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <SystemInit+0xec>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <SystemInit+0xfc>)
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <SystemInit+0xec>)
 8001230:	2200      	movs	r2, #0
 8001232:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <SystemInit+0xec>)
 8001236:	4a19      	ldr	r2, [pc, #100]	; (800129c <SystemInit+0xfc>)
 8001238:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <SystemInit+0xec>)
 800123c:	2200      	movs	r2, #0
 800123e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <SystemInit+0xec>)
 8001242:	4a16      	ldr	r2, [pc, #88]	; (800129c <SystemInit+0xfc>)
 8001244:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <SystemInit+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <SystemInit+0xec>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <SystemInit+0xec>)
 8001252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001256:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <SystemInit+0xec>)
 800125a:	2200      	movs	r2, #0
 800125c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <SystemInit+0x100>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <SystemInit+0x104>)
 8001264:	4013      	ands	r3, r2
 8001266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800126a:	d202      	bcs.n	8001272 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <SystemInit+0x108>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <SystemInit+0x10c>)
 8001274:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001278:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00
 8001288:	52002000 	.word	0x52002000
 800128c:	58024400 	.word	0x58024400
 8001290:	eaf6ed7f 	.word	0xeaf6ed7f
 8001294:	02020200 	.word	0x02020200
 8001298:	01ff0000 	.word	0x01ff0000
 800129c:	01010280 	.word	0x01010280
 80012a0:	5c001000 	.word	0x5c001000
 80012a4:	ffff0000 	.word	0xffff0000
 80012a8:	51008108 	.word	0x51008108
 80012ac:	52004000 	.word	0x52004000

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b4:	f7ff ff74 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	; (80012fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012de:	f005 f9b3 	bl	8006648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff f9d7 	bl	8000694 <main>
  bx  lr
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012f0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80012f4:	080095e4 	.word	0x080095e4
  ldr r2, =_sbss
 80012f8:	240002a0 	.word	0x240002a0
  ldr r4, =_ebss
 80012fc:	24000960 	.word	0x24000960

08001300 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC3_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f982 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001310:	f001 ff16 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 8001314:	4602      	mov	r2, r0
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_Init+0x68>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	4913      	ldr	r1, [pc, #76]	; (8001370 <HAL_Init+0x6c>)
 8001322:	5ccb      	ldrb	r3, [r1, r3]
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_Init+0x68>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <HAL_Init+0x6c>)
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	f003 031f 	and.w	r3, r3, #31
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_Init+0x70>)
 8001346:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001348:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <HAL_Init+0x74>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f814 	bl	800137c <HAL_InitTick>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e002      	b.n	8001364 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800135e:	f7ff fc67 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	58024400 	.word	0x58024400
 8001370:	080091c0 	.word	0x080091c0
 8001374:	24000004 	.word	0x24000004
 8001378:	24000000 	.word	0x24000000

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e021      	b.n	80013d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_InitTick+0x64>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_InitTick+0x60>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f959 	bl	800165e <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 f931 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x68>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2400000c 	.word	0x2400000c
 80013e0:	24000000 	.word	0x24000000
 80013e4:	24000008 	.word	0x24000008

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	2400000c 	.word	0x2400000c
 800140c:	2400094c 	.word	0x2400094c

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	2400094c 	.word	0x2400094c

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_Delay+0x44>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2400000c 	.word	0x2400000c

08001470 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetREVID+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0c1b      	lsrs	r3, r3, #16
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	5c001000 	.word	0x5c001000

08001488 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001498:	4904      	ldr	r1, [pc, #16]	; (80014ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	58000400 	.word	0x58000400

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <__NVIC_SetPriorityGrouping+0x40>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x40>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00
 80014f4:	05fa0000 	.word	0x05fa0000

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff47 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff5e 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff90 	bl	8001568 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5f 	bl	8001514 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffb2 	bl	80015d0 <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0cf      	b.n	800182a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001690:	2b00      	cmp	r3, #0
 8001692:	d106      	bne.n	80016a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2223      	movs	r2, #35	; 0x23
 8001698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fae1 	bl	8000c64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	4b64      	ldr	r3, [pc, #400]	; (8001834 <HAL_ETH_Init+0x1bc>)
 80016a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a8:	4a62      	ldr	r2, [pc, #392]	; (8001834 <HAL_ETH_Init+0x1bc>)
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016b2:	4b60      	ldr	r3, [pc, #384]	; (8001834 <HAL_ETH_Init+0x1bc>)
 80016b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7a1b      	ldrb	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d103      	bne.n	80016d0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff fedd 	bl	8001488 <HAL_SYSCFG_ETHInterfaceSelect>
 80016ce:	e003      	b.n	80016d8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80016d0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80016d4:	f7ff fed8 	bl	8001488 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80016d8:	4b57      	ldr	r3, [pc, #348]	; (8001838 <HAL_ETH_Init+0x1c0>)
 80016da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f4:	f7ff fe8c 	bl	8001410 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016fa:	e011      	b.n	8001720 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016fc:	f7ff fe88 	bl	8001410 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800170a:	d909      	bls.n	8001720 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2204      	movs	r2, #4
 8001710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	22e0      	movs	r2, #224	; 0xe0
 8001718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e084      	b.n	800182a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1e4      	bne.n	80016fc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f886 	bl	8001844 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001738:	f001 fe7c 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 800173c:	4603      	mov	r3, r0
 800173e:	4a3f      	ldr	r2, [pc, #252]	; (800183c <HAL_ETH_Init+0x1c4>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	0c9a      	lsrs	r2, r3, #18
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3a01      	subs	r2, #1
 800174c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fa71 	bl	8001c38 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001762:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800176e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001772:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	22e0      	movs	r2, #224	; 0xe0
 800178e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e049      	b.n	800182a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_ETH_Init+0x1c8>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6952      	ldr	r2, [r2, #20]
 80017aa:	0051      	lsls	r1, r2, #1
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017b6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fad9 	bl	8001d72 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fb1f 	bl	8001e04 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	3305      	adds	r3, #5
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	021a      	lsls	r2, r3, #8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	3304      	adds	r3, #4
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	3303      	adds	r3, #3
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	061a      	lsls	r2, r3, #24
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	3302      	adds	r3, #2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	041b      	lsls	r3, r3, #16
 80017f8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	3301      	adds	r3, #1
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001804:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001812:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001814:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2210      	movs	r2, #16
 8001824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	58024400 	.word	0x58024400
 8001838:	58000400 	.word	0x58000400
 800183c:	431bde83 	.word	0x431bde83
 8001840:	ffff8001 	.word	0xffff8001

08001844 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001854:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800185c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800185e:	f001 fde9 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8001862:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d908      	bls.n	800187e <HAL_ETH_SetMDIOClockRange+0x3a>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d804      	bhi.n	800187e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e027      	b.n	80018ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d908      	bls.n	8001898 <HAL_ETH_SetMDIOClockRange+0x54>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d204      	bcs.n	8001898 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e01a      	b.n	80018ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d303      	bcc.n	80018a8 <HAL_ETH_SetMDIOClockRange+0x64>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d911      	bls.n	80018cc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d908      	bls.n	80018c2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d804      	bhi.n	80018c2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e005      	b.n	80018ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e000      	b.n	80018ce <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80018cc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	01312cff 	.word	0x01312cff
 80018e4:	02160ebf 	.word	0x02160ebf
 80018e8:	03938700 	.word	0x03938700
 80018ec:	05f5e0ff 	.word	0x05f5e0ff
 80018f0:	08f0d17f 	.word	0x08f0d17f

080018f4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001906:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	791b      	ldrb	r3, [r3, #4]
 800190c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800190e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	7b1b      	ldrb	r3, [r3, #12]
 8001914:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001916:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7b5b      	ldrb	r3, [r3, #13]
 800191c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800191e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	7b9b      	ldrb	r3, [r3, #14]
 8001924:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	7bdb      	ldrb	r3, [r3, #15]
 800192c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800192e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	7c12      	ldrb	r2, [r2, #16]
 8001934:	2a00      	cmp	r2, #0
 8001936:	d102      	bne.n	800193e <ETH_SetMACConfig+0x4a>
 8001938:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800193c:	e000      	b.n	8001940 <ETH_SetMACConfig+0x4c>
 800193e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001940:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	7c52      	ldrb	r2, [r2, #17]
 8001946:	2a00      	cmp	r2, #0
 8001948:	d102      	bne.n	8001950 <ETH_SetMACConfig+0x5c>
 800194a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800194e:	e000      	b.n	8001952 <ETH_SetMACConfig+0x5e>
 8001950:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001952:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	7c9b      	ldrb	r3, [r3, #18]
 8001958:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800195a:	431a      	orrs	r2, r3
               macconf->Speed |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001960:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001966:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	7f1b      	ldrb	r3, [r3, #28]
 800196c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800196e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7f5b      	ldrb	r3, [r3, #29]
 8001974:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001976:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	7f92      	ldrb	r2, [r2, #30]
 800197c:	2a00      	cmp	r2, #0
 800197e:	d102      	bne.n	8001986 <ETH_SetMACConfig+0x92>
 8001980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001984:	e000      	b.n	8001988 <ETH_SetMACConfig+0x94>
 8001986:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001988:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	7fdb      	ldrb	r3, [r3, #31]
 800198e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001990:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001998:	2a00      	cmp	r2, #0
 800199a:	d102      	bne.n	80019a2 <ETH_SetMACConfig+0xae>
 800199c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a0:	e000      	b.n	80019a4 <ETH_SetMACConfig+0xb0>
 80019a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019a4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019b2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80019b4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b56      	ldr	r3, [pc, #344]	; (8001b20 <ETH_SetMACConfig+0x22c>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	430b      	orrs	r3, r1
 80019d0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019de:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019e8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019f2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80019fc:	2a00      	cmp	r2, #0
 80019fe:	d102      	bne.n	8001a06 <ETH_SetMACConfig+0x112>
 8001a00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a04:	e000      	b.n	8001a08 <ETH_SetMACConfig+0x114>
 8001a06:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a08:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <ETH_SetMACConfig+0x230>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	430b      	orrs	r3, r1
 8001a24:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a2c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <ETH_SetMACConfig+0x234>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	430b      	orrs	r3, r1
 8001a48:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a50:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a56:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a5e:	2a00      	cmp	r2, #0
 8001a60:	d101      	bne.n	8001a66 <ETH_SetMACConfig+0x172>
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	e000      	b.n	8001a68 <ETH_SetMACConfig+0x174>
 8001a66:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a68:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a7a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001a7e:	4013      	ands	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	430b      	orrs	r3, r1
 8001a88:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001a90:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001a98:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	f023 0103 	bic.w	r1, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001abe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001ada:	2a00      	cmp	r2, #0
 8001adc:	d101      	bne.n	8001ae2 <ETH_SetMACConfig+0x1ee>
 8001ade:	2240      	movs	r2, #64	; 0x40
 8001ae0:	e000      	b.n	8001ae4 <ETH_SetMACConfig+0x1f0>
 8001ae2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001ae4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001aec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001af6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001b04:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	00048083 	.word	0x00048083
 8001b24:	c0f88000 	.word	0xc0f88000
 8001b28:	fffffef0 	.word	0xfffffef0

08001b2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <ETH_SetDMAConfig+0xf8>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	6811      	ldr	r1, [r2, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b52:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	791b      	ldrb	r3, [r3, #4]
 8001b58:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b5e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	7b1b      	ldrb	r3, [r3, #12]
 8001b64:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <ETH_SetDMAConfig+0xfc>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	68f9      	ldr	r1, [r7, #12]
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b84:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	7b5b      	ldrb	r3, [r3, #13]
 8001b8a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <ETH_SetDMAConfig+0x100>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	430b      	orrs	r3, r1
 8001bac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bb0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	7d1b      	ldrb	r3, [r3, #20]
 8001bbc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bbe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	7f5b      	ldrb	r3, [r3, #29]
 8001bc4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <ETH_SetDMAConfig+0x104>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	68f9      	ldr	r1, [r7, #12]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001be6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	7f1b      	ldrb	r3, [r3, #28]
 8001bee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c00:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <ETH_SetDMAConfig+0x108>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c14:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	ffff87fd 	.word	0xffff87fd
 8001c28:	ffff2ffe 	.word	0xffff2ffe
 8001c2c:	fffec000 	.word	0xfffec000
 8001c30:	ffc0efef 	.word	0xffc0efef
 8001c34:	7fc0ffff 	.word	0x7fc0ffff

08001c38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0a4      	sub	sp, #144	; 0x90
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c46:	2300      	movs	r3, #0
 8001c48:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001c90:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001c94:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001ce2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ce8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cec:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d12:	2300      	movs	r3, #0
 8001d14:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fde6 	bl	80018f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d58:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fee1 	bl	8001b2c <ETH_SetDMAConfig>
}
 8001d6a:	bf00      	nop
 8001d6c:	3790      	adds	r7, #144	; 0x90
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e01d      	b.n	8001dbc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68d9      	ldr	r1, [r3, #12]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	3206      	adds	r2, #6
 8001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3301      	adds	r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d9de      	bls.n	8001d80 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e023      	b.n	8001e5a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6919      	ldr	r1, [r3, #16]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	3212      	adds	r2, #18
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3301      	adds	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d9d8      	bls.n	8001e12 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e86:	461a      	mov	r2, r3
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eae:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ece:	4b89      	ldr	r3, [pc, #548]	; (80020f4 <HAL_GPIO_Init+0x234>)
 8001ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ed2:	e194      	b.n	80021fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8186 	beq.w	80021f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d005      	beq.n	8001f04 <HAL_GPIO_Init+0x44>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d130      	bne.n	8001f66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	f003 0201 	and.w	r2, r3, #1
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d017      	beq.n	8001fa2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d123      	bne.n	8001ff6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	69b9      	ldr	r1, [r7, #24]
 8001ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0203 	and.w	r2, r3, #3
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80e0 	beq.w	80021f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_GPIO_Init+0x238>)
 800203a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800203e:	4a2e      	ldr	r2, [pc, #184]	; (80020f8 <HAL_GPIO_Init+0x238>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_GPIO_Init+0x238>)
 800204a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002056:	4a29      	ldr	r2, [pc, #164]	; (80020fc <HAL_GPIO_Init+0x23c>)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a20      	ldr	r2, [pc, #128]	; (8002100 <HAL_GPIO_Init+0x240>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d052      	beq.n	8002128 <HAL_GPIO_Init+0x268>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <HAL_GPIO_Init+0x244>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d031      	beq.n	80020ee <HAL_GPIO_Init+0x22e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <HAL_GPIO_Init+0x248>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02b      	beq.n	80020ea <HAL_GPIO_Init+0x22a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_GPIO_Init+0x24c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d025      	beq.n	80020e6 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_GPIO_Init+0x250>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_GPIO_Init+0x254>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d019      	beq.n	80020de <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1a      	ldr	r2, [pc, #104]	; (8002118 <HAL_GPIO_Init+0x258>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_GPIO_Init+0x25c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00d      	beq.n	80020d6 <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a18      	ldr	r2, [pc, #96]	; (8002120 <HAL_GPIO_Init+0x260>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a17      	ldr	r2, [pc, #92]	; (8002124 <HAL_GPIO_Init+0x264>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_GPIO_Init+0x20e>
 80020ca:	2309      	movs	r3, #9
 80020cc:	e02d      	b.n	800212a <HAL_GPIO_Init+0x26a>
 80020ce:	230a      	movs	r3, #10
 80020d0:	e02b      	b.n	800212a <HAL_GPIO_Init+0x26a>
 80020d2:	2308      	movs	r3, #8
 80020d4:	e029      	b.n	800212a <HAL_GPIO_Init+0x26a>
 80020d6:	2307      	movs	r3, #7
 80020d8:	e027      	b.n	800212a <HAL_GPIO_Init+0x26a>
 80020da:	2306      	movs	r3, #6
 80020dc:	e025      	b.n	800212a <HAL_GPIO_Init+0x26a>
 80020de:	2305      	movs	r3, #5
 80020e0:	e023      	b.n	800212a <HAL_GPIO_Init+0x26a>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e021      	b.n	800212a <HAL_GPIO_Init+0x26a>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e01f      	b.n	800212a <HAL_GPIO_Init+0x26a>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e01d      	b.n	800212a <HAL_GPIO_Init+0x26a>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e01b      	b.n	800212a <HAL_GPIO_Init+0x26a>
 80020f2:	bf00      	nop
 80020f4:	58000080 	.word	0x58000080
 80020f8:	58024400 	.word	0x58024400
 80020fc:	58000400 	.word	0x58000400
 8002100:	58020000 	.word	0x58020000
 8002104:	58020400 	.word	0x58020400
 8002108:	58020800 	.word	0x58020800
 800210c:	58020c00 	.word	0x58020c00
 8002110:	58021000 	.word	0x58021000
 8002114:	58021400 	.word	0x58021400
 8002118:	58021800 	.word	0x58021800
 800211c:	58021c00 	.word	0x58021c00
 8002120:	58022000 	.word	0x58022000
 8002124:	58022400 	.word	0x58022400
 8002128:	2300      	movs	r3, #0
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	f002 0203 	and.w	r2, r2, #3
 8002130:	0092      	lsls	r2, r2, #2
 8002132:	4093      	lsls	r3, r2
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800213a:	4938      	ldr	r1, [pc, #224]	; (800221c <HAL_GPIO_Init+0x35c>)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	3302      	adds	r3, #2
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800216e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800219c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	3301      	adds	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	f47f ae63 	bne.w	8001ed4 <HAL_GPIO_Init+0x14>
  }
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	3724      	adds	r7, #36	; 0x24
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	58000400 	.word	0x58000400

08002220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
 800222c:	4613      	mov	r3, r2
 800222e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800223c:	e003      	b.n	8002246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	041a      	lsls	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	619a      	str	r2, [r3, #24]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002254:	b08f      	sub	sp, #60	; 0x3c
 8002256:	af0a      	add	r7, sp, #40	; 0x28
 8002258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e116      	b.n	8002492 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fe24 	bl	8000ecc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2203      	movs	r2, #3
 8002288:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fed2 	bl	800604c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	687e      	ldr	r6, [r7, #4]
 80022b0:	466d      	mov	r5, sp
 80022b2:	f106 0410 	add.w	r4, r6, #16
 80022b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022c6:	1d33      	adds	r3, r6, #4
 80022c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f003 fe50 	bl	8005f70 <USB_CoreInit>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0d7      	b.n	8002492 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 fec0 	bl	800606e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e04a      	b.n	800238a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	333d      	adds	r3, #61	; 0x3d
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	333c      	adds	r3, #60	; 0x3c
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	b298      	uxth	r0, r3
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	3344      	adds	r3, #68	; 0x44
 8002330:	4602      	mov	r2, r0
 8002332:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3340      	adds	r3, #64	; 0x40
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	3348      	adds	r3, #72	; 0x48
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	334c      	adds	r3, #76	; 0x4c
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3354      	adds	r3, #84	; 0x54
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	3301      	adds	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	d3af      	bcc.n	80022f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e044      	b.n	8002424 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	3301      	adds	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	d3b5      	bcc.n	800239a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	687e      	ldr	r6, [r7, #4]
 8002436:	466d      	mov	r5, sp
 8002438:	f106 0410 	add.w	r4, r6, #16
 800243c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800243e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002444:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002448:	e885 0003 	stmia.w	r5, {r0, r1}
 800244c:	1d33      	adds	r3, r6, #4
 800244e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002450:	6838      	ldr	r0, [r7, #0]
 8002452:	f003 fe59 	bl	8006108 <USB_DevInit>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e014      	b.n	8002492 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	2b01      	cmp	r3, #1
 800247e:	d102      	bne.n	8002486 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f80b 	bl	800249c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f004 f817 	bl	80064be <USB_DevDisconnect>

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800249c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	10000003 	.word	0x10000003

080024e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_PWREx_ConfigSupply+0x70>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d00a      	beq.n	800250e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_PWREx_ConfigSupply+0x70>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e01f      	b.n	800254a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e01d      	b.n	800254a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_PWREx_ConfigSupply+0x70>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f023 0207 	bic.w	r2, r3, #7
 8002516:	490f      	ldr	r1, [pc, #60]	; (8002554 <HAL_PWREx_ConfigSupply+0x70>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4313      	orrs	r3, r2
 800251c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800251e:	f7fe ff77 	bl	8001410 <HAL_GetTick>
 8002522:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002524:	e009      	b.n	800253a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002526:	f7fe ff73 	bl	8001410 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002534:	d901      	bls.n	800253a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e007      	b.n	800254a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_PWREx_ConfigSupply+0x70>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002546:	d1ee      	bne.n	8002526 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	58024800 	.word	0x58024800

08002558 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	58024800 	.word	0x58024800

08002578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	f000 bc1d 	b.w	8002dc6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8087 	beq.w	80026a8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259a:	4b99      	ldr	r3, [pc, #612]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025a4:	4b96      	ldr	r3, [pc, #600]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d007      	beq.n	80025c0 <HAL_RCC_OscConfig+0x48>
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b2:	2b18      	cmp	r3, #24
 80025b4:	d110      	bne.n	80025d8 <HAL_RCC_OscConfig+0x60>
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d10b      	bne.n	80025d8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	4b8f      	ldr	r3, [pc, #572]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d06c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x12e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d168      	bne.n	80026a6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e3f6      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e0:	d106      	bne.n	80025f0 <HAL_RCC_OscConfig+0x78>
 80025e2:	4b87      	ldr	r3, [pc, #540]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a86      	ldr	r2, [pc, #536]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e02e      	b.n	800264e <HAL_RCC_OscConfig+0xd6>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10c      	bne.n	8002612 <HAL_RCC_OscConfig+0x9a>
 80025f8:	4b81      	ldr	r3, [pc, #516]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a80      	ldr	r2, [pc, #512]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80025fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b7e      	ldr	r3, [pc, #504]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a7d      	ldr	r2, [pc, #500]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800260a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e01d      	b.n	800264e <HAL_RCC_OscConfig+0xd6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0xbe>
 800261c:	4b78      	ldr	r3, [pc, #480]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a77      	ldr	r2, [pc, #476]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b75      	ldr	r3, [pc, #468]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a74      	ldr	r2, [pc, #464]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e00b      	b.n	800264e <HAL_RCC_OscConfig+0xd6>
 8002636:	4b72      	ldr	r3, [pc, #456]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a71      	ldr	r2, [pc, #452]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800263c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d013      	beq.n	800267e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe fedb 	bl	8001410 <HAL_GetTick>
 800265a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265e:	f7fe fed7 	bl	8001410 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b64      	cmp	r3, #100	; 0x64
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e3aa      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002670:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0xe6>
 800267c:	e014      	b.n	80026a8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe fec7 	bl	8001410 <HAL_GetTick>
 8002682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002686:	f7fe fec3 	bl	8001410 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b64      	cmp	r3, #100	; 0x64
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e396      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002698:	4b59      	ldr	r3, [pc, #356]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x10e>
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80cb 	beq.w	800284c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b6:	4b52      	ldr	r3, [pc, #328]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c0:	4b4f      	ldr	r3, [pc, #316]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <HAL_RCC_OscConfig+0x164>
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b18      	cmp	r3, #24
 80026d0:	d156      	bne.n	8002780 <HAL_RCC_OscConfig+0x208>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d151      	bne.n	8002780 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026dc:	4b48      	ldr	r3, [pc, #288]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_OscConfig+0x17c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e368      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026f4:	4b42      	ldr	r3, [pc, #264]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 0219 	bic.w	r2, r3, #25
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	493f      	ldr	r1, [pc, #252]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002706:	f7fe fe83 	bl	8001410 <HAL_GetTick>
 800270a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270e:	f7fe fe7f 	bl	8001410 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e352      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002720:	4b37      	ldr	r3, [pc, #220]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	f7fe fea0 	bl	8001470 <HAL_GetREVID>
 8002730:	4603      	mov	r3, r0
 8002732:	f241 0203 	movw	r2, #4099	; 0x1003
 8002736:	4293      	cmp	r3, r2
 8002738:	d817      	bhi.n	800276a <HAL_RCC_OscConfig+0x1f2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d108      	bne.n	8002754 <HAL_RCC_OscConfig+0x1dc>
 8002742:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800274a:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800274c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002750:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002752:	e07b      	b.n	800284c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	031b      	lsls	r3, r3, #12
 8002762:	4927      	ldr	r1, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002768:	e070      	b.n	800284c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	061b      	lsls	r3, r3, #24
 8002778:	4921      	ldr	r1, [pc, #132]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277e:	e065      	b.n	800284c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d048      	beq.n	800281a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 0219 	bic.w	r2, r3, #25
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	491a      	ldr	r1, [pc, #104]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fe39 	bl	8001410 <HAL_GetTick>
 800279e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a2:	f7fe fe35 	bl	8001410 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e308      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	f7fe fe56 	bl	8001470 <HAL_GetREVID>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d81a      	bhi.n	8002804 <HAL_RCC_OscConfig+0x28c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d108      	bne.n	80027e8 <HAL_RCC_OscConfig+0x270>
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80027e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e4:	6053      	str	r3, [r2, #4]
 80027e6:	e031      	b.n	800284c <HAL_RCC_OscConfig+0x2d4>
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	031b      	lsls	r3, r3, #12
 80027f6:	4902      	ldr	r1, [pc, #8]	; (8002800 <HAL_RCC_OscConfig+0x288>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
 80027fc:	e026      	b.n	800284c <HAL_RCC_OscConfig+0x2d4>
 80027fe:	bf00      	nop
 8002800:	58024400 	.word	0x58024400
 8002804:	4b9a      	ldr	r3, [pc, #616]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	4997      	ldr	r1, [pc, #604]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
 8002818:	e018      	b.n	800284c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b95      	ldr	r3, [pc, #596]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a94      	ldr	r2, [pc, #592]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fdf3 	bl	8001410 <HAL_GetTick>
 800282a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe fdef 	bl	8001410 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e2c2      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002840:	4b8b      	ldr	r3, [pc, #556]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80a9 	beq.w	80029ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285a:	4b85      	ldr	r3, [pc, #532]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002862:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002864:	4b82      	ldr	r3, [pc, #520]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d007      	beq.n	8002880 <HAL_RCC_OscConfig+0x308>
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b18      	cmp	r3, #24
 8002874:	d13a      	bne.n	80028ec <HAL_RCC_OscConfig+0x374>
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d135      	bne.n	80028ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002880:	4b7b      	ldr	r3, [pc, #492]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_OscConfig+0x320>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b80      	cmp	r3, #128	; 0x80
 8002892:	d001      	beq.n	8002898 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e296      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002898:	f7fe fdea 	bl	8001470 <HAL_GetREVID>
 800289c:	4603      	mov	r3, r0
 800289e:	f241 0203 	movw	r2, #4099	; 0x1003
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d817      	bhi.n	80028d6 <HAL_RCC_OscConfig+0x35e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0x348>
 80028ae:	4b70      	ldr	r3, [pc, #448]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028b6:	4a6e      	ldr	r2, [pc, #440]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028be:	e075      	b.n	80029ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c0:	4b6b      	ldr	r3, [pc, #428]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	069b      	lsls	r3, r3, #26
 80028ce:	4968      	ldr	r1, [pc, #416]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028d4:	e06a      	b.n	80029ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028d6:	4b66      	ldr	r3, [pc, #408]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	061b      	lsls	r3, r3, #24
 80028e4:	4962      	ldr	r1, [pc, #392]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ea:	e05f      	b.n	80029ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d042      	beq.n	800297a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028f4:	4b5e      	ldr	r3, [pc, #376]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a5d      	ldr	r2, [pc, #372]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fd86 	bl	8001410 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002908:	f7fe fd82 	bl	8001410 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e255      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800291a:	4b55      	ldr	r3, [pc, #340]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002926:	f7fe fda3 	bl	8001470 <HAL_GetREVID>
 800292a:	4603      	mov	r3, r0
 800292c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002930:	4293      	cmp	r3, r2
 8002932:	d817      	bhi.n	8002964 <HAL_RCC_OscConfig+0x3ec>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	2b20      	cmp	r3, #32
 800293a:	d108      	bne.n	800294e <HAL_RCC_OscConfig+0x3d6>
 800293c:	4b4c      	ldr	r3, [pc, #304]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002944:	4a4a      	ldr	r2, [pc, #296]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002946:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800294a:	6053      	str	r3, [r2, #4]
 800294c:	e02e      	b.n	80029ac <HAL_RCC_OscConfig+0x434>
 800294e:	4b48      	ldr	r3, [pc, #288]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	069b      	lsls	r3, r3, #26
 800295c:	4944      	ldr	r1, [pc, #272]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 8002962:	e023      	b.n	80029ac <HAL_RCC_OscConfig+0x434>
 8002964:	4b42      	ldr	r3, [pc, #264]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	493f      	ldr	r1, [pc, #252]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002974:	4313      	orrs	r3, r2
 8002976:	60cb      	str	r3, [r1, #12]
 8002978:	e018      	b.n	80029ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800297a:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe fd43 	bl	8001410 <HAL_GetTick>
 800298a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800298e:	f7fe fd3f 	bl	8001410 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e212      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029a0:	4b33      	ldr	r3, [pc, #204]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d036      	beq.n	8002a26 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d019      	beq.n	80029f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c0:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80029c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c4:	4a2a      	ldr	r2, [pc, #168]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe fd20 	bl	8001410 <HAL_GetTick>
 80029d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fd1c 	bl	8001410 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e1ef      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80029e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x45c>
 80029f2:	e018      	b.n	8002a26 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80029f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f8:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe fd06 	bl	8001410 <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fd02 	bl	8001410 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e1d5      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d039      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a0c      	ldr	r2, [pc, #48]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a46:	f7fe fce3 	bl	8001410 <HAL_GetTick>
 8002a4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a4e:	f7fe fcdf 	bl	8001410 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e1b2      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4d6>
 8002a6c:	e01b      	b.n	8002aa6 <HAL_RCC_OscConfig+0x52e>
 8002a6e:	bf00      	nop
 8002a70:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a74:	4b9b      	ldr	r3, [pc, #620]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a9a      	ldr	r2, [pc, #616]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fcc6 	bl	8001410 <HAL_GetTick>
 8002a84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a88:	f7fe fcc2 	bl	8001410 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e195      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a9a:	4b92      	ldr	r3, [pc, #584]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8081 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ab4:	4b8c      	ldr	r3, [pc, #560]	; (8002ce8 <HAL_RCC_OscConfig+0x770>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a8b      	ldr	r2, [pc, #556]	; (8002ce8 <HAL_RCC_OscConfig+0x770>)
 8002aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fca6 	bl	8001410 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ac8:	f7fe fca2 	bl	8001410 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e175      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ada:	4b83      	ldr	r3, [pc, #524]	; (8002ce8 <HAL_RCC_OscConfig+0x770>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x584>
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a7c      	ldr	r2, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	e02d      	b.n	8002b58 <HAL_RCC_OscConfig+0x5e0>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x5a6>
 8002b04:	4b77      	ldr	r3, [pc, #476]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a76      	ldr	r2, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	4b74      	ldr	r3, [pc, #464]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a73      	ldr	r2, [pc, #460]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	e01c      	b.n	8002b58 <HAL_RCC_OscConfig+0x5e0>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x5c8>
 8002b26:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a6e      	ldr	r2, [pc, #440]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
 8002b32:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a6b      	ldr	r2, [pc, #428]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0x5e0>
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a67      	ldr	r2, [pc, #412]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a64      	ldr	r2, [pc, #400]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe fc56 	bl	8001410 <HAL_GetTick>
 8002b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fc52 	bl	8001410 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e123      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b7e:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ee      	beq.n	8002b68 <HAL_RCC_OscConfig+0x5f0>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fc40 	bl	8001410 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe fc3c 	bl	8001410 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e10d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002baa:	4b4e      	ldr	r3, [pc, #312]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1ee      	bne.n	8002b94 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8102 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bc0:	4b48      	ldr	r3, [pc, #288]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bc8:	2b18      	cmp	r3, #24
 8002bca:	f000 80bd 	beq.w	8002d48 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	f040 809e 	bne.w	8002d14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a41      	ldr	r2, [pc, #260]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fc14 	bl	8001410 <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe fc10 	bl	8001410 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0e3      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bfe:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0a:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <HAL_RCC_OscConfig+0x774>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	4931      	ldr	r1, [pc, #196]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	628b      	str	r3, [r1, #40]	; 0x28
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	3b01      	subs	r3, #1
 8002c34:	025b      	lsls	r3, r3, #9
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	061b      	lsls	r3, r3, #24
 8002c50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c54:	4923      	ldr	r1, [pc, #140]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	4a21      	ldr	r2, [pc, #132]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c66:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6a:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <HAL_RCC_OscConfig+0x778>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c72:	00d2      	lsls	r2, r2, #3
 8002c74:	491b      	ldr	r1, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	f023 020c 	bic.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4917      	ldr	r1, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c8c:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	f023 0202 	bic.w	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	4912      	ldr	r1, [pc, #72]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fe fb99 	bl	8001410 <HAL_GetTick>
 8002cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ce0:	e011      	b.n	8002d06 <HAL_RCC_OscConfig+0x78e>
 8002ce2:	bf00      	nop
 8002ce4:	58024400 	.word	0x58024400
 8002ce8:	58024800 	.word	0x58024800
 8002cec:	fffffc0c 	.word	0xfffffc0c
 8002cf0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fb8c 	bl	8001410 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e05f      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d06:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_RCC_OscConfig+0x858>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x77c>
 8002d12:	e057      	b.n	8002dc4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d14:	4b2e      	ldr	r3, [pc, #184]	; (8002dd0 <HAL_RCC_OscConfig+0x858>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2d      	ldr	r2, [pc, #180]	; (8002dd0 <HAL_RCC_OscConfig+0x858>)
 8002d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fb76 	bl	8001410 <HAL_GetTick>
 8002d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe fb72 	bl	8001410 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e045      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <HAL_RCC_OscConfig+0x858>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x7b0>
 8002d46:	e03d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_RCC_OscConfig+0x858>)
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_RCC_OscConfig+0x858>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d031      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f003 0203 	and.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d12a      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d122      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d11a      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	0a5b      	lsrs	r3, r3, #9
 8002d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d111      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d108      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	0e1b      	lsrs	r3, r3, #24
 8002db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3730      	adds	r7, #48	; 0x30
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	58024400 	.word	0x58024400

08002dd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e19c      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b8a      	ldr	r3, [pc, #552]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d910      	bls.n	8002e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b87      	ldr	r3, [pc, #540]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 020f 	bic.w	r2, r3, #15
 8002dfe:	4985      	ldr	r1, [pc, #532]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b83      	ldr	r3, [pc, #524]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e184      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	4b7b      	ldr	r3, [pc, #492]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d908      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e34:	4b78      	ldr	r3, [pc, #480]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4975      	ldr	r1, [pc, #468]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	4b70      	ldr	r3, [pc, #448]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d908      	bls.n	8002e74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e62:	4b6d      	ldr	r3, [pc, #436]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	496a      	ldr	r1, [pc, #424]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	4b64      	ldr	r3, [pc, #400]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d908      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e90:	4b61      	ldr	r3, [pc, #388]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	495e      	ldr	r1, [pc, #376]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d010      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d908      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ebe:	4b56      	ldr	r3, [pc, #344]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4953      	ldr	r1, [pc, #332]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	4b4d      	ldr	r3, [pc, #308]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d908      	bls.n	8002efe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eec:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f023 020f 	bic.w	r2, r3, #15
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4947      	ldr	r1, [pc, #284]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d055      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f0a:	4b43      	ldr	r3, [pc, #268]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	4940      	ldr	r1, [pc, #256]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f24:	4b3c      	ldr	r3, [pc, #240]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d121      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0f6      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f3c:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d115      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0ea      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f54:	4b30      	ldr	r3, [pc, #192]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0de      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0d6      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f74:	4b28      	ldr	r3, [pc, #160]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f023 0207 	bic.w	r2, r3, #7
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4925      	ldr	r1, [pc, #148]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe fa43 	bl	8001410 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8e:	f7fe fa3f 	bl	8001410 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0be      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d1eb      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d010      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d208      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f023 020f 	bic.w	r2, r3, #15
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	490e      	ldr	r1, [pc, #56]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d214      	bcs.n	800301c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 020f 	bic.w	r2, r3, #15
 8002ffa:	4906      	ldr	r1, [pc, #24]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e086      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
 8003014:	52002000 	.word	0x52002000
 8003018:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d010      	beq.n	800304a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	4b3f      	ldr	r3, [pc, #252]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003034:	429a      	cmp	r2, r3
 8003036:	d208      	bcs.n	800304a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003038:	4b3c      	ldr	r3, [pc, #240]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	4939      	ldr	r1, [pc, #228]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 8003046:	4313      	orrs	r3, r2
 8003048:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	4b34      	ldr	r3, [pc, #208]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003062:	429a      	cmp	r2, r3
 8003064:	d208      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	492e      	ldr	r1, [pc, #184]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 8003074:	4313      	orrs	r3, r2
 8003076:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003090:	429a      	cmp	r2, r3
 8003092:	d208      	bcs.n	80030a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003094:	4b25      	ldr	r3, [pc, #148]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	4922      	ldr	r1, [pc, #136]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030be:	429a      	cmp	r2, r3
 80030c0:	d208      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4917      	ldr	r1, [pc, #92]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030d4:	f000 f834 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	0a1b      	lsrs	r3, r3, #8
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	4912      	ldr	r1, [pc, #72]	; (8003130 <HAL_RCC_ClockConfig+0x35c>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <HAL_RCC_ClockConfig+0x35c>)
 80030fc:	5cd3      	ldrb	r3, [r2, r3]
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x360>)
 800310a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800310c:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x364>)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x368>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe f930 	bl	800137c <HAL_InitTick>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	58024400 	.word	0x58024400
 8003130:	080091c0 	.word	0x080091c0
 8003134:	24000004 	.word	0x24000004
 8003138:	24000000 	.word	0x24000000
 800313c:	24000008 	.word	0x24000008

08003140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003146:	4bb3      	ldr	r3, [pc, #716]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800314e:	2b18      	cmp	r3, #24
 8003150:	f200 8155 	bhi.w	80033fe <HAL_RCC_GetSysClockFreq+0x2be>
 8003154:	a201      	add	r2, pc, #4	; (adr r2, 800315c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	080031c1 	.word	0x080031c1
 8003160:	080033ff 	.word	0x080033ff
 8003164:	080033ff 	.word	0x080033ff
 8003168:	080033ff 	.word	0x080033ff
 800316c:	080033ff 	.word	0x080033ff
 8003170:	080033ff 	.word	0x080033ff
 8003174:	080033ff 	.word	0x080033ff
 8003178:	080033ff 	.word	0x080033ff
 800317c:	080031e7 	.word	0x080031e7
 8003180:	080033ff 	.word	0x080033ff
 8003184:	080033ff 	.word	0x080033ff
 8003188:	080033ff 	.word	0x080033ff
 800318c:	080033ff 	.word	0x080033ff
 8003190:	080033ff 	.word	0x080033ff
 8003194:	080033ff 	.word	0x080033ff
 8003198:	080033ff 	.word	0x080033ff
 800319c:	080031ed 	.word	0x080031ed
 80031a0:	080033ff 	.word	0x080033ff
 80031a4:	080033ff 	.word	0x080033ff
 80031a8:	080033ff 	.word	0x080033ff
 80031ac:	080033ff 	.word	0x080033ff
 80031b0:	080033ff 	.word	0x080033ff
 80031b4:	080033ff 	.word	0x080033ff
 80031b8:	080033ff 	.word	0x080033ff
 80031bc:	080031f3 	.word	0x080031f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031c0:	4b94      	ldr	r3, [pc, #592]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031cc:	4b91      	ldr	r3, [pc, #580]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	08db      	lsrs	r3, r3, #3
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	4a90      	ldr	r2, [pc, #576]	; (8003418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80031de:	e111      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031e0:	4b8d      	ldr	r3, [pc, #564]	; (8003418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031e2:	61bb      	str	r3, [r7, #24]
    break;
 80031e4:	e10e      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031e6:	4b8d      	ldr	r3, [pc, #564]	; (800341c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031e8:	61bb      	str	r3, [r7, #24]
    break;
 80031ea:	e10b      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80031ec:	4b8c      	ldr	r3, [pc, #560]	; (8003420 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031ee:	61bb      	str	r3, [r7, #24]
    break;
 80031f0:	e108      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031f2:	4b88      	ldr	r3, [pc, #544]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031fc:	4b85      	ldr	r3, [pc, #532]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003206:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003208:	4b82      	ldr	r3, [pc, #520]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003212:	4b80      	ldr	r3, [pc, #512]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	08db      	lsrs	r3, r3, #3
 8003218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80e1 	beq.w	80033f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b02      	cmp	r3, #2
 800323a:	f000 8083 	beq.w	8003344 <HAL_RCC_GetSysClockFreq+0x204>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b02      	cmp	r3, #2
 8003242:	f200 80a1 	bhi.w	8003388 <HAL_RCC_GetSysClockFreq+0x248>
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x114>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d056      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003252:	e099      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003254:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02d      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003260:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	4a6b      	ldr	r2, [pc, #428]	; (8003418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800328a:	4b62      	ldr	r3, [pc, #392]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329a:	ed97 6a02 	vldr	s12, [r7, #8]
 800329e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80032ba:	e087      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003428 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ce:	4b51      	ldr	r3, [pc, #324]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032de:	ed97 6a02 	vldr	s12, [r7, #8]
 80032e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032fe:	e065      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800342c <HAL_RCC_GetSysClockFreq+0x2ec>
 800330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003312:	4b40      	ldr	r3, [pc, #256]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003322:	ed97 6a02 	vldr	s12, [r7, #8]
 8003326:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003342:	e043      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003430 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a02 	vldr	s12, [r7, #8]
 800336a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003386:	e021      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	eddf 6a26 	vldr	s13, [pc, #152]	; 800342c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	0a5b      	lsrs	r3, r3, #9
 80033d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d6:	3301      	adds	r3, #1
 80033d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	ee07 3a90 	vmov	s15, r3
 80033e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80033e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f0:	ee17 3a90 	vmov	r3, s15
 80033f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80033f6:	e005      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
    break;
 80033fc:	e002      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003400:	61bb      	str	r3, [r7, #24]
    break;
 8003402:	bf00      	nop
  }

  return sysclockfreq;
 8003404:	69bb      	ldr	r3, [r7, #24]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	58024400 	.word	0x58024400
 8003418:	03d09000 	.word	0x03d09000
 800341c:	003d0900 	.word	0x003d0900
 8003420:	007a1200 	.word	0x007a1200
 8003424:	46000000 	.word	0x46000000
 8003428:	4c742400 	.word	0x4c742400
 800342c:	4a742400 	.word	0x4a742400
 8003430:	4af42400 	.word	0x4af42400

08003434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800343a:	f7ff fe81 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 800343e:	4602      	mov	r2, r0
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_GetHCLKFreq+0x50>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	490f      	ldr	r1, [pc, #60]	; (8003488 <HAL_RCC_GetHCLKFreq+0x54>)
 800344c:	5ccb      	ldrb	r3, [r1, r3]
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_GetHCLKFreq+0x50>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	4a09      	ldr	r2, [pc, #36]	; (8003488 <HAL_RCC_GetHCLKFreq+0x54>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <HAL_RCC_GetHCLKFreq+0x58>)
 8003470:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003472:	4a07      	ldr	r2, [pc, #28]	; (8003490 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <HAL_RCC_GetHCLKFreq+0x58>)
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	58024400 	.word	0x58024400
 8003488:	080091c0 	.word	0x080091c0
 800348c:	24000004 	.word	0x24000004
 8003490:	24000000 	.word	0x24000000

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003498:	f7ff ffcc 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4904      	ldr	r1, [pc, #16]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	58024400 	.word	0x58024400
 80034bc:	080091c0 	.word	0x080091c0

080034c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034c4:	f7ff ffb6 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4904      	ldr	r1, [pc, #16]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034d6:	5ccb      	ldrb	r3, [r1, r3]
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	58024400 	.word	0x58024400
 80034e8:	080091c0 	.word	0x080091c0

080034ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034f8:	2300      	movs	r3, #0
 80034fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d03f      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800350c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003510:	d02a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003512:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003516:	d824      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800351c:	d018      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800351e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003522:	d81e      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352c:	d007      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800352e:	e018      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4ba3      	ldr	r3, [pc, #652]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4aa2      	ldr	r2, [pc, #648]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800353c:	e015      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2102      	movs	r1, #2
 8003544:	4618      	mov	r0, r3
 8003546:	f001 f9d5 	bl	80048f4 <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800354e:	e00c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3324      	adds	r3, #36	; 0x24
 8003554:	2102      	movs	r1, #2
 8003556:	4618      	mov	r0, r3
 8003558:	f001 fa7e 	bl	8004a58 <RCCEx_PLL3_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003560:	e003      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
      break;
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003570:	4b93      	ldr	r3, [pc, #588]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357c:	4990      	ldr	r1, [pc, #576]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	650b      	str	r3, [r1, #80]	; 0x50
 8003582:	e001      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d03d      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	2b04      	cmp	r3, #4
 800359a:	d826      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035b9 	.word	0x080035b9
 80035a8:	080035c7 	.word	0x080035c7
 80035ac:	080035d9 	.word	0x080035d9
 80035b0:	080035f1 	.word	0x080035f1
 80035b4:	080035f1 	.word	0x080035f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b8:	4b81      	ldr	r3, [pc, #516]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	4a80      	ldr	r2, [pc, #512]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035c4:	e015      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 f991 	bl	80048f4 <RCCEx_PLL2_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035d6:	e00c      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3324      	adds	r3, #36	; 0x24
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 fa3a 	bl	8004a58 <RCCEx_PLL3_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
      break;
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035f8:	4b71      	ldr	r3, [pc, #452]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fc:	f023 0207 	bic.w	r2, r3, #7
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	496e      	ldr	r1, [pc, #440]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	650b      	str	r3, [r1, #80]	; 0x50
 800360a:	e001      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003618:	2b00      	cmp	r3, #0
 800361a:	d042      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003624:	d02b      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362a:	d825      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800362c:	2bc0      	cmp	r3, #192	; 0xc0
 800362e:	d028      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003630:	2bc0      	cmp	r3, #192	; 0xc0
 8003632:	d821      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d016      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003638:	2b80      	cmp	r3, #128	; 0x80
 800363a:	d81d      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d007      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003644:	e018      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003646:	4b5e      	ldr	r3, [pc, #376]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	4a5d      	ldr	r2, [pc, #372]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800364c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003652:	e017      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f001 f94a 	bl	80048f4 <RCCEx_PLL2_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003664:	e00e      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3324      	adds	r3, #36	; 0x24
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f001 f9f3 	bl	8004a58 <RCCEx_PLL3_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003676:	e005      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	75fb      	strb	r3, [r7, #23]
      break;
 800367c:	e002      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800368a:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800368c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	494a      	ldr	r1, [pc, #296]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003698:	4313      	orrs	r3, r2
 800369a:	650b      	str	r3, [r1, #80]	; 0x50
 800369c:	e001      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369e:	7dfb      	ldrb	r3, [r7, #23]
 80036a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d049      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036b8:	d030      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80036ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036be:	d82a      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036c4:	d02c      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036ca:	d824      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d0:	d018      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d6:	d81e      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e0:	d007      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036e2:	e018      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	4a35      	ldr	r2, [pc, #212]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036f0:	e017      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f8fb 	bl	80048f4 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003702:	e00e      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3324      	adds	r3, #36	; 0x24
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f9a4 	bl	8004a58 <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003714:	e005      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
      break;
 800371a:	e002      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003736:	4922      	ldr	r1, [pc, #136]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	658b      	str	r3, [r1, #88]	; 0x58
 800373c:	e001      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04b      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003758:	d030      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800375a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800375e:	d82a      	bhi.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003760:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003764:	d02e      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003766:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800376a:	d824      	bhi.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800376c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003770:	d018      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003776:	d81e      	bhi.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800377c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003780:	d007      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003782:	e018      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800378a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003790:	e019      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f001 f8ab 	bl	80048f4 <RCCEx_PLL2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037a2:	e010      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3324      	adds	r3, #36	; 0x24
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 f954 	bl	8004a58 <RCCEx_PLL3_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037b4:	e007      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
      break;
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80037bc:	bf00      	nop
 80037be:	e002      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80037c0:	58024400 	.word	0x58024400
      break;
 80037c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037cc:	4b99      	ldr	r3, [pc, #612]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037da:	4996      	ldr	r1, [pc, #600]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	658b      	str	r3, [r1, #88]	; 0x58
 80037e0:	e001      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d032      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f6:	2b30      	cmp	r3, #48	; 0x30
 80037f8:	d01c      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80037fa:	2b30      	cmp	r3, #48	; 0x30
 80037fc:	d817      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d00c      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003802:	2b20      	cmp	r3, #32
 8003804:	d813      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800380a:	2b10      	cmp	r3, #16
 800380c:	d10f      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380e:	4b89      	ldr	r3, [pc, #548]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	4a88      	ldr	r2, [pc, #544]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003818:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800381a:	e00e      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	2102      	movs	r1, #2
 8003822:	4618      	mov	r0, r3
 8003824:	f001 f866 	bl	80048f4 <RCCEx_PLL2_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800382c:	e005      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
      break;
 8003832:	e002      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003840:	4b7c      	ldr	r3, [pc, #496]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384c:	4979      	ldr	r1, [pc, #484]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800384e:	4313      	orrs	r3, r2
 8003850:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003852:	e001      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d047      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800386c:	d030      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800386e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003872:	d82a      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003874:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003878:	d02c      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800387a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800387e:	d824      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003884:	d018      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388a:	d81e      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003894:	d007      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003896:	e018      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003898:	4b66      	ldr	r3, [pc, #408]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	4a65      	ldr	r2, [pc, #404]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800389e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038a4:	e017      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 f821 	bl	80048f4 <RCCEx_PLL2_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038b6:	e00e      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3324      	adds	r3, #36	; 0x24
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 f8ca 	bl	8004a58 <RCCEx_PLL3_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038c8:	e005      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
      break;
 80038ce:	e002      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038d0:	bf00      	nop
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038dc:	4b55      	ldr	r3, [pc, #340]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	4952      	ldr	r1, [pc, #328]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	650b      	str	r3, [r1, #80]	; 0x50
 80038ee:	e001      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d049      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003908:	d02e      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800390a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800390e:	d828      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003914:	d02a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003916:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800391a:	d822      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800391c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003920:	d026      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003922:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003926:	d81c      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800392c:	d010      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800392e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003932:	d816      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01d      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393c:	d111      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f000 ffd5 	bl	80048f4 <RCCEx_PLL2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800394e:	e012      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3324      	adds	r3, #36	; 0x24
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f001 f87e 	bl	8004a58 <RCCEx_PLL3_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003960:	e009      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
      break;
 8003966:	e006      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003968:	bf00      	nop
 800396a:	e004      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800396c:	bf00      	nop
 800396e:	e002      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003970:	bf00      	nop
 8003972:	e000      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003988:	492a      	ldr	r1, [pc, #168]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800398a:	4313      	orrs	r3, r2
 800398c:	650b      	str	r3, [r1, #80]	; 0x50
 800398e:	e001      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d04d      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039aa:	d02e      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80039ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b0:	d828      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d02a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039bc:	d822      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039c2:	d026      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80039c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039c8:	d81c      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ce:	d010      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80039d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d4:	d816      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01d      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80039da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039de:	d111      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 ff84 	bl	80048f4 <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039f0:	e012      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3324      	adds	r3, #36	; 0x24
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 f82d 	bl	8004a58 <RCCEx_PLL3_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a02:	e009      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
      break;
 8003a08:	e006      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e004      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e002      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a2c:	4901      	ldr	r1, [pc, #4]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	658b      	str	r3, [r1, #88]	; 0x58
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d02f      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a50:	d00e      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a56:	d814      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d015      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a60:	d10f      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a62:	4baf      	ldr	r3, [pc, #700]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	4aae      	ldr	r2, [pc, #696]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a6e:	e00c      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	2101      	movs	r1, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 ff3c 	bl	80048f4 <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a80:	e003      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
      break;
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a90:	4ba3      	ldr	r3, [pc, #652]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9c:	49a0      	ldr	r1, [pc, #640]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	650b      	str	r3, [r1, #80]	; 0x50
 8003aa2:	e001      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d032      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d81b      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003abc:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003afb 	.word	0x08003afb
 8003ac8:	08003ad5 	.word	0x08003ad5
 8003acc:	08003ae3 	.word	0x08003ae3
 8003ad0:	08003afb 	.word	0x08003afb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad4:	4b92      	ldr	r3, [pc, #584]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	4a91      	ldr	r2, [pc, #580]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ae0:	e00c      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 ff03 	bl	80048f4 <RCCEx_PLL2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003af2:	e003      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	75fb      	strb	r3, [r7, #23]
      break;
 8003af8:	e000      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b02:	4b87      	ldr	r3, [pc, #540]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	f023 0203 	bic.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	4984      	ldr	r1, [pc, #528]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b14:	e001      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8086 	beq.w	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b28:	4b7e      	ldr	r3, [pc, #504]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7d      	ldr	r2, [pc, #500]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b34:	f7fd fc6c 	bl	8001410 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b3a:	e009      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3c:	f7fd fc68 	bl	8001410 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d902      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	75fb      	strb	r3, [r7, #23]
        break;
 8003b4e:	e005      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b50:	4b74      	ldr	r3, [pc, #464]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ef      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d166      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b62:	4b6f      	ldr	r3, [pc, #444]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b6c:	4053      	eors	r3, r2
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d013      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b76:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b80:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a66      	ldr	r2, [pc, #408]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b8c:	4b64      	ldr	r3, [pc, #400]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4a63      	ldr	r2, [pc, #396]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b98:	4a61      	ldr	r2, [pc, #388]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba8:	d115      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fd fc31 	bl	8001410 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb0:	e00b      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fd fc2d 	bl	8001410 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d902      	bls.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	75fb      	strb	r3, [r7, #23]
            break;
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bca:	4b55      	ldr	r3, [pc, #340]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0ed      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d126      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003bec:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bfa:	0919      	lsrs	r1, r3, #4
 8003bfc:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003bfe:	400b      	ands	r3, r1
 8003c00:	4947      	ldr	r1, [pc, #284]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	610b      	str	r3, [r1, #16]
 8003c06:	e005      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003c08:	4b45      	ldr	r3, [pc, #276]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	4a44      	ldr	r2, [pc, #272]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c12:	6113      	str	r3, [r2, #16]
 8003c14:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c22:	493f      	ldr	r1, [pc, #252]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	670b      	str	r3, [r1, #112]	; 0x70
 8003c28:	e004      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	75bb      	strb	r3, [r7, #22]
 8003c2e:	e001      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8085 	beq.w	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c46:	2b28      	cmp	r3, #40	; 0x28
 8003c48:	d866      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c4a:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003d2d 	.word	0x08003d2d
 8003c54:	08003d19 	.word	0x08003d19
 8003c58:	08003d19 	.word	0x08003d19
 8003c5c:	08003d19 	.word	0x08003d19
 8003c60:	08003d19 	.word	0x08003d19
 8003c64:	08003d19 	.word	0x08003d19
 8003c68:	08003d19 	.word	0x08003d19
 8003c6c:	08003d19 	.word	0x08003d19
 8003c70:	08003cf5 	.word	0x08003cf5
 8003c74:	08003d19 	.word	0x08003d19
 8003c78:	08003d19 	.word	0x08003d19
 8003c7c:	08003d19 	.word	0x08003d19
 8003c80:	08003d19 	.word	0x08003d19
 8003c84:	08003d19 	.word	0x08003d19
 8003c88:	08003d19 	.word	0x08003d19
 8003c8c:	08003d19 	.word	0x08003d19
 8003c90:	08003d07 	.word	0x08003d07
 8003c94:	08003d19 	.word	0x08003d19
 8003c98:	08003d19 	.word	0x08003d19
 8003c9c:	08003d19 	.word	0x08003d19
 8003ca0:	08003d19 	.word	0x08003d19
 8003ca4:	08003d19 	.word	0x08003d19
 8003ca8:	08003d19 	.word	0x08003d19
 8003cac:	08003d19 	.word	0x08003d19
 8003cb0:	08003d2d 	.word	0x08003d2d
 8003cb4:	08003d19 	.word	0x08003d19
 8003cb8:	08003d19 	.word	0x08003d19
 8003cbc:	08003d19 	.word	0x08003d19
 8003cc0:	08003d19 	.word	0x08003d19
 8003cc4:	08003d19 	.word	0x08003d19
 8003cc8:	08003d19 	.word	0x08003d19
 8003ccc:	08003d19 	.word	0x08003d19
 8003cd0:	08003d2d 	.word	0x08003d2d
 8003cd4:	08003d19 	.word	0x08003d19
 8003cd8:	08003d19 	.word	0x08003d19
 8003cdc:	08003d19 	.word	0x08003d19
 8003ce0:	08003d19 	.word	0x08003d19
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d19 	.word	0x08003d19
 8003cec:	08003d19 	.word	0x08003d19
 8003cf0:	08003d2d 	.word	0x08003d2d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fdfa 	bl	80048f4 <RCCEx_PLL2_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d04:	e013      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3324      	adds	r3, #36	; 0x24
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fea3 	bl	8004a58 <RCCEx_PLL3_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d16:	e00a      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1c:	e007      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d1e:	bf00      	nop
 8003d20:	58024400 	.word	0x58024400
 8003d24:	58024800 	.word	0x58024800
 8003d28:	00ffffcf 	.word	0x00ffffcf
      break;
 8003d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d34:	4b96      	ldr	r3, [pc, #600]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d40:	4993      	ldr	r1, [pc, #588]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	654b      	str	r3, [r1, #84]	; 0x54
 8003d46:	e001      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d038      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d821      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d60:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003dab 	.word	0x08003dab
 8003d6c:	08003d81 	.word	0x08003d81
 8003d70:	08003d93 	.word	0x08003d93
 8003d74:	08003dab 	.word	0x08003dab
 8003d78:	08003dab 	.word	0x08003dab
 8003d7c:	08003dab 	.word	0x08003dab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	2101      	movs	r1, #1
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fdb4 	bl	80048f4 <RCCEx_PLL2_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d90:	e00c      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3324      	adds	r3, #36	; 0x24
 8003d96:	2101      	movs	r1, #1
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fe5d 	bl	8004a58 <RCCEx_PLL3_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003da2:	e003      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	75fb      	strb	r3, [r7, #23]
      break;
 8003da8:	e000      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003db2:	4b77      	ldr	r3, [pc, #476]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	f023 0207 	bic.w	r2, r3, #7
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbe:	4974      	ldr	r1, [pc, #464]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	654b      	str	r3, [r1, #84]	; 0x54
 8003dc4:	e001      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d03a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d821      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e2b 	.word	0x08003e2b
 8003dec:	08003e01 	.word	0x08003e01
 8003df0:	08003e13 	.word	0x08003e13
 8003df4:	08003e2b 	.word	0x08003e2b
 8003df8:	08003e2b 	.word	0x08003e2b
 8003dfc:	08003e2b 	.word	0x08003e2b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fd74 	bl	80048f4 <RCCEx_PLL2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e10:	e00c      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3324      	adds	r3, #36	; 0x24
 8003e16:	2101      	movs	r1, #1
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fe1d 	bl	8004a58 <RCCEx_PLL3_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e22:	e003      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
      break;
 8003e28:	e000      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e32:	4b57      	ldr	r3, [pc, #348]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	f023 0207 	bic.w	r2, r3, #7
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	4953      	ldr	r1, [pc, #332]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	658b      	str	r3, [r1, #88]	; 0x58
 8003e46:	e001      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d04b      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e62:	d02e      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e68:	d828      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6e:	d02a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e74:	d822      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e7a:	d026      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e80:	d81c      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e86:	d010      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8c:	d816      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01d      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e96:	d111      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fd28 	bl	80048f4 <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ea8:	e012      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3324      	adds	r3, #36	; 0x24
 8003eae:	2102      	movs	r1, #2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fdd1 	bl	8004a58 <RCCEx_PLL3_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003eba:	e009      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec0:	e006      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e004      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e002      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ed6:	4b2e      	ldr	r3, [pc, #184]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee4:	492a      	ldr	r1, [pc, #168]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	654b      	str	r3, [r1, #84]	; 0x54
 8003eea:	e001      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
 8003eee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d04d      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f06:	d02e      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003f08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f0c:	d828      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	d02a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f18:	d822      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f1e:	d026      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003f20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f24:	d81c      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2a:	d010      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f30:	d816      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01d      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3a:	d111      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fcd6 	bl	80048f4 <RCCEx_PLL2_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f4c:	e012      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3324      	adds	r3, #36	; 0x24
 8003f52:	2102      	movs	r1, #2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fd7f 	bl	8004a58 <RCCEx_PLL3_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f5e:	e009      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	75fb      	strb	r3, [r7, #23]
      break;
 8003f64:	e006      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f66:	bf00      	nop
 8003f68:	e004      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e002      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f88:	4901      	ldr	r1, [pc, #4]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f8e:	e003      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003f90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d04b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003faa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fae:	d02e      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003fb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fb4:	d828      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fba:	d02a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc0:	d822      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fc6:	d026      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003fc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fcc:	d81c      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd8:	d816      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01d      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d111      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fc82 	bl	80048f4 <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ff4:	e012      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3324      	adds	r3, #36	; 0x24
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fd2b 	bl	8004a58 <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004006:	e009      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	75fb      	strb	r3, [r7, #23]
      break;
 800400c:	e006      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800400e:	bf00      	nop
 8004010:	e004      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004012:	bf00      	nop
 8004014:	e002      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800401a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004022:	4b9d      	ldr	r3, [pc, #628]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004030:	4999      	ldr	r1, [pc, #612]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004032:	4313      	orrs	r3, r2
 8004034:	658b      	str	r3, [r1, #88]	; 0x58
 8004036:	e001      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d10a      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3324      	adds	r3, #36	; 0x24
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fcfc 	bl	8004a58 <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800406a:	4b8b      	ldr	r3, [pc, #556]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004078:	4987      	ldr	r1, [pc, #540]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800407a:	4313      	orrs	r3, r2
 800407c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004094:	d10a      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3324      	adds	r3, #36	; 0x24
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fcdb 	bl	8004a58 <RCCEx_PLL3_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ac:	4b7a      	ldr	r3, [pc, #488]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ba:	4977      	ldr	r1, [pc, #476]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d034      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040d6:	d01d      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80040d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040dc:	d817      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d009      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80040e8:	e011      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fbff 	bl	80048f4 <RCCEx_PLL2_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040fa:	e00c      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3324      	adds	r3, #36	; 0x24
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fca8 	bl	8004a58 <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800410c:	e003      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	75fb      	strb	r3, [r7, #23]
      break;
 8004112:	e000      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800411c:	4b5e      	ldr	r3, [pc, #376]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800412a:	495b      	ldr	r1, [pc, #364]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800412c:	4313      	orrs	r3, r2
 800412e:	658b      	str	r3, [r1, #88]	; 0x58
 8004130:	e001      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d033      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004148:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800414c:	d01c      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800414e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004152:	d816      	bhi.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004158:	d003      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800415a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800415e:	d007      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004160:	e00f      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004162:	4b4d      	ldr	r3, [pc, #308]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	4a4c      	ldr	r2, [pc, #304]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800416e:	e00c      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3324      	adds	r3, #36	; 0x24
 8004174:	2101      	movs	r1, #1
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fc6e 	bl	8004a58 <RCCEx_PLL3_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004180:	e003      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
      break;
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800418a:	7dfb      	ldrb	r3, [r7, #23]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004190:	4b41      	ldr	r3, [pc, #260]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419e:	493e      	ldr	r1, [pc, #248]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	654b      	str	r3, [r1, #84]	; 0x54
 80041a4:	e001      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d029      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80041be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c2:	d007      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80041c4:	e00f      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c6:	4b34      	ldr	r3, [pc, #208]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	4a33      	ldr	r2, [pc, #204]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041d2:	e00b      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	2102      	movs	r1, #2
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fb8a 	bl	80048f4 <RCCEx_PLL2_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
      break;
 80041ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041f2:	4b29      	ldr	r3, [pc, #164]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	4926      	ldr	r1, [pc, #152]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004200:	4313      	orrs	r3, r2
 8004202:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004204:	e001      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3324      	adds	r3, #36	; 0x24
 800421a:	2102      	movs	r1, #2
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fc1b 	bl	8004a58 <RCCEx_PLL3_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d033      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800423c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004240:	d017      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004246:	d811      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424c:	d013      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800424e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004252:	d80b      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d010      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425c:	d106      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800426a:	e007      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
      break;
 8004270:	e004      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800427a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428e:	4902      	ldr	r1, [pc, #8]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004290:	4313      	orrs	r3, r2
 8004292:	654b      	str	r3, [r1, #84]	; 0x54
 8004294:	e004      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004296:	bf00      	nop
 8004298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042ac:	4b31      	ldr	r3, [pc, #196]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	492e      	ldr	r1, [pc, #184]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042ca:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042d8:	4926      	ldr	r1, [pc, #152]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ea:	4b22      	ldr	r3, [pc, #136]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f6:	491f      	ldr	r1, [pc, #124]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004308:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	4a19      	ldr	r2, [pc, #100]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800430e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004312:	6113      	str	r3, [r2, #16]
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800431e:	4915      	ldr	r1, [pc, #84]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004320:	4313      	orrs	r3, r2
 8004322:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	da08      	bge.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800432e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004330:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004338:	490e      	ldr	r1, [pc, #56]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800433a:	4313      	orrs	r3, r2
 800433c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	4906      	ldr	r1, [pc, #24]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800435a:	4313      	orrs	r3, r2
 800435c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800435e:	7dbb      	ldrb	r3, [r7, #22]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	58024400 	.word	0x58024400

08004378 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800437c:	f7ff f85a 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4904      	ldr	r1, [pc, #16]	; (80043a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	58024400 	.word	0x58024400
 80043a0:	080091c0 	.word	0x080091c0

080043a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b089      	sub	sp, #36	; 0x24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043ac:	4ba1      	ldr	r3, [pc, #644]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80043b6:	4b9f      	ldr	r3, [pc, #636]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	0b1b      	lsrs	r3, r3, #12
 80043bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043c2:	4b9c      	ldr	r3, [pc, #624]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80043ce:	4b99      	ldr	r3, [pc, #612]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	08db      	lsrs	r3, r3, #3
 80043d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8111 	beq.w	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	f000 8083 	beq.w	8004500 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	f200 80a1 	bhi.w	8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d056      	beq.n	80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800440e:	e099      	b.n	8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004410:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02d      	beq.n	8004478 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800441c:	4b85      	ldr	r3, [pc, #532]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	08db      	lsrs	r3, r3, #3
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	4a84      	ldr	r2, [pc, #528]	; (8004638 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
 800442c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	ee07 3a90 	vmov	s15, r3
 8004434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004446:	4b7b      	ldr	r3, [pc, #492]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004456:	ed97 6a03 	vldr	s12, [r7, #12]
 800445a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800463c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800445e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004476:	e087      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004482:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004640 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448a:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449a:	ed97 6a03 	vldr	s12, [r7, #12]
 800449e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800463c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044ba:	e065      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ce:	4b59      	ldr	r3, [pc, #356]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044de:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800463c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044fe:	e043      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800450e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004512:	4b48      	ldr	r3, [pc, #288]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004522:	ed97 6a03 	vldr	s12, [r7, #12]
 8004526:	eddf 5a45 	vldr	s11, [pc, #276]	; 800463c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800452a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004542:	e021      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004556:	4b37      	ldr	r3, [pc, #220]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004566:	ed97 6a03 	vldr	s12, [r7, #12]
 800456a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800463c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800456e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004586:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004588:	4b2a      	ldr	r3, [pc, #168]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	0a5b      	lsrs	r3, r3, #9
 800458e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800459e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ae:	ee17 2a90 	vmov	r2, s15
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80045b6:	4b1f      	ldr	r3, [pc, #124]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c0:	ee07 3a90 	vmov	s15, r3
 80045c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045dc:	ee17 2a90 	vmov	r2, s15
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045e4:	4b13      	ldr	r3, [pc, #76]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	0e1b      	lsrs	r3, r3, #24
 80045ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800460a:	ee17 2a90 	vmov	r2, s15
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004612:	e008      	b.n	8004626 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	609a      	str	r2, [r3, #8]
}
 8004626:	bf00      	nop
 8004628:	3724      	adds	r7, #36	; 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	58024400 	.word	0x58024400
 8004638:	03d09000 	.word	0x03d09000
 800463c:	46000000 	.word	0x46000000
 8004640:	4c742400 	.word	0x4c742400
 8004644:	4a742400 	.word	0x4a742400
 8004648:	4af42400 	.word	0x4af42400

0800464c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	; 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004654:	4ba1      	ldr	r3, [pc, #644]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800465e:	4b9f      	ldr	r3, [pc, #636]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	0d1b      	lsrs	r3, r3, #20
 8004664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004668:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800466a:	4b9c      	ldr	r3, [pc, #624]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004676:	4b99      	ldr	r3, [pc, #612]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	08db      	lsrs	r3, r3, #3
 800467c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8111 	beq.w	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b02      	cmp	r3, #2
 800469e:	f000 8083 	beq.w	80047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	f200 80a1 	bhi.w	80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d056      	beq.n	8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80046b6:	e099      	b.n	80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046b8:	4b88      	ldr	r3, [pc, #544]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02d      	beq.n	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046c4:	4b85      	ldr	r3, [pc, #532]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	4a84      	ldr	r2, [pc, #528]	; (80048e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
 80046d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ee:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004702:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800471e:	e087      	b.n	8004830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800472e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004732:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004742:	ed97 6a03 	vldr	s12, [r7, #12]
 8004746:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800474a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004762:	e065      	b.n	8004830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004776:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004786:	ed97 6a03 	vldr	s12, [r7, #12]
 800478a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800478e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047a6:	e043      	b.n	8004830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80047b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ba:	4b48      	ldr	r3, [pc, #288]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ea:	e021      	b.n	8004830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004812:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800482e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004830:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	0a5b      	lsrs	r3, r3, #9
 8004836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800484a:	edd7 6a07 	vldr	s13, [r7, #28]
 800484e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004856:	ee17 2a90 	vmov	r2, s15
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800485e:	4b1f      	ldr	r3, [pc, #124]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004878:	edd7 6a07 	vldr	s13, [r7, #28]
 800487c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004884:	ee17 2a90 	vmov	r2, s15
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800488c:	4b13      	ldr	r3, [pc, #76]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b2:	ee17 2a90 	vmov	r2, s15
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048ba:	e008      	b.n	80048ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	609a      	str	r2, [r3, #8]
}
 80048ce:	bf00      	nop
 80048d0:	3724      	adds	r7, #36	; 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	58024400 	.word	0x58024400
 80048e0:	03d09000 	.word	0x03d09000
 80048e4:	46000000 	.word	0x46000000
 80048e8:	4c742400 	.word	0x4c742400
 80048ec:	4a742400 	.word	0x4a742400
 80048f0:	4af42400 	.word	0x4af42400

080048f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004902:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b03      	cmp	r3, #3
 800490c:	d101      	bne.n	8004912 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e099      	b.n	8004a46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004912:	4b4f      	ldr	r3, [pc, #316]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a4e      	ldr	r2, [pc, #312]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004918:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800491c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491e:	f7fc fd77 	bl	8001410 <HAL_GetTick>
 8004922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004924:	e008      	b.n	8004938 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004926:	f7fc fd73 	bl	8001410 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e086      	b.n	8004a46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004938:	4b45      	ldr	r3, [pc, #276]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f0      	bne.n	8004926 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004944:	4b42      	ldr	r3, [pc, #264]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	031b      	lsls	r3, r3, #12
 8004952:	493f      	ldr	r1, [pc, #252]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004954:	4313      	orrs	r3, r2
 8004956:	628b      	str	r3, [r1, #40]	; 0x28
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	3b01      	subs	r3, #1
 800495e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	3b01      	subs	r3, #1
 8004968:	025b      	lsls	r3, r3, #9
 800496a:	b29b      	uxth	r3, r3
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	3b01      	subs	r3, #1
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	3b01      	subs	r3, #1
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004988:	4931      	ldr	r1, [pc, #196]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 800498a:	4313      	orrs	r3, r2
 800498c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800498e:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	492d      	ldr	r1, [pc, #180]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 800499c:	4313      	orrs	r3, r2
 800499e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80049a0:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	f023 0220 	bic.w	r2, r3, #32
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	4928      	ldr	r1, [pc, #160]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049b2:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	4a26      	ldr	r2, [pc, #152]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049b8:	f023 0310 	bic.w	r3, r3, #16
 80049bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <RCCEx_PLL2_Config+0x160>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	69d2      	ldr	r2, [r2, #28]
 80049ca:	00d2      	lsls	r2, r2, #3
 80049cc:	4920      	ldr	r1, [pc, #128]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049d2:	4b1f      	ldr	r3, [pc, #124]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	f043 0310 	orr.w	r3, r3, #16
 80049dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049e4:	4b1a      	ldr	r3, [pc, #104]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049f0:	e00f      	b.n	8004a12 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d106      	bne.n	8004a06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a04:	e005      	b.n	8004a12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004a0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a0e      	ldr	r2, [pc, #56]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004a18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1e:	f7fc fcf7 	bl	8001410 <HAL_GetTick>
 8004a22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a24:	e008      	b.n	8004a38 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a26:	f7fc fcf3 	bl	8001410 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e006      	b.n	8004a46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	58024400 	.word	0x58024400
 8004a54:	ffff0007 	.word	0xffff0007

08004a58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a66:	4b53      	ldr	r3, [pc, #332]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d101      	bne.n	8004a76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e099      	b.n	8004baa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a76:	4b4f      	ldr	r3, [pc, #316]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a4e      	ldr	r2, [pc, #312]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a82:	f7fc fcc5 	bl	8001410 <HAL_GetTick>
 8004a86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a88:	e008      	b.n	8004a9c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a8a:	f7fc fcc1 	bl	8001410 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e086      	b.n	8004baa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a9c:	4b45      	ldr	r3, [pc, #276]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004aa8:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	051b      	lsls	r3, r3, #20
 8004ab6:	493f      	ldr	r1, [pc, #252]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	628b      	str	r3, [r1, #40]	; 0x28
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	025b      	lsls	r3, r3, #9
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004aec:	4931      	ldr	r1, [pc, #196]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004af2:	4b30      	ldr	r3, [pc, #192]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	492d      	ldr	r1, [pc, #180]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	4928      	ldr	r1, [pc, #160]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b16:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <RCCEx_PLL3_Config+0x160>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	69d2      	ldr	r2, [r2, #28]
 8004b2e:	00d2      	lsls	r2, r2, #3
 8004b30:	4920      	ldr	r1, [pc, #128]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b36:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b54:	e00f      	b.n	8004b76 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d106      	bne.n	8004b6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b5c:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b68:	e005      	b.n	8004b76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b82:	f7fc fc45 	bl	8001410 <HAL_GetTick>
 8004b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b88:	e008      	b.n	8004b9c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b8a:	f7fc fc41 	bl	8001410 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e006      	b.n	8004baa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
 8004bb8:	ffff0007 	.word	0xffff0007

08004bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e042      	b.n	8004c54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d106      	bne.n	8004be6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fc f90d 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2224      	movs	r2, #36	; 0x24
 8004bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f996 	bl	8004f30 <UART_SetConfig>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e022      	b.n	8004c54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fef2 	bl	8005a00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 ff79 	bl	8005b44 <UART_CheckIdleState>
 8004c52:	4603      	mov	r3, r0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	f040 8083 	bne.w	8004d7e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_UART_Transmit+0x28>
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e07b      	b.n	8004d80 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_UART_Transmit+0x3a>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e074      	b.n	8004d80 <HAL_UART_Transmit+0x124>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2221      	movs	r2, #33	; 0x21
 8004caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cae:	f7fc fbaf 	bl	8001410 <HAL_GetTick>
 8004cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	88fa      	ldrh	r2, [r7, #6]
 8004cb8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ccc:	d108      	bne.n	8004ce0 <HAL_UART_Transmit+0x84>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	e003      	b.n	8004ce8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004cf0:	e02c      	b.n	8004d4c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 ff6c 	bl	8005bda <UART_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e039      	b.n	8004d80 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	3302      	adds	r3, #2
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	e007      	b.n	8004d3a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	3301      	adds	r3, #1
 8004d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1cc      	bne.n	8004cf2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2140      	movs	r1, #64	; 0x40
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 ff39 	bl	8005bda <UART_WaitOnFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e006      	b.n	8004d80 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	f040 80c0 	bne.w	8004f24 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_UART_Receive+0x28>
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0b8      	b.n	8004f26 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_UART_Receive+0x3a>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e0b1      	b.n	8004f26 <HAL_UART_Receive+0x19e>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2222      	movs	r2, #34	; 0x22
 8004dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004de0:	f7fc fb16 	bl	8001410 <HAL_GetTick>
 8004de4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	88fa      	ldrh	r2, [r7, #6]
 8004dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	88fa      	ldrh	r2, [r7, #6]
 8004df2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d10e      	bne.n	8004e1e <HAL_UART_Receive+0x96>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <HAL_UART_Receive+0x8c>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e12:	e02d      	b.n	8004e70 <HAL_UART_Receive+0xe8>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	22ff      	movs	r2, #255	; 0xff
 8004e18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e1c:	e028      	b.n	8004e70 <HAL_UART_Receive+0xe8>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10d      	bne.n	8004e42 <HAL_UART_Receive+0xba>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d104      	bne.n	8004e38 <HAL_UART_Receive+0xb0>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	22ff      	movs	r2, #255	; 0xff
 8004e32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e36:	e01b      	b.n	8004e70 <HAL_UART_Receive+0xe8>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	227f      	movs	r2, #127	; 0x7f
 8004e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e40:	e016      	b.n	8004e70 <HAL_UART_Receive+0xe8>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e4a:	d10d      	bne.n	8004e68 <HAL_UART_Receive+0xe0>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d104      	bne.n	8004e5e <HAL_UART_Receive+0xd6>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	227f      	movs	r2, #127	; 0x7f
 8004e58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e5c:	e008      	b.n	8004e70 <HAL_UART_Receive+0xe8>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	223f      	movs	r2, #63	; 0x3f
 8004e62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e66:	e003      	b.n	8004e70 <HAL_UART_Receive+0xe8>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e76:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e80:	d108      	bne.n	8004e94 <HAL_UART_Receive+0x10c>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e003      	b.n	8004e9c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004ea4:	e032      	b.n	8004f0c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2120      	movs	r1, #32
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fe92 	bl	8005bda <UART_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e032      	b.n	8004f26 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	8a7b      	ldrh	r3, [r7, #18]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	3302      	adds	r3, #2
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e00c      	b.n	8004efa <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	8a7b      	ldrh	r3, [r7, #18]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	4013      	ands	r3, r2
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1c6      	bne.n	8004ea6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e000      	b.n	8004f26 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
  }
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3720      	adds	r7, #32
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f34:	b092      	sub	sp, #72	; 0x48
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	4bbe      	ldr	r3, [pc, #760]	; (8005258 <UART_SetConfig+0x328>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4ab3      	ldr	r2, [pc, #716]	; (800525c <UART_SetConfig+0x32c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	4baf      	ldr	r3, [pc, #700]	; (8005260 <UART_SetConfig+0x330>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	f023 010f 	bic.w	r1, r3, #15
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4aa6      	ldr	r2, [pc, #664]	; (8005264 <UART_SetConfig+0x334>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d177      	bne.n	80050c0 <UART_SetConfig+0x190>
 8004fd0:	4ba5      	ldr	r3, [pc, #660]	; (8005268 <UART_SetConfig+0x338>)
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fd8:	2b28      	cmp	r3, #40	; 0x28
 8004fda:	d86d      	bhi.n	80050b8 <UART_SetConfig+0x188>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <UART_SetConfig+0xb4>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08005089 	.word	0x08005089
 8004fe8:	080050b9 	.word	0x080050b9
 8004fec:	080050b9 	.word	0x080050b9
 8004ff0:	080050b9 	.word	0x080050b9
 8004ff4:	080050b9 	.word	0x080050b9
 8004ff8:	080050b9 	.word	0x080050b9
 8004ffc:	080050b9 	.word	0x080050b9
 8005000:	080050b9 	.word	0x080050b9
 8005004:	08005091 	.word	0x08005091
 8005008:	080050b9 	.word	0x080050b9
 800500c:	080050b9 	.word	0x080050b9
 8005010:	080050b9 	.word	0x080050b9
 8005014:	080050b9 	.word	0x080050b9
 8005018:	080050b9 	.word	0x080050b9
 800501c:	080050b9 	.word	0x080050b9
 8005020:	080050b9 	.word	0x080050b9
 8005024:	08005099 	.word	0x08005099
 8005028:	080050b9 	.word	0x080050b9
 800502c:	080050b9 	.word	0x080050b9
 8005030:	080050b9 	.word	0x080050b9
 8005034:	080050b9 	.word	0x080050b9
 8005038:	080050b9 	.word	0x080050b9
 800503c:	080050b9 	.word	0x080050b9
 8005040:	080050b9 	.word	0x080050b9
 8005044:	080050a1 	.word	0x080050a1
 8005048:	080050b9 	.word	0x080050b9
 800504c:	080050b9 	.word	0x080050b9
 8005050:	080050b9 	.word	0x080050b9
 8005054:	080050b9 	.word	0x080050b9
 8005058:	080050b9 	.word	0x080050b9
 800505c:	080050b9 	.word	0x080050b9
 8005060:	080050b9 	.word	0x080050b9
 8005064:	080050a9 	.word	0x080050a9
 8005068:	080050b9 	.word	0x080050b9
 800506c:	080050b9 	.word	0x080050b9
 8005070:	080050b9 	.word	0x080050b9
 8005074:	080050b9 	.word	0x080050b9
 8005078:	080050b9 	.word	0x080050b9
 800507c:	080050b9 	.word	0x080050b9
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050b1 	.word	0x080050b1
 8005088:	2301      	movs	r3, #1
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508e:	e222      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005090:	2304      	movs	r3, #4
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005096:	e21e      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e21a      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80050a0:	2310      	movs	r3, #16
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a6:	e216      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80050a8:	2320      	movs	r3, #32
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e212      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e20e      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e20a      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a69      	ldr	r2, [pc, #420]	; (800526c <UART_SetConfig+0x33c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d130      	bne.n	800512c <UART_SetConfig+0x1fc>
 80050ca:	4b67      	ldr	r3, [pc, #412]	; (8005268 <UART_SetConfig+0x338>)
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	2b05      	cmp	r3, #5
 80050d4:	d826      	bhi.n	8005124 <UART_SetConfig+0x1f4>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0x1ac>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	080050f5 	.word	0x080050f5
 80050e0:	080050fd 	.word	0x080050fd
 80050e4:	08005105 	.word	0x08005105
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	08005115 	.word	0x08005115
 80050f0:	0800511d 	.word	0x0800511d
 80050f4:	2300      	movs	r3, #0
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fa:	e1ec      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80050fc:	2304      	movs	r3, #4
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005102:	e1e8      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005104:	2308      	movs	r3, #8
 8005106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510a:	e1e4      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800510c:	2310      	movs	r3, #16
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005112:	e1e0      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005114:	2320      	movs	r3, #32
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511a:	e1dc      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800511c:	2340      	movs	r3, #64	; 0x40
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005122:	e1d8      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512a:	e1d4      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a4f      	ldr	r2, [pc, #316]	; (8005270 <UART_SetConfig+0x340>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d130      	bne.n	8005198 <UART_SetConfig+0x268>
 8005136:	4b4c      	ldr	r3, [pc, #304]	; (8005268 <UART_SetConfig+0x338>)
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	2b05      	cmp	r3, #5
 8005140:	d826      	bhi.n	8005190 <UART_SetConfig+0x260>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0x218>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	08005161 	.word	0x08005161
 800514c:	08005169 	.word	0x08005169
 8005150:	08005171 	.word	0x08005171
 8005154:	08005179 	.word	0x08005179
 8005158:	08005181 	.word	0x08005181
 800515c:	08005189 	.word	0x08005189
 8005160:	2300      	movs	r3, #0
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005166:	e1b6      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005168:	2304      	movs	r3, #4
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516e:	e1b2      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005170:	2308      	movs	r3, #8
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005176:	e1ae      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005178:	2310      	movs	r3, #16
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517e:	e1aa      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005180:	2320      	movs	r3, #32
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e1a6      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005188:	2340      	movs	r3, #64	; 0x40
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e1a2      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e19e      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a35      	ldr	r2, [pc, #212]	; (8005274 <UART_SetConfig+0x344>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d130      	bne.n	8005204 <UART_SetConfig+0x2d4>
 80051a2:	4b31      	ldr	r3, [pc, #196]	; (8005268 <UART_SetConfig+0x338>)
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d826      	bhi.n	80051fc <UART_SetConfig+0x2cc>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x284>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051cd 	.word	0x080051cd
 80051b8:	080051d5 	.word	0x080051d5
 80051bc:	080051dd 	.word	0x080051dd
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e180      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e17c      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80051dc:	2308      	movs	r3, #8
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e2:	e178      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80051e4:	2310      	movs	r3, #16
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ea:	e174      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80051ec:	2320      	movs	r3, #32
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e170      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80051f4:	2340      	movs	r3, #64	; 0x40
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e16c      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e168      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1b      	ldr	r2, [pc, #108]	; (8005278 <UART_SetConfig+0x348>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d142      	bne.n	8005294 <UART_SetConfig+0x364>
 800520e:	4b16      	ldr	r3, [pc, #88]	; (8005268 <UART_SetConfig+0x338>)
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b05      	cmp	r3, #5
 8005218:	d838      	bhi.n	800528c <UART_SetConfig+0x35c>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <UART_SetConfig+0x2f0>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005239 	.word	0x08005239
 8005224:	08005241 	.word	0x08005241
 8005228:	08005249 	.word	0x08005249
 800522c:	08005251 	.word	0x08005251
 8005230:	0800527d 	.word	0x0800527d
 8005234:	08005285 	.word	0x08005285
 8005238:	2300      	movs	r3, #0
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e14a      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005240:	2304      	movs	r3, #4
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e146      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005248:	2308      	movs	r3, #8
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e142      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005250:	2310      	movs	r3, #16
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e13e      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005258:	cfff69f3 	.word	0xcfff69f3
 800525c:	58000c00 	.word	0x58000c00
 8005260:	11fff4ff 	.word	0x11fff4ff
 8005264:	40011000 	.word	0x40011000
 8005268:	58024400 	.word	0x58024400
 800526c:	40004400 	.word	0x40004400
 8005270:	40004800 	.word	0x40004800
 8005274:	40004c00 	.word	0x40004c00
 8005278:	40005000 	.word	0x40005000
 800527c:	2320      	movs	r3, #32
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005282:	e128      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005284:	2340      	movs	r3, #64	; 0x40
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528a:	e124      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e120      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4acb      	ldr	r2, [pc, #812]	; (80055c8 <UART_SetConfig+0x698>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d176      	bne.n	800538c <UART_SetConfig+0x45c>
 800529e:	4bcb      	ldr	r3, [pc, #812]	; (80055cc <UART_SetConfig+0x69c>)
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a6:	2b28      	cmp	r3, #40	; 0x28
 80052a8:	d86c      	bhi.n	8005384 <UART_SetConfig+0x454>
 80052aa:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <UART_SetConfig+0x380>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	08005355 	.word	0x08005355
 80052b4:	08005385 	.word	0x08005385
 80052b8:	08005385 	.word	0x08005385
 80052bc:	08005385 	.word	0x08005385
 80052c0:	08005385 	.word	0x08005385
 80052c4:	08005385 	.word	0x08005385
 80052c8:	08005385 	.word	0x08005385
 80052cc:	08005385 	.word	0x08005385
 80052d0:	0800535d 	.word	0x0800535d
 80052d4:	08005385 	.word	0x08005385
 80052d8:	08005385 	.word	0x08005385
 80052dc:	08005385 	.word	0x08005385
 80052e0:	08005385 	.word	0x08005385
 80052e4:	08005385 	.word	0x08005385
 80052e8:	08005385 	.word	0x08005385
 80052ec:	08005385 	.word	0x08005385
 80052f0:	08005365 	.word	0x08005365
 80052f4:	08005385 	.word	0x08005385
 80052f8:	08005385 	.word	0x08005385
 80052fc:	08005385 	.word	0x08005385
 8005300:	08005385 	.word	0x08005385
 8005304:	08005385 	.word	0x08005385
 8005308:	08005385 	.word	0x08005385
 800530c:	08005385 	.word	0x08005385
 8005310:	0800536d 	.word	0x0800536d
 8005314:	08005385 	.word	0x08005385
 8005318:	08005385 	.word	0x08005385
 800531c:	08005385 	.word	0x08005385
 8005320:	08005385 	.word	0x08005385
 8005324:	08005385 	.word	0x08005385
 8005328:	08005385 	.word	0x08005385
 800532c:	08005385 	.word	0x08005385
 8005330:	08005375 	.word	0x08005375
 8005334:	08005385 	.word	0x08005385
 8005338:	08005385 	.word	0x08005385
 800533c:	08005385 	.word	0x08005385
 8005340:	08005385 	.word	0x08005385
 8005344:	08005385 	.word	0x08005385
 8005348:	08005385 	.word	0x08005385
 800534c:	08005385 	.word	0x08005385
 8005350:	0800537d 	.word	0x0800537d
 8005354:	2301      	movs	r3, #1
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535a:	e0bc      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800535c:	2304      	movs	r3, #4
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005362:	e0b8      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005364:	2308      	movs	r3, #8
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536a:	e0b4      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800536c:	2310      	movs	r3, #16
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e0b0      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005374:	2320      	movs	r3, #32
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e0ac      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800537c:	2340      	movs	r3, #64	; 0x40
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e0a8      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005384:	2380      	movs	r3, #128	; 0x80
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e0a4      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a8f      	ldr	r2, [pc, #572]	; (80055d0 <UART_SetConfig+0x6a0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d130      	bne.n	80053f8 <UART_SetConfig+0x4c8>
 8005396:	4b8d      	ldr	r3, [pc, #564]	; (80055cc <UART_SetConfig+0x69c>)
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	2b05      	cmp	r3, #5
 80053a0:	d826      	bhi.n	80053f0 <UART_SetConfig+0x4c0>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <UART_SetConfig+0x478>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053c1 	.word	0x080053c1
 80053ac:	080053c9 	.word	0x080053c9
 80053b0:	080053d1 	.word	0x080053d1
 80053b4:	080053d9 	.word	0x080053d9
 80053b8:	080053e1 	.word	0x080053e1
 80053bc:	080053e9 	.word	0x080053e9
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c6:	e086      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80053c8:	2304      	movs	r3, #4
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ce:	e082      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80053d0:	2308      	movs	r3, #8
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d6:	e07e      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80053d8:	2310      	movs	r3, #16
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053de:	e07a      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80053e0:	2320      	movs	r3, #32
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e6:	e076      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80053e8:	2340      	movs	r3, #64	; 0x40
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ee:	e072      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80053f0:	2380      	movs	r3, #128	; 0x80
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f6:	e06e      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a75      	ldr	r2, [pc, #468]	; (80055d4 <UART_SetConfig+0x6a4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d130      	bne.n	8005464 <UART_SetConfig+0x534>
 8005402:	4b72      	ldr	r3, [pc, #456]	; (80055cc <UART_SetConfig+0x69c>)
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b05      	cmp	r3, #5
 800540c:	d826      	bhi.n	800545c <UART_SetConfig+0x52c>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <UART_SetConfig+0x4e4>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	0800542d 	.word	0x0800542d
 8005418:	08005435 	.word	0x08005435
 800541c:	0800543d 	.word	0x0800543d
 8005420:	08005445 	.word	0x08005445
 8005424:	0800544d 	.word	0x0800544d
 8005428:	08005455 	.word	0x08005455
 800542c:	2300      	movs	r3, #0
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005432:	e050      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005434:	2304      	movs	r3, #4
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543a:	e04c      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800543c:	2308      	movs	r3, #8
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e048      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005444:	2310      	movs	r3, #16
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e044      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800544c:	2320      	movs	r3, #32
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005452:	e040      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005454:	2340      	movs	r3, #64	; 0x40
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545a:	e03c      	b.n	80054d6 <UART_SetConfig+0x5a6>
 800545c:	2380      	movs	r3, #128	; 0x80
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e038      	b.n	80054d6 <UART_SetConfig+0x5a6>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5b      	ldr	r2, [pc, #364]	; (80055d8 <UART_SetConfig+0x6a8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d130      	bne.n	80054d0 <UART_SetConfig+0x5a0>
 800546e:	4b57      	ldr	r3, [pc, #348]	; (80055cc <UART_SetConfig+0x69c>)
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	2b05      	cmp	r3, #5
 8005478:	d826      	bhi.n	80054c8 <UART_SetConfig+0x598>
 800547a:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0x550>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	08005499 	.word	0x08005499
 8005484:	080054a1 	.word	0x080054a1
 8005488:	080054a9 	.word	0x080054a9
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054b9 	.word	0x080054b9
 8005494:	080054c1 	.word	0x080054c1
 8005498:	2302      	movs	r3, #2
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549e:	e01a      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80054a0:	2304      	movs	r3, #4
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a6:	e016      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80054a8:	2308      	movs	r3, #8
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e012      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80054b0:	2310      	movs	r3, #16
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e00e      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80054b8:	2320      	movs	r3, #32
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e00a      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80054c0:	2340      	movs	r3, #64	; 0x40
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e006      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e002      	b.n	80054d6 <UART_SetConfig+0x5a6>
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a3f      	ldr	r2, [pc, #252]	; (80055d8 <UART_SetConfig+0x6a8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	f040 80f8 	bne.w	80056d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	dc46      	bgt.n	8005578 <UART_SetConfig+0x648>
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	f2c0 8082 	blt.w	80055f4 <UART_SetConfig+0x6c4>
 80054f0:	3b02      	subs	r3, #2
 80054f2:	2b1e      	cmp	r3, #30
 80054f4:	d87e      	bhi.n	80055f4 <UART_SetConfig+0x6c4>
 80054f6:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <UART_SetConfig+0x5cc>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	0800557f 	.word	0x0800557f
 8005500:	080055f5 	.word	0x080055f5
 8005504:	08005587 	.word	0x08005587
 8005508:	080055f5 	.word	0x080055f5
 800550c:	080055f5 	.word	0x080055f5
 8005510:	080055f5 	.word	0x080055f5
 8005514:	08005597 	.word	0x08005597
 8005518:	080055f5 	.word	0x080055f5
 800551c:	080055f5 	.word	0x080055f5
 8005520:	080055f5 	.word	0x080055f5
 8005524:	080055f5 	.word	0x080055f5
 8005528:	080055f5 	.word	0x080055f5
 800552c:	080055f5 	.word	0x080055f5
 8005530:	080055f5 	.word	0x080055f5
 8005534:	080055a7 	.word	0x080055a7
 8005538:	080055f5 	.word	0x080055f5
 800553c:	080055f5 	.word	0x080055f5
 8005540:	080055f5 	.word	0x080055f5
 8005544:	080055f5 	.word	0x080055f5
 8005548:	080055f5 	.word	0x080055f5
 800554c:	080055f5 	.word	0x080055f5
 8005550:	080055f5 	.word	0x080055f5
 8005554:	080055f5 	.word	0x080055f5
 8005558:	080055f5 	.word	0x080055f5
 800555c:	080055f5 	.word	0x080055f5
 8005560:	080055f5 	.word	0x080055f5
 8005564:	080055f5 	.word	0x080055f5
 8005568:	080055f5 	.word	0x080055f5
 800556c:	080055f5 	.word	0x080055f5
 8005570:	080055f5 	.word	0x080055f5
 8005574:	080055e7 	.word	0x080055e7
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d037      	beq.n	80055ec <UART_SetConfig+0x6bc>
 800557c:	e03a      	b.n	80055f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800557e:	f7fe fefb 	bl	8004378 <HAL_RCCEx_GetD3PCLK1Freq>
 8005582:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005584:	e03c      	b.n	8005600 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe ff0a 	bl	80043a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005594:	e034      	b.n	8005600 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005596:	f107 0318 	add.w	r3, r7, #24
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff f856 	bl	800464c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055a4:	e02c      	b.n	8005600 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a6:	4b09      	ldr	r3, [pc, #36]	; (80055cc <UART_SetConfig+0x69c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d016      	beq.n	80055e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <UART_SetConfig+0x69c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	08db      	lsrs	r3, r3, #3
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	4a07      	ldr	r2, [pc, #28]	; (80055dc <UART_SetConfig+0x6ac>)
 80055be:	fa22 f303 	lsr.w	r3, r2, r3
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055c4:	e01c      	b.n	8005600 <UART_SetConfig+0x6d0>
 80055c6:	bf00      	nop
 80055c8:	40011400 	.word	0x40011400
 80055cc:	58024400 	.word	0x58024400
 80055d0:	40007800 	.word	0x40007800
 80055d4:	40007c00 	.word	0x40007c00
 80055d8:	58000c00 	.word	0x58000c00
 80055dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80055e0:	4b9d      	ldr	r3, [pc, #628]	; (8005858 <UART_SetConfig+0x928>)
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055e4:	e00c      	b.n	8005600 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055e6:	4b9d      	ldr	r3, [pc, #628]	; (800585c <UART_SetConfig+0x92c>)
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ea:	e009      	b.n	8005600 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055f2:	e005      	b.n	8005600 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80055fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 81de 	beq.w	80059c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	4a94      	ldr	r2, [pc, #592]	; (8005860 <UART_SetConfig+0x930>)
 800560e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005612:	461a      	mov	r2, r3
 8005614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005616:	fbb3 f3f2 	udiv	r3, r3, r2
 800561a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	4413      	add	r3, r2
 8005626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005628:	429a      	cmp	r2, r3
 800562a:	d305      	bcc.n	8005638 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005634:	429a      	cmp	r2, r3
 8005636:	d903      	bls.n	8005640 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800563e:	e1c1      	b.n	80059c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005642:	2200      	movs	r2, #0
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	60fa      	str	r2, [r7, #12]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	4a84      	ldr	r2, [pc, #528]	; (8005860 <UART_SetConfig+0x930>)
 800564e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005652:	b29b      	uxth	r3, r3
 8005654:	2200      	movs	r2, #0
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800565e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005662:	f7fa fe95 	bl	8000390 <__aeabi_uldivmod>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	020b      	lsls	r3, r1, #8
 8005678:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800567c:	0202      	lsls	r2, r0, #8
 800567e:	6979      	ldr	r1, [r7, #20]
 8005680:	6849      	ldr	r1, [r1, #4]
 8005682:	0849      	lsrs	r1, r1, #1
 8005684:	2000      	movs	r0, #0
 8005686:	460c      	mov	r4, r1
 8005688:	4605      	mov	r5, r0
 800568a:	eb12 0804 	adds.w	r8, r2, r4
 800568e:	eb43 0905 	adc.w	r9, r3, r5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	469a      	mov	sl, r3
 800569a:	4693      	mov	fp, r2
 800569c:	4652      	mov	r2, sl
 800569e:	465b      	mov	r3, fp
 80056a0:	4640      	mov	r0, r8
 80056a2:	4649      	mov	r1, r9
 80056a4:	f7fa fe74 	bl	8000390 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4613      	mov	r3, r2
 80056ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b6:	d308      	bcc.n	80056ca <UART_SetConfig+0x79a>
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056be:	d204      	bcs.n	80056ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	e17c      	b.n	80059c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056d0:	e178      	b.n	80059c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056da:	f040 80c5 	bne.w	8005868 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80056de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	dc48      	bgt.n	8005778 <UART_SetConfig+0x848>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	db7b      	blt.n	80057e2 <UART_SetConfig+0x8b2>
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d879      	bhi.n	80057e2 <UART_SetConfig+0x8b2>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0x7c4>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	0800577f 	.word	0x0800577f
 80056f8:	08005787 	.word	0x08005787
 80056fc:	080057e3 	.word	0x080057e3
 8005700:	080057e3 	.word	0x080057e3
 8005704:	0800578f 	.word	0x0800578f
 8005708:	080057e3 	.word	0x080057e3
 800570c:	080057e3 	.word	0x080057e3
 8005710:	080057e3 	.word	0x080057e3
 8005714:	0800579f 	.word	0x0800579f
 8005718:	080057e3 	.word	0x080057e3
 800571c:	080057e3 	.word	0x080057e3
 8005720:	080057e3 	.word	0x080057e3
 8005724:	080057e3 	.word	0x080057e3
 8005728:	080057e3 	.word	0x080057e3
 800572c:	080057e3 	.word	0x080057e3
 8005730:	080057e3 	.word	0x080057e3
 8005734:	080057af 	.word	0x080057af
 8005738:	080057e3 	.word	0x080057e3
 800573c:	080057e3 	.word	0x080057e3
 8005740:	080057e3 	.word	0x080057e3
 8005744:	080057e3 	.word	0x080057e3
 8005748:	080057e3 	.word	0x080057e3
 800574c:	080057e3 	.word	0x080057e3
 8005750:	080057e3 	.word	0x080057e3
 8005754:	080057e3 	.word	0x080057e3
 8005758:	080057e3 	.word	0x080057e3
 800575c:	080057e3 	.word	0x080057e3
 8005760:	080057e3 	.word	0x080057e3
 8005764:	080057e3 	.word	0x080057e3
 8005768:	080057e3 	.word	0x080057e3
 800576c:	080057e3 	.word	0x080057e3
 8005770:	080057e3 	.word	0x080057e3
 8005774:	080057d5 	.word	0x080057d5
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d02e      	beq.n	80057da <UART_SetConfig+0x8aa>
 800577c:	e031      	b.n	80057e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577e:	f7fd fe89 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8005782:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005784:	e033      	b.n	80057ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005786:	f7fd fe9b 	bl	80034c0 <HAL_RCC_GetPCLK2Freq>
 800578a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800578c:	e02f      	b.n	80057ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800578e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe fe06 	bl	80043a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800579c:	e027      	b.n	80057ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800579e:	f107 0318 	add.w	r3, r7, #24
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe ff52 	bl	800464c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ac:	e01f      	b.n	80057ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ae:	4b2d      	ldr	r3, [pc, #180]	; (8005864 <UART_SetConfig+0x934>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057ba:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <UART_SetConfig+0x934>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	08db      	lsrs	r3, r3, #3
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	4a24      	ldr	r2, [pc, #144]	; (8005858 <UART_SetConfig+0x928>)
 80057c6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057cc:	e00f      	b.n	80057ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057ce:	4b22      	ldr	r3, [pc, #136]	; (8005858 <UART_SetConfig+0x928>)
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d2:	e00c      	b.n	80057ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057d4:	4b21      	ldr	r3, [pc, #132]	; (800585c <UART_SetConfig+0x92c>)
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d8:	e009      	b.n	80057ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057e0:	e005      	b.n	80057ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80e7 	beq.w	80059c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	4a19      	ldr	r2, [pc, #100]	; (8005860 <UART_SetConfig+0x930>)
 80057fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005800:	461a      	mov	r2, r3
 8005802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005804:	fbb3 f3f2 	udiv	r3, r3, r2
 8005808:	005a      	lsls	r2, r3, #1
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	441a      	add	r2, r3
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	fbb2 f3f3 	udiv	r3, r2, r3
 800581a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	2b0f      	cmp	r3, #15
 8005820:	d916      	bls.n	8005850 <UART_SetConfig+0x920>
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005828:	d212      	bcs.n	8005850 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	b29b      	uxth	r3, r3
 800582e:	f023 030f 	bic.w	r3, r3, #15
 8005832:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	b29b      	uxth	r3, r3
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	b29a      	uxth	r2, r3
 8005840:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005842:	4313      	orrs	r3, r2
 8005844:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	e0b9      	b.n	80059c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005856:	e0b5      	b.n	80059c4 <UART_SetConfig+0xa94>
 8005858:	03d09000 	.word	0x03d09000
 800585c:	003d0900 	.word	0x003d0900
 8005860:	080091d0 	.word	0x080091d0
 8005864:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005868:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800586c:	2b20      	cmp	r3, #32
 800586e:	dc49      	bgt.n	8005904 <UART_SetConfig+0x9d4>
 8005870:	2b00      	cmp	r3, #0
 8005872:	db7c      	blt.n	800596e <UART_SetConfig+0xa3e>
 8005874:	2b20      	cmp	r3, #32
 8005876:	d87a      	bhi.n	800596e <UART_SetConfig+0xa3e>
 8005878:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <UART_SetConfig+0x950>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	0800590b 	.word	0x0800590b
 8005884:	08005913 	.word	0x08005913
 8005888:	0800596f 	.word	0x0800596f
 800588c:	0800596f 	.word	0x0800596f
 8005890:	0800591b 	.word	0x0800591b
 8005894:	0800596f 	.word	0x0800596f
 8005898:	0800596f 	.word	0x0800596f
 800589c:	0800596f 	.word	0x0800596f
 80058a0:	0800592b 	.word	0x0800592b
 80058a4:	0800596f 	.word	0x0800596f
 80058a8:	0800596f 	.word	0x0800596f
 80058ac:	0800596f 	.word	0x0800596f
 80058b0:	0800596f 	.word	0x0800596f
 80058b4:	0800596f 	.word	0x0800596f
 80058b8:	0800596f 	.word	0x0800596f
 80058bc:	0800596f 	.word	0x0800596f
 80058c0:	0800593b 	.word	0x0800593b
 80058c4:	0800596f 	.word	0x0800596f
 80058c8:	0800596f 	.word	0x0800596f
 80058cc:	0800596f 	.word	0x0800596f
 80058d0:	0800596f 	.word	0x0800596f
 80058d4:	0800596f 	.word	0x0800596f
 80058d8:	0800596f 	.word	0x0800596f
 80058dc:	0800596f 	.word	0x0800596f
 80058e0:	0800596f 	.word	0x0800596f
 80058e4:	0800596f 	.word	0x0800596f
 80058e8:	0800596f 	.word	0x0800596f
 80058ec:	0800596f 	.word	0x0800596f
 80058f0:	0800596f 	.word	0x0800596f
 80058f4:	0800596f 	.word	0x0800596f
 80058f8:	0800596f 	.word	0x0800596f
 80058fc:	0800596f 	.word	0x0800596f
 8005900:	08005961 	.word	0x08005961
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d02e      	beq.n	8005966 <UART_SetConfig+0xa36>
 8005908:	e031      	b.n	800596e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800590a:	f7fd fdc3 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 800590e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005910:	e033      	b.n	800597a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005912:	f7fd fdd5 	bl	80034c0 <HAL_RCC_GetPCLK2Freq>
 8005916:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005918:	e02f      	b.n	800597a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800591a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe fd40 	bl	80043a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005928:	e027      	b.n	800597a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800592a:	f107 0318 	add.w	r3, r7, #24
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fe8c 	bl	800464c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005938:	e01f      	b.n	800597a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800593a:	4b2d      	ldr	r3, [pc, #180]	; (80059f0 <UART_SetConfig+0xac0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005946:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <UART_SetConfig+0xac0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	4a28      	ldr	r2, [pc, #160]	; (80059f4 <UART_SetConfig+0xac4>)
 8005952:	fa22 f303 	lsr.w	r3, r2, r3
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005958:	e00f      	b.n	800597a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800595a:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <UART_SetConfig+0xac4>)
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800595e:	e00c      	b.n	800597a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005960:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <UART_SetConfig+0xac8>)
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005964:	e009      	b.n	800597a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800596c:	e005      	b.n	800597a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005978:	bf00      	nop
    }

    if (pclk != 0U)
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d021      	beq.n	80059c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <UART_SetConfig+0xacc>)
 8005986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800598a:	461a      	mov	r2, r3
 800598c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	441a      	add	r2, r3
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	2b0f      	cmp	r3, #15
 80059a8:	d909      	bls.n	80059be <UART_SetConfig+0xa8e>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b0:	d205      	bcs.n	80059be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60da      	str	r2, [r3, #12]
 80059bc:	e002      	b.n	80059c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2200      	movs	r2, #0
 80059d8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80059e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3748      	adds	r7, #72	; 0x48
 80059e8:	46bd      	mov	sp, r7
 80059ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ee:	bf00      	nop
 80059f0:	58024400 	.word	0x58024400
 80059f4:	03d09000 	.word	0x03d09000
 80059f8:	003d0900 	.word	0x003d0900
 80059fc:	080091d0 	.word	0x080091d0

08005a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01a      	beq.n	8005b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005afe:	d10a      	bne.n	8005b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]
  }
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b54:	f7fb fc5c 	bl	8001410 <HAL_GetTick>
 8005b58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d10e      	bne.n	8005b86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f82f 	bl	8005bda <UART_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e025      	b.n	8005bd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d10e      	bne.n	8005bb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f819 	bl	8005bda <UART_WaitOnFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e00f      	b.n	8005bd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b09c      	sub	sp, #112	; 0x70
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	4613      	mov	r3, r2
 8005be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bea:	e0a9      	b.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf2:	f000 80a5 	beq.w	8005d40 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf6:	f7fb fc0b 	bl	8001410 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d302      	bcc.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x32>
 8005c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d140      	bne.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c20:	667b      	str	r3, [r7, #100]	; 0x64
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e6      	bne.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3308      	adds	r3, #8
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	663b      	str	r3, [r7, #96]	; 0x60
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e5      	bne.n	8005c3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e069      	b.n	8005d62 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d051      	beq.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005caa:	d149      	bne.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3308      	adds	r3, #8
 8005cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3308      	adds	r3, #8
 8005d06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d08:	623a      	str	r2, [r7, #32]
 8005d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	69f9      	ldr	r1, [r7, #28]
 8005d0e:	6a3a      	ldr	r2, [r7, #32]
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e010      	b.n	8005d62 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69da      	ldr	r2, [r3, #28]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	bf0c      	ite	eq
 8005d50:	2301      	moveq	r3, #1
 8005d52:	2300      	movne	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	f43f af46 	beq.w	8005bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3770      	adds	r7, #112	; 0x70
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e027      	b.n	8005dd0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2224      	movs	r2, #36	; 0x24
 8005d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005dae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e02d      	b.n	8005e50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2224      	movs	r2, #36	; 0x24
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f84f 	bl	8005ed4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e02d      	b.n	8005ecc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2224      	movs	r2, #36	; 0x24
 8005e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f811 	bl	8005ed4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d108      	bne.n	8005ef6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ef4:	e031      	b.n	8005f5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ef6:	2310      	movs	r3, #16
 8005ef8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005efa:	2310      	movs	r3, #16
 8005efc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	0e5b      	lsrs	r3, r3, #25
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	0f5b      	lsrs	r3, r3, #29
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
 8005f20:	7b3a      	ldrb	r2, [r7, #12]
 8005f22:	4911      	ldr	r1, [pc, #68]	; (8005f68 <UARTEx_SetNbDataToProcess+0x94>)
 8005f24:	5c8a      	ldrb	r2, [r1, r2]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f2a:	7b3a      	ldrb	r2, [r7, #12]
 8005f2c:	490f      	ldr	r1, [pc, #60]	; (8005f6c <UARTEx_SetNbDataToProcess+0x98>)
 8005f2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f30:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	7b7a      	ldrb	r2, [r7, #13]
 8005f40:	4909      	ldr	r1, [pc, #36]	; (8005f68 <UARTEx_SetNbDataToProcess+0x94>)
 8005f42:	5c8a      	ldrb	r2, [r1, r2]
 8005f44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f48:	7b7a      	ldrb	r2, [r7, #13]
 8005f4a:	4908      	ldr	r1, [pc, #32]	; (8005f6c <UARTEx_SetNbDataToProcess+0x98>)
 8005f4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f5a:	bf00      	nop
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	080091e8 	.word	0x080091e8
 8005f6c:	080091f0 	.word	0x080091f0

08005f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f70:	b084      	sub	sp, #16
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	f107 001c 	add.w	r0, r7, #28
 8005f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d120      	bne.n	8005fca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	4b2a      	ldr	r3, [pc, #168]	; (8006044 <USB_CoreInit+0xd4>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d105      	bne.n	8005fbe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 faac 	bl	800651c <USB_CoreReset>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e01a      	b.n	8006000 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 faa0 	bl	800651c <USB_CoreReset>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ff2:	e005      	b.n	8006000 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	2b01      	cmp	r3, #1
 8006004:	d116      	bne.n	8006034 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <USB_CoreInit+0xd8>)
 8006016:	4313      	orrs	r3, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f043 0206 	orr.w	r2, r3, #6
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006040:	b004      	add	sp, #16
 8006042:	4770      	bx	lr
 8006044:	ffbdffbf 	.word	0xffbdffbf
 8006048:	03ee0000 	.word	0x03ee0000

0800604c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f023 0201 	bic.w	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	460b      	mov	r3, r1
 8006078:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d115      	bne.n	80060bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800609c:	2001      	movs	r0, #1
 800609e:	f7fb f9c3 	bl	8001428 <HAL_Delay>
      ms++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fa29 	bl	8006500 <USB_GetMode>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d01e      	beq.n	80060f2 <USB_SetCurrentMode+0x84>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b31      	cmp	r3, #49	; 0x31
 80060b8:	d9f0      	bls.n	800609c <USB_SetCurrentMode+0x2e>
 80060ba:	e01a      	b.n	80060f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d115      	bne.n	80060ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060ce:	2001      	movs	r0, #1
 80060d0:	f7fb f9aa 	bl	8001428 <HAL_Delay>
      ms++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fa10 	bl	8006500 <USB_GetMode>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <USB_SetCurrentMode+0x84>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b31      	cmp	r3, #49	; 0x31
 80060ea:	d9f0      	bls.n	80060ce <USB_SetCurrentMode+0x60>
 80060ec:	e001      	b.n	80060f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e005      	b.n	80060fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b32      	cmp	r3, #50	; 0x32
 80060f6:	d101      	bne.n	80060fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006108:	b084      	sub	sp, #16
 800610a:	b580      	push	{r7, lr}
 800610c:	b086      	sub	sp, #24
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006122:	2300      	movs	r3, #0
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	e009      	b.n	800613c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	3340      	adds	r3, #64	; 0x40
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	2200      	movs	r2, #0
 8006134:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	3301      	adds	r3, #1
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b0e      	cmp	r3, #14
 8006140:	d9f2      	bls.n	8006128 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006144:	2b00      	cmp	r3, #0
 8006146:	d11c      	bne.n	8006182 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006156:	f043 0302 	orr.w	r3, r3, #2
 800615a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	e005      	b.n	800618e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006194:	461a      	mov	r2, r3
 8006196:	2300      	movs	r3, #0
 8006198:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a0:	4619      	mov	r1, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a8:	461a      	mov	r2, r3
 80061aa:	680b      	ldr	r3, [r1, #0]
 80061ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d10c      	bne.n	80061ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061ba:	2100      	movs	r1, #0
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f965 	bl	800648c <USB_SetDevSpeed>
 80061c2:	e008      	b.n	80061d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061c4:	2101      	movs	r1, #1
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f960 	bl	800648c <USB_SetDevSpeed>
 80061cc:	e003      	b.n	80061d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061ce:	2103      	movs	r1, #3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f95b 	bl	800648c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061d6:	2110      	movs	r1, #16
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f8f3 	bl	80063c4 <USB_FlushTxFifo>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f91f 	bl	800642c <USB_FlushRxFifo>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fe:	461a      	mov	r2, r3
 8006200:	2300      	movs	r3, #0
 8006202:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620a:	461a      	mov	r2, r3
 800620c:	2300      	movs	r3, #0
 800620e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	461a      	mov	r2, r3
 8006218:	2300      	movs	r3, #0
 800621a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	e043      	b.n	80062aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006238:	d118      	bne.n	800626c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	461a      	mov	r2, r3
 800624e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	e013      	b.n	800627e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	461a      	mov	r2, r3
 8006264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	e008      	b.n	800627e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006278:	461a      	mov	r2, r3
 800627a:	2300      	movs	r3, #0
 800627c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628a:	461a      	mov	r2, r3
 800628c:	2300      	movs	r3, #0
 800628e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	461a      	mov	r2, r3
 800629e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	3301      	adds	r3, #1
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d3b7      	bcc.n	8006222 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062b2:	2300      	movs	r3, #0
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	e043      	b.n	8006340 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ce:	d118      	bne.n	8006302 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10a      	bne.n	80062ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	461a      	mov	r2, r3
 80062e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	e013      	b.n	8006314 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f8:	461a      	mov	r2, r3
 80062fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	e008      	b.n	8006314 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630e:	461a      	mov	r2, r3
 8006310:	2300      	movs	r3, #0
 8006312:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006332:	461a      	mov	r2, r3
 8006334:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006338:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	3301      	adds	r3, #1
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	429a      	cmp	r2, r3
 8006346:	d3b7      	bcc.n	80062b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800635a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006368:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	2b00      	cmp	r3, #0
 800636e:	d105      	bne.n	800637c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f043 0210 	orr.w	r2, r3, #16
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <USB_DevInit+0x2b4>)
 8006382:	4313      	orrs	r3, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f043 0208 	orr.w	r2, r3, #8
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800639a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639c:	2b01      	cmp	r3, #1
 800639e:	d105      	bne.n	80063ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <USB_DevInit+0x2b8>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063b8:	b004      	add	sp, #16
 80063ba:	4770      	bx	lr
 80063bc:	803c3800 	.word	0x803c3800
 80063c0:	40000004 	.word	0x40000004

080063c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3301      	adds	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a13      	ldr	r2, [pc, #76]	; (8006428 <USB_FlushTxFifo+0x64>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d901      	bls.n	80063e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e01b      	b.n	800641c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	daf2      	bge.n	80063d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	019b      	lsls	r3, r3, #6
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3301      	adds	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a08      	ldr	r2, [pc, #32]	; (8006428 <USB_FlushTxFifo+0x64>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e006      	b.n	800641c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b20      	cmp	r3, #32
 8006418:	d0f0      	beq.n	80063fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	00030d40 	.word	0x00030d40

0800642c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4a11      	ldr	r2, [pc, #68]	; (8006488 <USB_FlushRxFifo+0x5c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d901      	bls.n	800644a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e018      	b.n	800647c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	daf2      	bge.n	8006438 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2210      	movs	r2, #16
 800645a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	4a08      	ldr	r2, [pc, #32]	; (8006488 <USB_FlushRxFifo+0x5c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d901      	bls.n	800646e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e006      	b.n	800647c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b10      	cmp	r3, #16
 8006478:	d0f0      	beq.n	800645c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	00030d40 	.word	0x00030d40

0800648c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064ac:	4313      	orrs	r3, r2
 80064ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064d8:	f023 0303 	bic.w	r3, r3, #3
 80064dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ec:	f043 0302 	orr.w	r3, r3, #2
 80064f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f003 0301 	and.w	r3, r3, #1
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a13      	ldr	r2, [pc, #76]	; (8006580 <USB_CoreReset+0x64>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e01b      	b.n	8006572 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	daf2      	bge.n	8006528 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f043 0201 	orr.w	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a09      	ldr	r2, [pc, #36]	; (8006580 <USB_CoreReset+0x64>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e006      	b.n	8006572 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b01      	cmp	r3, #1
 800656e:	d0f0      	beq.n	8006552 <USB_CoreReset+0x36>

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	00030d40 	.word	0x00030d40

08006584 <arm_dot_prod_f32>:
 8006584:	b4f0      	push	{r4, r5, r6, r7}
 8006586:	0897      	lsrs	r7, r2, #2
 8006588:	d052      	beq.n	8006630 <arm_dot_prod_f32+0xac>
 800658a:	f100 0510 	add.w	r5, r0, #16
 800658e:	f101 0410 	add.w	r4, r1, #16
 8006592:	463e      	mov	r6, r7
 8006594:	eddf 7a28 	vldr	s15, [pc, #160]	; 8006638 <arm_dot_prod_f32+0xb4>
 8006598:	ed14 7a04 	vldr	s14, [r4, #-16]
 800659c:	3e01      	subs	r6, #1
 800659e:	ed15 6a04 	vldr	s12, [r5, #-16]
 80065a2:	f104 0410 	add.w	r4, r4, #16
 80065a6:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 80065aa:	f105 0510 	add.w	r5, r5, #16
 80065ae:	ee26 6a07 	vmul.f32	s12, s12, s14
 80065b2:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 80065b6:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 80065ba:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80065be:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 80065c2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80065c6:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 80065ca:	ee27 7a25 	vmul.f32	s14, s14, s11
 80065ce:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 80065d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80065d6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80065da:	ee37 7a26 	vadd.f32	s14, s14, s13
 80065de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065e2:	d1d9      	bne.n	8006598 <arm_dot_prod_f32+0x14>
 80065e4:	013f      	lsls	r7, r7, #4
 80065e6:	4438      	add	r0, r7
 80065e8:	4439      	add	r1, r7
 80065ea:	f012 0203 	ands.w	r2, r2, #3
 80065ee:	d01b      	beq.n	8006628 <arm_dot_prod_f32+0xa4>
 80065f0:	ed91 7a00 	vldr	s14, [r1]
 80065f4:	3a01      	subs	r2, #1
 80065f6:	edd0 6a00 	vldr	s13, [r0]
 80065fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80065fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006602:	d011      	beq.n	8006628 <arm_dot_prod_f32+0xa4>
 8006604:	ed91 7a01 	vldr	s14, [r1, #4]
 8006608:	2a01      	cmp	r2, #1
 800660a:	edd0 6a01 	vldr	s13, [r0, #4]
 800660e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006612:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006616:	d007      	beq.n	8006628 <arm_dot_prod_f32+0xa4>
 8006618:	ed90 7a02 	vldr	s14, [r0, #8]
 800661c:	edd1 6a02 	vldr	s13, [r1, #8]
 8006620:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006628:	edc3 7a00 	vstr	s15, [r3]
 800662c:	bcf0      	pop	{r4, r5, r6, r7}
 800662e:	4770      	bx	lr
 8006630:	eddf 7a01 	vldr	s15, [pc, #4]	; 8006638 <arm_dot_prod_f32+0xb4>
 8006634:	e7d9      	b.n	80065ea <arm_dot_prod_f32+0x66>
 8006636:	bf00      	nop
 8006638:	00000000 	.word	0x00000000

0800663c <__errno>:
 800663c:	4b01      	ldr	r3, [pc, #4]	; (8006644 <__errno+0x8>)
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	24000010 	.word	0x24000010

08006648 <__libc_init_array>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	4d0d      	ldr	r5, [pc, #52]	; (8006680 <__libc_init_array+0x38>)
 800664c:	4c0d      	ldr	r4, [pc, #52]	; (8006684 <__libc_init_array+0x3c>)
 800664e:	1b64      	subs	r4, r4, r5
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	2600      	movs	r6, #0
 8006654:	42a6      	cmp	r6, r4
 8006656:	d109      	bne.n	800666c <__libc_init_array+0x24>
 8006658:	4d0b      	ldr	r5, [pc, #44]	; (8006688 <__libc_init_array+0x40>)
 800665a:	4c0c      	ldr	r4, [pc, #48]	; (800668c <__libc_init_array+0x44>)
 800665c:	f002 fd7a 	bl	8009154 <_init>
 8006660:	1b64      	subs	r4, r4, r5
 8006662:	10a4      	asrs	r4, r4, #2
 8006664:	2600      	movs	r6, #0
 8006666:	42a6      	cmp	r6, r4
 8006668:	d105      	bne.n	8006676 <__libc_init_array+0x2e>
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006670:	4798      	blx	r3
 8006672:	3601      	adds	r6, #1
 8006674:	e7ee      	b.n	8006654 <__libc_init_array+0xc>
 8006676:	f855 3b04 	ldr.w	r3, [r5], #4
 800667a:	4798      	blx	r3
 800667c:	3601      	adds	r6, #1
 800667e:	e7f2      	b.n	8006666 <__libc_init_array+0x1e>
 8006680:	080095dc 	.word	0x080095dc
 8006684:	080095dc 	.word	0x080095dc
 8006688:	080095dc 	.word	0x080095dc
 800668c:	080095e0 	.word	0x080095e0

08006690 <memset>:
 8006690:	4402      	add	r2, r0
 8006692:	4603      	mov	r3, r0
 8006694:	4293      	cmp	r3, r2
 8006696:	d100      	bne.n	800669a <memset+0xa>
 8006698:	4770      	bx	lr
 800669a:	f803 1b01 	strb.w	r1, [r3], #1
 800669e:	e7f9      	b.n	8006694 <memset+0x4>

080066a0 <__cvt>:
 80066a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a2:	ed2d 8b02 	vpush	{d8}
 80066a6:	eeb0 8b40 	vmov.f64	d8, d0
 80066aa:	b085      	sub	sp, #20
 80066ac:	4617      	mov	r7, r2
 80066ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80066b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80066b2:	ee18 2a90 	vmov	r2, s17
 80066b6:	f025 0520 	bic.w	r5, r5, #32
 80066ba:	2a00      	cmp	r2, #0
 80066bc:	bfb6      	itet	lt
 80066be:	222d      	movlt	r2, #45	; 0x2d
 80066c0:	2200      	movge	r2, #0
 80066c2:	eeb1 8b40 	vneglt.f64	d8, d0
 80066c6:	2d46      	cmp	r5, #70	; 0x46
 80066c8:	460c      	mov	r4, r1
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	d004      	beq.n	80066d8 <__cvt+0x38>
 80066ce:	2d45      	cmp	r5, #69	; 0x45
 80066d0:	d100      	bne.n	80066d4 <__cvt+0x34>
 80066d2:	3401      	adds	r4, #1
 80066d4:	2102      	movs	r1, #2
 80066d6:	e000      	b.n	80066da <__cvt+0x3a>
 80066d8:	2103      	movs	r1, #3
 80066da:	ab03      	add	r3, sp, #12
 80066dc:	9301      	str	r3, [sp, #4]
 80066de:	ab02      	add	r3, sp, #8
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	4622      	mov	r2, r4
 80066e4:	4633      	mov	r3, r6
 80066e6:	eeb0 0b48 	vmov.f64	d0, d8
 80066ea:	f000 fe0d 	bl	8007308 <_dtoa_r>
 80066ee:	2d47      	cmp	r5, #71	; 0x47
 80066f0:	d101      	bne.n	80066f6 <__cvt+0x56>
 80066f2:	07fb      	lsls	r3, r7, #31
 80066f4:	d51a      	bpl.n	800672c <__cvt+0x8c>
 80066f6:	2d46      	cmp	r5, #70	; 0x46
 80066f8:	eb00 0204 	add.w	r2, r0, r4
 80066fc:	d10c      	bne.n	8006718 <__cvt+0x78>
 80066fe:	7803      	ldrb	r3, [r0, #0]
 8006700:	2b30      	cmp	r3, #48	; 0x30
 8006702:	d107      	bne.n	8006714 <__cvt+0x74>
 8006704:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670c:	bf1c      	itt	ne
 800670e:	f1c4 0401 	rsbne	r4, r4, #1
 8006712:	6034      	strne	r4, [r6, #0]
 8006714:	6833      	ldr	r3, [r6, #0]
 8006716:	441a      	add	r2, r3
 8006718:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800671c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006720:	bf08      	it	eq
 8006722:	9203      	streq	r2, [sp, #12]
 8006724:	2130      	movs	r1, #48	; 0x30
 8006726:	9b03      	ldr	r3, [sp, #12]
 8006728:	4293      	cmp	r3, r2
 800672a:	d307      	bcc.n	800673c <__cvt+0x9c>
 800672c:	9b03      	ldr	r3, [sp, #12]
 800672e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006730:	1a1b      	subs	r3, r3, r0
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	b005      	add	sp, #20
 8006736:	ecbd 8b02 	vpop	{d8}
 800673a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800673c:	1c5c      	adds	r4, r3, #1
 800673e:	9403      	str	r4, [sp, #12]
 8006740:	7019      	strb	r1, [r3, #0]
 8006742:	e7f0      	b.n	8006726 <__cvt+0x86>

08006744 <__exponent>:
 8006744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006746:	4603      	mov	r3, r0
 8006748:	2900      	cmp	r1, #0
 800674a:	bfb8      	it	lt
 800674c:	4249      	neglt	r1, r1
 800674e:	f803 2b02 	strb.w	r2, [r3], #2
 8006752:	bfb4      	ite	lt
 8006754:	222d      	movlt	r2, #45	; 0x2d
 8006756:	222b      	movge	r2, #43	; 0x2b
 8006758:	2909      	cmp	r1, #9
 800675a:	7042      	strb	r2, [r0, #1]
 800675c:	dd2a      	ble.n	80067b4 <__exponent+0x70>
 800675e:	f10d 0407 	add.w	r4, sp, #7
 8006762:	46a4      	mov	ip, r4
 8006764:	270a      	movs	r7, #10
 8006766:	46a6      	mov	lr, r4
 8006768:	460a      	mov	r2, r1
 800676a:	fb91 f6f7 	sdiv	r6, r1, r7
 800676e:	fb07 1516 	mls	r5, r7, r6, r1
 8006772:	3530      	adds	r5, #48	; 0x30
 8006774:	2a63      	cmp	r2, #99	; 0x63
 8006776:	f104 34ff 	add.w	r4, r4, #4294967295
 800677a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800677e:	4631      	mov	r1, r6
 8006780:	dcf1      	bgt.n	8006766 <__exponent+0x22>
 8006782:	3130      	adds	r1, #48	; 0x30
 8006784:	f1ae 0502 	sub.w	r5, lr, #2
 8006788:	f804 1c01 	strb.w	r1, [r4, #-1]
 800678c:	1c44      	adds	r4, r0, #1
 800678e:	4629      	mov	r1, r5
 8006790:	4561      	cmp	r1, ip
 8006792:	d30a      	bcc.n	80067aa <__exponent+0x66>
 8006794:	f10d 0209 	add.w	r2, sp, #9
 8006798:	eba2 020e 	sub.w	r2, r2, lr
 800679c:	4565      	cmp	r5, ip
 800679e:	bf88      	it	hi
 80067a0:	2200      	movhi	r2, #0
 80067a2:	4413      	add	r3, r2
 80067a4:	1a18      	subs	r0, r3, r0
 80067a6:	b003      	add	sp, #12
 80067a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80067b2:	e7ed      	b.n	8006790 <__exponent+0x4c>
 80067b4:	2330      	movs	r3, #48	; 0x30
 80067b6:	3130      	adds	r1, #48	; 0x30
 80067b8:	7083      	strb	r3, [r0, #2]
 80067ba:	70c1      	strb	r1, [r0, #3]
 80067bc:	1d03      	adds	r3, r0, #4
 80067be:	e7f1      	b.n	80067a4 <__exponent+0x60>

080067c0 <_printf_float>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	b08b      	sub	sp, #44	; 0x2c
 80067c6:	460c      	mov	r4, r1
 80067c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80067cc:	4616      	mov	r6, r2
 80067ce:	461f      	mov	r7, r3
 80067d0:	4605      	mov	r5, r0
 80067d2:	f001 fcbf 	bl	8008154 <_localeconv_r>
 80067d6:	f8d0 b000 	ldr.w	fp, [r0]
 80067da:	4658      	mov	r0, fp
 80067dc:	f7f9 fd80 	bl	80002e0 <strlen>
 80067e0:	2300      	movs	r3, #0
 80067e2:	9308      	str	r3, [sp, #32]
 80067e4:	f8d8 3000 	ldr.w	r3, [r8]
 80067e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80067ec:	6822      	ldr	r2, [r4, #0]
 80067ee:	3307      	adds	r3, #7
 80067f0:	f023 0307 	bic.w	r3, r3, #7
 80067f4:	f103 0108 	add.w	r1, r3, #8
 80067f8:	f8c8 1000 	str.w	r1, [r8]
 80067fc:	4682      	mov	sl, r0
 80067fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006802:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006806:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006a68 <_printf_float+0x2a8>
 800680a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800680e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006812:	eeb4 6b47 	vcmp.f64	d6, d7
 8006816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681a:	dd24      	ble.n	8006866 <_printf_float+0xa6>
 800681c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006824:	d502      	bpl.n	800682c <_printf_float+0x6c>
 8006826:	232d      	movs	r3, #45	; 0x2d
 8006828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800682c:	4b90      	ldr	r3, [pc, #576]	; (8006a70 <_printf_float+0x2b0>)
 800682e:	4891      	ldr	r0, [pc, #580]	; (8006a74 <_printf_float+0x2b4>)
 8006830:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006834:	bf94      	ite	ls
 8006836:	4698      	movls	r8, r3
 8006838:	4680      	movhi	r8, r0
 800683a:	2303      	movs	r3, #3
 800683c:	6123      	str	r3, [r4, #16]
 800683e:	f022 0204 	bic.w	r2, r2, #4
 8006842:	2300      	movs	r3, #0
 8006844:	6022      	str	r2, [r4, #0]
 8006846:	9304      	str	r3, [sp, #16]
 8006848:	9700      	str	r7, [sp, #0]
 800684a:	4633      	mov	r3, r6
 800684c:	aa09      	add	r2, sp, #36	; 0x24
 800684e:	4621      	mov	r1, r4
 8006850:	4628      	mov	r0, r5
 8006852:	f000 f9d3 	bl	8006bfc <_printf_common>
 8006856:	3001      	adds	r0, #1
 8006858:	f040 808a 	bne.w	8006970 <_printf_float+0x1b0>
 800685c:	f04f 30ff 	mov.w	r0, #4294967295
 8006860:	b00b      	add	sp, #44	; 0x2c
 8006862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006866:	eeb4 0b40 	vcmp.f64	d0, d0
 800686a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686e:	d709      	bvc.n	8006884 <_printf_float+0xc4>
 8006870:	ee10 3a90 	vmov	r3, s1
 8006874:	2b00      	cmp	r3, #0
 8006876:	bfbc      	itt	lt
 8006878:	232d      	movlt	r3, #45	; 0x2d
 800687a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800687e:	487e      	ldr	r0, [pc, #504]	; (8006a78 <_printf_float+0x2b8>)
 8006880:	4b7e      	ldr	r3, [pc, #504]	; (8006a7c <_printf_float+0x2bc>)
 8006882:	e7d5      	b.n	8006830 <_printf_float+0x70>
 8006884:	6863      	ldr	r3, [r4, #4]
 8006886:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800688a:	9104      	str	r1, [sp, #16]
 800688c:	1c59      	adds	r1, r3, #1
 800688e:	d13c      	bne.n	800690a <_printf_float+0x14a>
 8006890:	2306      	movs	r3, #6
 8006892:	6063      	str	r3, [r4, #4]
 8006894:	2300      	movs	r3, #0
 8006896:	9303      	str	r3, [sp, #12]
 8006898:	ab08      	add	r3, sp, #32
 800689a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800689e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068a2:	ab07      	add	r3, sp, #28
 80068a4:	6861      	ldr	r1, [r4, #4]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	6022      	str	r2, [r4, #0]
 80068aa:	f10d 031b 	add.w	r3, sp, #27
 80068ae:	4628      	mov	r0, r5
 80068b0:	f7ff fef6 	bl	80066a0 <__cvt>
 80068b4:	9b04      	ldr	r3, [sp, #16]
 80068b6:	9907      	ldr	r1, [sp, #28]
 80068b8:	2b47      	cmp	r3, #71	; 0x47
 80068ba:	4680      	mov	r8, r0
 80068bc:	d108      	bne.n	80068d0 <_printf_float+0x110>
 80068be:	1cc8      	adds	r0, r1, #3
 80068c0:	db02      	blt.n	80068c8 <_printf_float+0x108>
 80068c2:	6863      	ldr	r3, [r4, #4]
 80068c4:	4299      	cmp	r1, r3
 80068c6:	dd41      	ble.n	800694c <_printf_float+0x18c>
 80068c8:	f1a9 0902 	sub.w	r9, r9, #2
 80068cc:	fa5f f989 	uxtb.w	r9, r9
 80068d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068d4:	d820      	bhi.n	8006918 <_printf_float+0x158>
 80068d6:	3901      	subs	r1, #1
 80068d8:	464a      	mov	r2, r9
 80068da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068de:	9107      	str	r1, [sp, #28]
 80068e0:	f7ff ff30 	bl	8006744 <__exponent>
 80068e4:	9a08      	ldr	r2, [sp, #32]
 80068e6:	9004      	str	r0, [sp, #16]
 80068e8:	1813      	adds	r3, r2, r0
 80068ea:	2a01      	cmp	r2, #1
 80068ec:	6123      	str	r3, [r4, #16]
 80068ee:	dc02      	bgt.n	80068f6 <_printf_float+0x136>
 80068f0:	6822      	ldr	r2, [r4, #0]
 80068f2:	07d2      	lsls	r2, r2, #31
 80068f4:	d501      	bpl.n	80068fa <_printf_float+0x13a>
 80068f6:	3301      	adds	r3, #1
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0a2      	beq.n	8006848 <_printf_float+0x88>
 8006902:	232d      	movs	r3, #45	; 0x2d
 8006904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006908:	e79e      	b.n	8006848 <_printf_float+0x88>
 800690a:	9904      	ldr	r1, [sp, #16]
 800690c:	2947      	cmp	r1, #71	; 0x47
 800690e:	d1c1      	bne.n	8006894 <_printf_float+0xd4>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1bf      	bne.n	8006894 <_printf_float+0xd4>
 8006914:	2301      	movs	r3, #1
 8006916:	e7bc      	b.n	8006892 <_printf_float+0xd2>
 8006918:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800691c:	d118      	bne.n	8006950 <_printf_float+0x190>
 800691e:	2900      	cmp	r1, #0
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	dd0b      	ble.n	800693c <_printf_float+0x17c>
 8006924:	6121      	str	r1, [r4, #16]
 8006926:	b913      	cbnz	r3, 800692e <_printf_float+0x16e>
 8006928:	6822      	ldr	r2, [r4, #0]
 800692a:	07d0      	lsls	r0, r2, #31
 800692c:	d502      	bpl.n	8006934 <_printf_float+0x174>
 800692e:	3301      	adds	r3, #1
 8006930:	440b      	add	r3, r1
 8006932:	6123      	str	r3, [r4, #16]
 8006934:	2300      	movs	r3, #0
 8006936:	65a1      	str	r1, [r4, #88]	; 0x58
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	e7de      	b.n	80068fa <_printf_float+0x13a>
 800693c:	b913      	cbnz	r3, 8006944 <_printf_float+0x184>
 800693e:	6822      	ldr	r2, [r4, #0]
 8006940:	07d2      	lsls	r2, r2, #31
 8006942:	d501      	bpl.n	8006948 <_printf_float+0x188>
 8006944:	3302      	adds	r3, #2
 8006946:	e7f4      	b.n	8006932 <_printf_float+0x172>
 8006948:	2301      	movs	r3, #1
 800694a:	e7f2      	b.n	8006932 <_printf_float+0x172>
 800694c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006950:	9b08      	ldr	r3, [sp, #32]
 8006952:	4299      	cmp	r1, r3
 8006954:	db05      	blt.n	8006962 <_printf_float+0x1a2>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	6121      	str	r1, [r4, #16]
 800695a:	07d8      	lsls	r0, r3, #31
 800695c:	d5ea      	bpl.n	8006934 <_printf_float+0x174>
 800695e:	1c4b      	adds	r3, r1, #1
 8006960:	e7e7      	b.n	8006932 <_printf_float+0x172>
 8006962:	2900      	cmp	r1, #0
 8006964:	bfd4      	ite	le
 8006966:	f1c1 0202 	rsble	r2, r1, #2
 800696a:	2201      	movgt	r2, #1
 800696c:	4413      	add	r3, r2
 800696e:	e7e0      	b.n	8006932 <_printf_float+0x172>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	055a      	lsls	r2, r3, #21
 8006974:	d407      	bmi.n	8006986 <_printf_float+0x1c6>
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	4642      	mov	r2, r8
 800697a:	4631      	mov	r1, r6
 800697c:	4628      	mov	r0, r5
 800697e:	47b8      	blx	r7
 8006980:	3001      	adds	r0, #1
 8006982:	d12a      	bne.n	80069da <_printf_float+0x21a>
 8006984:	e76a      	b.n	800685c <_printf_float+0x9c>
 8006986:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800698a:	f240 80e2 	bls.w	8006b52 <_printf_float+0x392>
 800698e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006992:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699a:	d133      	bne.n	8006a04 <_printf_float+0x244>
 800699c:	4a38      	ldr	r2, [pc, #224]	; (8006a80 <_printf_float+0x2c0>)
 800699e:	2301      	movs	r3, #1
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f43f af58 	beq.w	800685c <_printf_float+0x9c>
 80069ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	db02      	blt.n	80069ba <_printf_float+0x1fa>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	07d8      	lsls	r0, r3, #31
 80069b8:	d50f      	bpl.n	80069da <_printf_float+0x21a>
 80069ba:	4653      	mov	r3, sl
 80069bc:	465a      	mov	r2, fp
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	f43f af49 	beq.w	800685c <_printf_float+0x9c>
 80069ca:	f04f 0800 	mov.w	r8, #0
 80069ce:	f104 091a 	add.w	r9, r4, #26
 80069d2:	9b08      	ldr	r3, [sp, #32]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	4543      	cmp	r3, r8
 80069d8:	dc09      	bgt.n	80069ee <_printf_float+0x22e>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	079b      	lsls	r3, r3, #30
 80069de:	f100 8108 	bmi.w	8006bf2 <_printf_float+0x432>
 80069e2:	68e0      	ldr	r0, [r4, #12]
 80069e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e6:	4298      	cmp	r0, r3
 80069e8:	bfb8      	it	lt
 80069ea:	4618      	movlt	r0, r3
 80069ec:	e738      	b.n	8006860 <_printf_float+0xa0>
 80069ee:	2301      	movs	r3, #1
 80069f0:	464a      	mov	r2, r9
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	f43f af2f 	beq.w	800685c <_printf_float+0x9c>
 80069fe:	f108 0801 	add.w	r8, r8, #1
 8006a02:	e7e6      	b.n	80069d2 <_printf_float+0x212>
 8006a04:	9b07      	ldr	r3, [sp, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dc3c      	bgt.n	8006a84 <_printf_float+0x2c4>
 8006a0a:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <_printf_float+0x2c0>)
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b8      	blx	r7
 8006a14:	3001      	adds	r0, #1
 8006a16:	f43f af21 	beq.w	800685c <_printf_float+0x9c>
 8006a1a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	d102      	bne.n	8006a28 <_printf_float+0x268>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	07d9      	lsls	r1, r3, #31
 8006a26:	d5d8      	bpl.n	80069da <_printf_float+0x21a>
 8006a28:	4653      	mov	r3, sl
 8006a2a:	465a      	mov	r2, fp
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	f43f af12 	beq.w	800685c <_printf_float+0x9c>
 8006a38:	f04f 0900 	mov.w	r9, #0
 8006a3c:	f104 0a1a 	add.w	sl, r4, #26
 8006a40:	9b07      	ldr	r3, [sp, #28]
 8006a42:	425b      	negs	r3, r3
 8006a44:	454b      	cmp	r3, r9
 8006a46:	dc01      	bgt.n	8006a4c <_printf_float+0x28c>
 8006a48:	9b08      	ldr	r3, [sp, #32]
 8006a4a:	e795      	b.n	8006978 <_printf_float+0x1b8>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4652      	mov	r2, sl
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	47b8      	blx	r7
 8006a56:	3001      	adds	r0, #1
 8006a58:	f43f af00 	beq.w	800685c <_printf_float+0x9c>
 8006a5c:	f109 0901 	add.w	r9, r9, #1
 8006a60:	e7ee      	b.n	8006a40 <_printf_float+0x280>
 8006a62:	bf00      	nop
 8006a64:	f3af 8000 	nop.w
 8006a68:	ffffffff 	.word	0xffffffff
 8006a6c:	7fefffff 	.word	0x7fefffff
 8006a70:	080091fc 	.word	0x080091fc
 8006a74:	08009200 	.word	0x08009200
 8006a78:	08009208 	.word	0x08009208
 8006a7c:	08009204 	.word	0x08009204
 8006a80:	0800920c 	.word	0x0800920c
 8006a84:	9a08      	ldr	r2, [sp, #32]
 8006a86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	bfa8      	it	ge
 8006a8c:	461a      	movge	r2, r3
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	4691      	mov	r9, r2
 8006a92:	dc38      	bgt.n	8006b06 <_printf_float+0x346>
 8006a94:	2300      	movs	r3, #0
 8006a96:	9305      	str	r3, [sp, #20]
 8006a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a9c:	f104 021a 	add.w	r2, r4, #26
 8006aa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006aa2:	9905      	ldr	r1, [sp, #20]
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	eba3 0309 	sub.w	r3, r3, r9
 8006aaa:	428b      	cmp	r3, r1
 8006aac:	dc33      	bgt.n	8006b16 <_printf_float+0x356>
 8006aae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	db3c      	blt.n	8006b30 <_printf_float+0x370>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	07da      	lsls	r2, r3, #31
 8006aba:	d439      	bmi.n	8006b30 <_printf_float+0x370>
 8006abc:	9b08      	ldr	r3, [sp, #32]
 8006abe:	9a04      	ldr	r2, [sp, #16]
 8006ac0:	9907      	ldr	r1, [sp, #28]
 8006ac2:	1a9a      	subs	r2, r3, r2
 8006ac4:	eba3 0901 	sub.w	r9, r3, r1
 8006ac8:	4591      	cmp	r9, r2
 8006aca:	bfa8      	it	ge
 8006acc:	4691      	movge	r9, r2
 8006ace:	f1b9 0f00 	cmp.w	r9, #0
 8006ad2:	dc35      	bgt.n	8006b40 <_printf_float+0x380>
 8006ad4:	f04f 0800 	mov.w	r8, #0
 8006ad8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006adc:	f104 0a1a 	add.w	sl, r4, #26
 8006ae0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	eba3 0309 	sub.w	r3, r3, r9
 8006aea:	4543      	cmp	r3, r8
 8006aec:	f77f af75 	ble.w	80069da <_printf_float+0x21a>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4652      	mov	r2, sl
 8006af4:	4631      	mov	r1, r6
 8006af6:	4628      	mov	r0, r5
 8006af8:	47b8      	blx	r7
 8006afa:	3001      	adds	r0, #1
 8006afc:	f43f aeae 	beq.w	800685c <_printf_float+0x9c>
 8006b00:	f108 0801 	add.w	r8, r8, #1
 8006b04:	e7ec      	b.n	8006ae0 <_printf_float+0x320>
 8006b06:	4613      	mov	r3, r2
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4642      	mov	r2, r8
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	47b8      	blx	r7
 8006b10:	3001      	adds	r0, #1
 8006b12:	d1bf      	bne.n	8006a94 <_printf_float+0x2d4>
 8006b14:	e6a2      	b.n	800685c <_printf_float+0x9c>
 8006b16:	2301      	movs	r3, #1
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	9204      	str	r2, [sp, #16]
 8006b1e:	47b8      	blx	r7
 8006b20:	3001      	adds	r0, #1
 8006b22:	f43f ae9b 	beq.w	800685c <_printf_float+0x9c>
 8006b26:	9b05      	ldr	r3, [sp, #20]
 8006b28:	9a04      	ldr	r2, [sp, #16]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	9305      	str	r3, [sp, #20]
 8006b2e:	e7b7      	b.n	8006aa0 <_printf_float+0x2e0>
 8006b30:	4653      	mov	r3, sl
 8006b32:	465a      	mov	r2, fp
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	d1be      	bne.n	8006abc <_printf_float+0x2fc>
 8006b3e:	e68d      	b.n	800685c <_printf_float+0x9c>
 8006b40:	9a04      	ldr	r2, [sp, #16]
 8006b42:	464b      	mov	r3, r9
 8006b44:	4442      	add	r2, r8
 8006b46:	4631      	mov	r1, r6
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d1c1      	bne.n	8006ad4 <_printf_float+0x314>
 8006b50:	e684      	b.n	800685c <_printf_float+0x9c>
 8006b52:	9a08      	ldr	r2, [sp, #32]
 8006b54:	2a01      	cmp	r2, #1
 8006b56:	dc01      	bgt.n	8006b5c <_printf_float+0x39c>
 8006b58:	07db      	lsls	r3, r3, #31
 8006b5a:	d537      	bpl.n	8006bcc <_printf_float+0x40c>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4642      	mov	r2, r8
 8006b60:	4631      	mov	r1, r6
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b8      	blx	r7
 8006b66:	3001      	adds	r0, #1
 8006b68:	f43f ae78 	beq.w	800685c <_printf_float+0x9c>
 8006b6c:	4653      	mov	r3, sl
 8006b6e:	465a      	mov	r2, fp
 8006b70:	4631      	mov	r1, r6
 8006b72:	4628      	mov	r0, r5
 8006b74:	47b8      	blx	r7
 8006b76:	3001      	adds	r0, #1
 8006b78:	f43f ae70 	beq.w	800685c <_printf_float+0x9c>
 8006b7c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006b80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b88:	d01b      	beq.n	8006bc2 <_printf_float+0x402>
 8006b8a:	9b08      	ldr	r3, [sp, #32]
 8006b8c:	f108 0201 	add.w	r2, r8, #1
 8006b90:	3b01      	subs	r3, #1
 8006b92:	4631      	mov	r1, r6
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b8      	blx	r7
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d10e      	bne.n	8006bba <_printf_float+0x3fa>
 8006b9c:	e65e      	b.n	800685c <_printf_float+0x9c>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	464a      	mov	r2, r9
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	47b8      	blx	r7
 8006ba8:	3001      	adds	r0, #1
 8006baa:	f43f ae57 	beq.w	800685c <_printf_float+0x9c>
 8006bae:	f108 0801 	add.w	r8, r8, #1
 8006bb2:	9b08      	ldr	r3, [sp, #32]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	4543      	cmp	r3, r8
 8006bb8:	dcf1      	bgt.n	8006b9e <_printf_float+0x3de>
 8006bba:	9b04      	ldr	r3, [sp, #16]
 8006bbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006bc0:	e6db      	b.n	800697a <_printf_float+0x1ba>
 8006bc2:	f04f 0800 	mov.w	r8, #0
 8006bc6:	f104 091a 	add.w	r9, r4, #26
 8006bca:	e7f2      	b.n	8006bb2 <_printf_float+0x3f2>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	4642      	mov	r2, r8
 8006bd0:	e7df      	b.n	8006b92 <_printf_float+0x3d2>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	464a      	mov	r2, r9
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b8      	blx	r7
 8006bdc:	3001      	adds	r0, #1
 8006bde:	f43f ae3d 	beq.w	800685c <_printf_float+0x9c>
 8006be2:	f108 0801 	add.w	r8, r8, #1
 8006be6:	68e3      	ldr	r3, [r4, #12]
 8006be8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bea:	1a5b      	subs	r3, r3, r1
 8006bec:	4543      	cmp	r3, r8
 8006bee:	dcf0      	bgt.n	8006bd2 <_printf_float+0x412>
 8006bf0:	e6f7      	b.n	80069e2 <_printf_float+0x222>
 8006bf2:	f04f 0800 	mov.w	r8, #0
 8006bf6:	f104 0919 	add.w	r9, r4, #25
 8006bfa:	e7f4      	b.n	8006be6 <_printf_float+0x426>

08006bfc <_printf_common>:
 8006bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c00:	4616      	mov	r6, r2
 8006c02:	4699      	mov	r9, r3
 8006c04:	688a      	ldr	r2, [r1, #8]
 8006c06:	690b      	ldr	r3, [r1, #16]
 8006c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	bfb8      	it	lt
 8006c10:	4613      	movlt	r3, r2
 8006c12:	6033      	str	r3, [r6, #0]
 8006c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c18:	4607      	mov	r7, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	b10a      	cbz	r2, 8006c22 <_printf_common+0x26>
 8006c1e:	3301      	adds	r3, #1
 8006c20:	6033      	str	r3, [r6, #0]
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	0699      	lsls	r1, r3, #26
 8006c26:	bf42      	ittt	mi
 8006c28:	6833      	ldrmi	r3, [r6, #0]
 8006c2a:	3302      	addmi	r3, #2
 8006c2c:	6033      	strmi	r3, [r6, #0]
 8006c2e:	6825      	ldr	r5, [r4, #0]
 8006c30:	f015 0506 	ands.w	r5, r5, #6
 8006c34:	d106      	bne.n	8006c44 <_printf_common+0x48>
 8006c36:	f104 0a19 	add.w	sl, r4, #25
 8006c3a:	68e3      	ldr	r3, [r4, #12]
 8006c3c:	6832      	ldr	r2, [r6, #0]
 8006c3e:	1a9b      	subs	r3, r3, r2
 8006c40:	42ab      	cmp	r3, r5
 8006c42:	dc26      	bgt.n	8006c92 <_printf_common+0x96>
 8006c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c48:	1e13      	subs	r3, r2, #0
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	bf18      	it	ne
 8006c4e:	2301      	movne	r3, #1
 8006c50:	0692      	lsls	r2, r2, #26
 8006c52:	d42b      	bmi.n	8006cac <_printf_common+0xb0>
 8006c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c58:	4649      	mov	r1, r9
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	47c0      	blx	r8
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d01e      	beq.n	8006ca0 <_printf_common+0xa4>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	68e5      	ldr	r5, [r4, #12]
 8006c66:	6832      	ldr	r2, [r6, #0]
 8006c68:	f003 0306 	and.w	r3, r3, #6
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	bf08      	it	eq
 8006c70:	1aad      	subeq	r5, r5, r2
 8006c72:	68a3      	ldr	r3, [r4, #8]
 8006c74:	6922      	ldr	r2, [r4, #16]
 8006c76:	bf0c      	ite	eq
 8006c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c7c:	2500      	movne	r5, #0
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	bfc4      	itt	gt
 8006c82:	1a9b      	subgt	r3, r3, r2
 8006c84:	18ed      	addgt	r5, r5, r3
 8006c86:	2600      	movs	r6, #0
 8006c88:	341a      	adds	r4, #26
 8006c8a:	42b5      	cmp	r5, r6
 8006c8c:	d11a      	bne.n	8006cc4 <_printf_common+0xc8>
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e008      	b.n	8006ca4 <_printf_common+0xa8>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4652      	mov	r2, sl
 8006c96:	4649      	mov	r1, r9
 8006c98:	4638      	mov	r0, r7
 8006c9a:	47c0      	blx	r8
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d103      	bne.n	8006ca8 <_printf_common+0xac>
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca8:	3501      	adds	r5, #1
 8006caa:	e7c6      	b.n	8006c3a <_printf_common+0x3e>
 8006cac:	18e1      	adds	r1, r4, r3
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	2030      	movs	r0, #48	; 0x30
 8006cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cb6:	4422      	add	r2, r4
 8006cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cc0:	3302      	adds	r3, #2
 8006cc2:	e7c7      	b.n	8006c54 <_printf_common+0x58>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4622      	mov	r2, r4
 8006cc8:	4649      	mov	r1, r9
 8006cca:	4638      	mov	r0, r7
 8006ccc:	47c0      	blx	r8
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d0e6      	beq.n	8006ca0 <_printf_common+0xa4>
 8006cd2:	3601      	adds	r6, #1
 8006cd4:	e7d9      	b.n	8006c8a <_printf_common+0x8e>
	...

08006cd8 <_printf_i>:
 8006cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cdc:	7e0f      	ldrb	r7, [r1, #24]
 8006cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ce0:	2f78      	cmp	r7, #120	; 0x78
 8006ce2:	4691      	mov	r9, r2
 8006ce4:	4680      	mov	r8, r0
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	469a      	mov	sl, r3
 8006cea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cee:	d807      	bhi.n	8006d00 <_printf_i+0x28>
 8006cf0:	2f62      	cmp	r7, #98	; 0x62
 8006cf2:	d80a      	bhi.n	8006d0a <_printf_i+0x32>
 8006cf4:	2f00      	cmp	r7, #0
 8006cf6:	f000 80d8 	beq.w	8006eaa <_printf_i+0x1d2>
 8006cfa:	2f58      	cmp	r7, #88	; 0x58
 8006cfc:	f000 80a3 	beq.w	8006e46 <_printf_i+0x16e>
 8006d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d08:	e03a      	b.n	8006d80 <_printf_i+0xa8>
 8006d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d0e:	2b15      	cmp	r3, #21
 8006d10:	d8f6      	bhi.n	8006d00 <_printf_i+0x28>
 8006d12:	a101      	add	r1, pc, #4	; (adr r1, 8006d18 <_printf_i+0x40>)
 8006d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d18:	08006d71 	.word	0x08006d71
 8006d1c:	08006d85 	.word	0x08006d85
 8006d20:	08006d01 	.word	0x08006d01
 8006d24:	08006d01 	.word	0x08006d01
 8006d28:	08006d01 	.word	0x08006d01
 8006d2c:	08006d01 	.word	0x08006d01
 8006d30:	08006d85 	.word	0x08006d85
 8006d34:	08006d01 	.word	0x08006d01
 8006d38:	08006d01 	.word	0x08006d01
 8006d3c:	08006d01 	.word	0x08006d01
 8006d40:	08006d01 	.word	0x08006d01
 8006d44:	08006e91 	.word	0x08006e91
 8006d48:	08006db5 	.word	0x08006db5
 8006d4c:	08006e73 	.word	0x08006e73
 8006d50:	08006d01 	.word	0x08006d01
 8006d54:	08006d01 	.word	0x08006d01
 8006d58:	08006eb3 	.word	0x08006eb3
 8006d5c:	08006d01 	.word	0x08006d01
 8006d60:	08006db5 	.word	0x08006db5
 8006d64:	08006d01 	.word	0x08006d01
 8006d68:	08006d01 	.word	0x08006d01
 8006d6c:	08006e7b 	.word	0x08006e7b
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	1d1a      	adds	r2, r3, #4
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	602a      	str	r2, [r5, #0]
 8006d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0a3      	b.n	8006ecc <_printf_i+0x1f4>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	6829      	ldr	r1, [r5, #0]
 8006d88:	0606      	lsls	r6, r0, #24
 8006d8a:	f101 0304 	add.w	r3, r1, #4
 8006d8e:	d50a      	bpl.n	8006da6 <_printf_i+0xce>
 8006d90:	680e      	ldr	r6, [r1, #0]
 8006d92:	602b      	str	r3, [r5, #0]
 8006d94:	2e00      	cmp	r6, #0
 8006d96:	da03      	bge.n	8006da0 <_printf_i+0xc8>
 8006d98:	232d      	movs	r3, #45	; 0x2d
 8006d9a:	4276      	negs	r6, r6
 8006d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da0:	485e      	ldr	r0, [pc, #376]	; (8006f1c <_printf_i+0x244>)
 8006da2:	230a      	movs	r3, #10
 8006da4:	e019      	b.n	8006dda <_printf_i+0x102>
 8006da6:	680e      	ldr	r6, [r1, #0]
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006dae:	bf18      	it	ne
 8006db0:	b236      	sxthne	r6, r6
 8006db2:	e7ef      	b.n	8006d94 <_printf_i+0xbc>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	6820      	ldr	r0, [r4, #0]
 8006db8:	1d19      	adds	r1, r3, #4
 8006dba:	6029      	str	r1, [r5, #0]
 8006dbc:	0601      	lsls	r1, r0, #24
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_i+0xec>
 8006dc0:	681e      	ldr	r6, [r3, #0]
 8006dc2:	e002      	b.n	8006dca <_printf_i+0xf2>
 8006dc4:	0646      	lsls	r6, r0, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_printf_i+0xe8>
 8006dc8:	881e      	ldrh	r6, [r3, #0]
 8006dca:	4854      	ldr	r0, [pc, #336]	; (8006f1c <_printf_i+0x244>)
 8006dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8006dce:	bf0c      	ite	eq
 8006dd0:	2308      	moveq	r3, #8
 8006dd2:	230a      	movne	r3, #10
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dda:	6865      	ldr	r5, [r4, #4]
 8006ddc:	60a5      	str	r5, [r4, #8]
 8006dde:	2d00      	cmp	r5, #0
 8006de0:	bfa2      	ittt	ge
 8006de2:	6821      	ldrge	r1, [r4, #0]
 8006de4:	f021 0104 	bicge.w	r1, r1, #4
 8006de8:	6021      	strge	r1, [r4, #0]
 8006dea:	b90e      	cbnz	r6, 8006df0 <_printf_i+0x118>
 8006dec:	2d00      	cmp	r5, #0
 8006dee:	d04d      	beq.n	8006e8c <_printf_i+0x1b4>
 8006df0:	4615      	mov	r5, r2
 8006df2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006df6:	fb03 6711 	mls	r7, r3, r1, r6
 8006dfa:	5dc7      	ldrb	r7, [r0, r7]
 8006dfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e00:	4637      	mov	r7, r6
 8006e02:	42bb      	cmp	r3, r7
 8006e04:	460e      	mov	r6, r1
 8006e06:	d9f4      	bls.n	8006df2 <_printf_i+0x11a>
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d10b      	bne.n	8006e24 <_printf_i+0x14c>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	07de      	lsls	r6, r3, #31
 8006e10:	d508      	bpl.n	8006e24 <_printf_i+0x14c>
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	6861      	ldr	r1, [r4, #4]
 8006e16:	4299      	cmp	r1, r3
 8006e18:	bfde      	ittt	le
 8006e1a:	2330      	movle	r3, #48	; 0x30
 8006e1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e24:	1b52      	subs	r2, r2, r5
 8006e26:	6122      	str	r2, [r4, #16]
 8006e28:	f8cd a000 	str.w	sl, [sp]
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	aa03      	add	r2, sp, #12
 8006e30:	4621      	mov	r1, r4
 8006e32:	4640      	mov	r0, r8
 8006e34:	f7ff fee2 	bl	8006bfc <_printf_common>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d14c      	bne.n	8006ed6 <_printf_i+0x1fe>
 8006e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e40:	b004      	add	sp, #16
 8006e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e46:	4835      	ldr	r0, [pc, #212]	; (8006f1c <_printf_i+0x244>)
 8006e48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e4c:	6829      	ldr	r1, [r5, #0]
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e54:	6029      	str	r1, [r5, #0]
 8006e56:	061d      	lsls	r5, r3, #24
 8006e58:	d514      	bpl.n	8006e84 <_printf_i+0x1ac>
 8006e5a:	07df      	lsls	r7, r3, #31
 8006e5c:	bf44      	itt	mi
 8006e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e62:	6023      	strmi	r3, [r4, #0]
 8006e64:	b91e      	cbnz	r6, 8006e6e <_printf_i+0x196>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	f023 0320 	bic.w	r3, r3, #32
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	2310      	movs	r3, #16
 8006e70:	e7b0      	b.n	8006dd4 <_printf_i+0xfc>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	f043 0320 	orr.w	r3, r3, #32
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	2378      	movs	r3, #120	; 0x78
 8006e7c:	4828      	ldr	r0, [pc, #160]	; (8006f20 <_printf_i+0x248>)
 8006e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e82:	e7e3      	b.n	8006e4c <_printf_i+0x174>
 8006e84:	0659      	lsls	r1, r3, #25
 8006e86:	bf48      	it	mi
 8006e88:	b2b6      	uxthmi	r6, r6
 8006e8a:	e7e6      	b.n	8006e5a <_printf_i+0x182>
 8006e8c:	4615      	mov	r5, r2
 8006e8e:	e7bb      	b.n	8006e08 <_printf_i+0x130>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	6826      	ldr	r6, [r4, #0]
 8006e94:	6961      	ldr	r1, [r4, #20]
 8006e96:	1d18      	adds	r0, r3, #4
 8006e98:	6028      	str	r0, [r5, #0]
 8006e9a:	0635      	lsls	r5, r6, #24
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	d501      	bpl.n	8006ea4 <_printf_i+0x1cc>
 8006ea0:	6019      	str	r1, [r3, #0]
 8006ea2:	e002      	b.n	8006eaa <_printf_i+0x1d2>
 8006ea4:	0670      	lsls	r0, r6, #25
 8006ea6:	d5fb      	bpl.n	8006ea0 <_printf_i+0x1c8>
 8006ea8:	8019      	strh	r1, [r3, #0]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6123      	str	r3, [r4, #16]
 8006eae:	4615      	mov	r5, r2
 8006eb0:	e7ba      	b.n	8006e28 <_printf_i+0x150>
 8006eb2:	682b      	ldr	r3, [r5, #0]
 8006eb4:	1d1a      	adds	r2, r3, #4
 8006eb6:	602a      	str	r2, [r5, #0]
 8006eb8:	681d      	ldr	r5, [r3, #0]
 8006eba:	6862      	ldr	r2, [r4, #4]
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f7f9 fa16 	bl	80002f0 <memchr>
 8006ec4:	b108      	cbz	r0, 8006eca <_printf_i+0x1f2>
 8006ec6:	1b40      	subs	r0, r0, r5
 8006ec8:	6060      	str	r0, [r4, #4]
 8006eca:	6863      	ldr	r3, [r4, #4]
 8006ecc:	6123      	str	r3, [r4, #16]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed4:	e7a8      	b.n	8006e28 <_printf_i+0x150>
 8006ed6:	6923      	ldr	r3, [r4, #16]
 8006ed8:	462a      	mov	r2, r5
 8006eda:	4649      	mov	r1, r9
 8006edc:	4640      	mov	r0, r8
 8006ede:	47d0      	blx	sl
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d0ab      	beq.n	8006e3c <_printf_i+0x164>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	079b      	lsls	r3, r3, #30
 8006ee8:	d413      	bmi.n	8006f12 <_printf_i+0x23a>
 8006eea:	68e0      	ldr	r0, [r4, #12]
 8006eec:	9b03      	ldr	r3, [sp, #12]
 8006eee:	4298      	cmp	r0, r3
 8006ef0:	bfb8      	it	lt
 8006ef2:	4618      	movlt	r0, r3
 8006ef4:	e7a4      	b.n	8006e40 <_printf_i+0x168>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	4632      	mov	r2, r6
 8006efa:	4649      	mov	r1, r9
 8006efc:	4640      	mov	r0, r8
 8006efe:	47d0      	blx	sl
 8006f00:	3001      	adds	r0, #1
 8006f02:	d09b      	beq.n	8006e3c <_printf_i+0x164>
 8006f04:	3501      	adds	r5, #1
 8006f06:	68e3      	ldr	r3, [r4, #12]
 8006f08:	9903      	ldr	r1, [sp, #12]
 8006f0a:	1a5b      	subs	r3, r3, r1
 8006f0c:	42ab      	cmp	r3, r5
 8006f0e:	dcf2      	bgt.n	8006ef6 <_printf_i+0x21e>
 8006f10:	e7eb      	b.n	8006eea <_printf_i+0x212>
 8006f12:	2500      	movs	r5, #0
 8006f14:	f104 0619 	add.w	r6, r4, #25
 8006f18:	e7f5      	b.n	8006f06 <_printf_i+0x22e>
 8006f1a:	bf00      	nop
 8006f1c:	0800920e 	.word	0x0800920e
 8006f20:	0800921f 	.word	0x0800921f

08006f24 <iprintf>:
 8006f24:	b40f      	push	{r0, r1, r2, r3}
 8006f26:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <iprintf+0x2c>)
 8006f28:	b513      	push	{r0, r1, r4, lr}
 8006f2a:	681c      	ldr	r4, [r3, #0]
 8006f2c:	b124      	cbz	r4, 8006f38 <iprintf+0x14>
 8006f2e:	69a3      	ldr	r3, [r4, #24]
 8006f30:	b913      	cbnz	r3, 8006f38 <iprintf+0x14>
 8006f32:	4620      	mov	r0, r4
 8006f34:	f001 f870 	bl	8008018 <__sinit>
 8006f38:	ab05      	add	r3, sp, #20
 8006f3a:	9a04      	ldr	r2, [sp, #16]
 8006f3c:	68a1      	ldr	r1, [r4, #8]
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	4620      	mov	r0, r4
 8006f42:	f001 fe2d 	bl	8008ba0 <_vfiprintf_r>
 8006f46:	b002      	add	sp, #8
 8006f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f4c:	b004      	add	sp, #16
 8006f4e:	4770      	bx	lr
 8006f50:	24000010 	.word	0x24000010

08006f54 <putchar>:
 8006f54:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <putchar+0x28>)
 8006f56:	b513      	push	{r0, r1, r4, lr}
 8006f58:	681c      	ldr	r4, [r3, #0]
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	b134      	cbz	r4, 8006f6c <putchar+0x18>
 8006f5e:	69a3      	ldr	r3, [r4, #24]
 8006f60:	b923      	cbnz	r3, 8006f6c <putchar+0x18>
 8006f62:	9001      	str	r0, [sp, #4]
 8006f64:	4620      	mov	r0, r4
 8006f66:	f001 f857 	bl	8008018 <__sinit>
 8006f6a:	9901      	ldr	r1, [sp, #4]
 8006f6c:	68a2      	ldr	r2, [r4, #8]
 8006f6e:	4620      	mov	r0, r4
 8006f70:	b002      	add	sp, #8
 8006f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f76:	f001 bf43 	b.w	8008e00 <_putc_r>
 8006f7a:	bf00      	nop
 8006f7c:	24000010 	.word	0x24000010

08006f80 <_puts_r>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	460e      	mov	r6, r1
 8006f84:	4605      	mov	r5, r0
 8006f86:	b118      	cbz	r0, 8006f90 <_puts_r+0x10>
 8006f88:	6983      	ldr	r3, [r0, #24]
 8006f8a:	b90b      	cbnz	r3, 8006f90 <_puts_r+0x10>
 8006f8c:	f001 f844 	bl	8008018 <__sinit>
 8006f90:	69ab      	ldr	r3, [r5, #24]
 8006f92:	68ac      	ldr	r4, [r5, #8]
 8006f94:	b913      	cbnz	r3, 8006f9c <_puts_r+0x1c>
 8006f96:	4628      	mov	r0, r5
 8006f98:	f001 f83e 	bl	8008018 <__sinit>
 8006f9c:	4b2c      	ldr	r3, [pc, #176]	; (8007050 <_puts_r+0xd0>)
 8006f9e:	429c      	cmp	r4, r3
 8006fa0:	d120      	bne.n	8006fe4 <_puts_r+0x64>
 8006fa2:	686c      	ldr	r4, [r5, #4]
 8006fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fa6:	07db      	lsls	r3, r3, #31
 8006fa8:	d405      	bmi.n	8006fb6 <_puts_r+0x36>
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	0598      	lsls	r0, r3, #22
 8006fae:	d402      	bmi.n	8006fb6 <_puts_r+0x36>
 8006fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fb2:	f001 f8d4 	bl	800815e <__retarget_lock_acquire_recursive>
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	0719      	lsls	r1, r3, #28
 8006fba:	d51d      	bpl.n	8006ff8 <_puts_r+0x78>
 8006fbc:	6923      	ldr	r3, [r4, #16]
 8006fbe:	b1db      	cbz	r3, 8006ff8 <_puts_r+0x78>
 8006fc0:	3e01      	subs	r6, #1
 8006fc2:	68a3      	ldr	r3, [r4, #8]
 8006fc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	60a3      	str	r3, [r4, #8]
 8006fcc:	bb39      	cbnz	r1, 800701e <_puts_r+0x9e>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da38      	bge.n	8007044 <_puts_r+0xc4>
 8006fd2:	4622      	mov	r2, r4
 8006fd4:	210a      	movs	r1, #10
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f000 f848 	bl	800706c <__swbuf_r>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d011      	beq.n	8007004 <_puts_r+0x84>
 8006fe0:	250a      	movs	r5, #10
 8006fe2:	e011      	b.n	8007008 <_puts_r+0x88>
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <_puts_r+0xd4>)
 8006fe6:	429c      	cmp	r4, r3
 8006fe8:	d101      	bne.n	8006fee <_puts_r+0x6e>
 8006fea:	68ac      	ldr	r4, [r5, #8]
 8006fec:	e7da      	b.n	8006fa4 <_puts_r+0x24>
 8006fee:	4b1a      	ldr	r3, [pc, #104]	; (8007058 <_puts_r+0xd8>)
 8006ff0:	429c      	cmp	r4, r3
 8006ff2:	bf08      	it	eq
 8006ff4:	68ec      	ldreq	r4, [r5, #12]
 8006ff6:	e7d5      	b.n	8006fa4 <_puts_r+0x24>
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f000 f888 	bl	8007110 <__swsetup_r>
 8007000:	2800      	cmp	r0, #0
 8007002:	d0dd      	beq.n	8006fc0 <_puts_r+0x40>
 8007004:	f04f 35ff 	mov.w	r5, #4294967295
 8007008:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800700a:	07da      	lsls	r2, r3, #31
 800700c:	d405      	bmi.n	800701a <_puts_r+0x9a>
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	059b      	lsls	r3, r3, #22
 8007012:	d402      	bmi.n	800701a <_puts_r+0x9a>
 8007014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007016:	f001 f8a3 	bl	8008160 <__retarget_lock_release_recursive>
 800701a:	4628      	mov	r0, r5
 800701c:	bd70      	pop	{r4, r5, r6, pc}
 800701e:	2b00      	cmp	r3, #0
 8007020:	da04      	bge.n	800702c <_puts_r+0xac>
 8007022:	69a2      	ldr	r2, [r4, #24]
 8007024:	429a      	cmp	r2, r3
 8007026:	dc06      	bgt.n	8007036 <_puts_r+0xb6>
 8007028:	290a      	cmp	r1, #10
 800702a:	d004      	beq.n	8007036 <_puts_r+0xb6>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	6022      	str	r2, [r4, #0]
 8007032:	7019      	strb	r1, [r3, #0]
 8007034:	e7c5      	b.n	8006fc2 <_puts_r+0x42>
 8007036:	4622      	mov	r2, r4
 8007038:	4628      	mov	r0, r5
 800703a:	f000 f817 	bl	800706c <__swbuf_r>
 800703e:	3001      	adds	r0, #1
 8007040:	d1bf      	bne.n	8006fc2 <_puts_r+0x42>
 8007042:	e7df      	b.n	8007004 <_puts_r+0x84>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	250a      	movs	r5, #10
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	6022      	str	r2, [r4, #0]
 800704c:	701d      	strb	r5, [r3, #0]
 800704e:	e7db      	b.n	8007008 <_puts_r+0x88>
 8007050:	080092e0 	.word	0x080092e0
 8007054:	08009300 	.word	0x08009300
 8007058:	080092c0 	.word	0x080092c0

0800705c <puts>:
 800705c:	4b02      	ldr	r3, [pc, #8]	; (8007068 <puts+0xc>)
 800705e:	4601      	mov	r1, r0
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	f7ff bf8d 	b.w	8006f80 <_puts_r>
 8007066:	bf00      	nop
 8007068:	24000010 	.word	0x24000010

0800706c <__swbuf_r>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	460e      	mov	r6, r1
 8007070:	4614      	mov	r4, r2
 8007072:	4605      	mov	r5, r0
 8007074:	b118      	cbz	r0, 800707e <__swbuf_r+0x12>
 8007076:	6983      	ldr	r3, [r0, #24]
 8007078:	b90b      	cbnz	r3, 800707e <__swbuf_r+0x12>
 800707a:	f000 ffcd 	bl	8008018 <__sinit>
 800707e:	4b21      	ldr	r3, [pc, #132]	; (8007104 <__swbuf_r+0x98>)
 8007080:	429c      	cmp	r4, r3
 8007082:	d12b      	bne.n	80070dc <__swbuf_r+0x70>
 8007084:	686c      	ldr	r4, [r5, #4]
 8007086:	69a3      	ldr	r3, [r4, #24]
 8007088:	60a3      	str	r3, [r4, #8]
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	071a      	lsls	r2, r3, #28
 800708e:	d52f      	bpl.n	80070f0 <__swbuf_r+0x84>
 8007090:	6923      	ldr	r3, [r4, #16]
 8007092:	b36b      	cbz	r3, 80070f0 <__swbuf_r+0x84>
 8007094:	6923      	ldr	r3, [r4, #16]
 8007096:	6820      	ldr	r0, [r4, #0]
 8007098:	1ac0      	subs	r0, r0, r3
 800709a:	6963      	ldr	r3, [r4, #20]
 800709c:	b2f6      	uxtb	r6, r6
 800709e:	4283      	cmp	r3, r0
 80070a0:	4637      	mov	r7, r6
 80070a2:	dc04      	bgt.n	80070ae <__swbuf_r+0x42>
 80070a4:	4621      	mov	r1, r4
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 ff22 	bl	8007ef0 <_fflush_r>
 80070ac:	bb30      	cbnz	r0, 80070fc <__swbuf_r+0x90>
 80070ae:	68a3      	ldr	r3, [r4, #8]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	60a3      	str	r3, [r4, #8]
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	6022      	str	r2, [r4, #0]
 80070ba:	701e      	strb	r6, [r3, #0]
 80070bc:	6963      	ldr	r3, [r4, #20]
 80070be:	3001      	adds	r0, #1
 80070c0:	4283      	cmp	r3, r0
 80070c2:	d004      	beq.n	80070ce <__swbuf_r+0x62>
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	07db      	lsls	r3, r3, #31
 80070c8:	d506      	bpl.n	80070d8 <__swbuf_r+0x6c>
 80070ca:	2e0a      	cmp	r6, #10
 80070cc:	d104      	bne.n	80070d8 <__swbuf_r+0x6c>
 80070ce:	4621      	mov	r1, r4
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 ff0d 	bl	8007ef0 <_fflush_r>
 80070d6:	b988      	cbnz	r0, 80070fc <__swbuf_r+0x90>
 80070d8:	4638      	mov	r0, r7
 80070da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070dc:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <__swbuf_r+0x9c>)
 80070de:	429c      	cmp	r4, r3
 80070e0:	d101      	bne.n	80070e6 <__swbuf_r+0x7a>
 80070e2:	68ac      	ldr	r4, [r5, #8]
 80070e4:	e7cf      	b.n	8007086 <__swbuf_r+0x1a>
 80070e6:	4b09      	ldr	r3, [pc, #36]	; (800710c <__swbuf_r+0xa0>)
 80070e8:	429c      	cmp	r4, r3
 80070ea:	bf08      	it	eq
 80070ec:	68ec      	ldreq	r4, [r5, #12]
 80070ee:	e7ca      	b.n	8007086 <__swbuf_r+0x1a>
 80070f0:	4621      	mov	r1, r4
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 f80c 	bl	8007110 <__swsetup_r>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d0cb      	beq.n	8007094 <__swbuf_r+0x28>
 80070fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007100:	e7ea      	b.n	80070d8 <__swbuf_r+0x6c>
 8007102:	bf00      	nop
 8007104:	080092e0 	.word	0x080092e0
 8007108:	08009300 	.word	0x08009300
 800710c:	080092c0 	.word	0x080092c0

08007110 <__swsetup_r>:
 8007110:	4b32      	ldr	r3, [pc, #200]	; (80071dc <__swsetup_r+0xcc>)
 8007112:	b570      	push	{r4, r5, r6, lr}
 8007114:	681d      	ldr	r5, [r3, #0]
 8007116:	4606      	mov	r6, r0
 8007118:	460c      	mov	r4, r1
 800711a:	b125      	cbz	r5, 8007126 <__swsetup_r+0x16>
 800711c:	69ab      	ldr	r3, [r5, #24]
 800711e:	b913      	cbnz	r3, 8007126 <__swsetup_r+0x16>
 8007120:	4628      	mov	r0, r5
 8007122:	f000 ff79 	bl	8008018 <__sinit>
 8007126:	4b2e      	ldr	r3, [pc, #184]	; (80071e0 <__swsetup_r+0xd0>)
 8007128:	429c      	cmp	r4, r3
 800712a:	d10f      	bne.n	800714c <__swsetup_r+0x3c>
 800712c:	686c      	ldr	r4, [r5, #4]
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007134:	0719      	lsls	r1, r3, #28
 8007136:	d42c      	bmi.n	8007192 <__swsetup_r+0x82>
 8007138:	06dd      	lsls	r5, r3, #27
 800713a:	d411      	bmi.n	8007160 <__swsetup_r+0x50>
 800713c:	2309      	movs	r3, #9
 800713e:	6033      	str	r3, [r6, #0]
 8007140:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	f04f 30ff 	mov.w	r0, #4294967295
 800714a:	e03e      	b.n	80071ca <__swsetup_r+0xba>
 800714c:	4b25      	ldr	r3, [pc, #148]	; (80071e4 <__swsetup_r+0xd4>)
 800714e:	429c      	cmp	r4, r3
 8007150:	d101      	bne.n	8007156 <__swsetup_r+0x46>
 8007152:	68ac      	ldr	r4, [r5, #8]
 8007154:	e7eb      	b.n	800712e <__swsetup_r+0x1e>
 8007156:	4b24      	ldr	r3, [pc, #144]	; (80071e8 <__swsetup_r+0xd8>)
 8007158:	429c      	cmp	r4, r3
 800715a:	bf08      	it	eq
 800715c:	68ec      	ldreq	r4, [r5, #12]
 800715e:	e7e6      	b.n	800712e <__swsetup_r+0x1e>
 8007160:	0758      	lsls	r0, r3, #29
 8007162:	d512      	bpl.n	800718a <__swsetup_r+0x7a>
 8007164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007166:	b141      	cbz	r1, 800717a <__swsetup_r+0x6a>
 8007168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800716c:	4299      	cmp	r1, r3
 800716e:	d002      	beq.n	8007176 <__swsetup_r+0x66>
 8007170:	4630      	mov	r0, r6
 8007172:	f001 fc0b 	bl	800898c <_free_r>
 8007176:	2300      	movs	r3, #0
 8007178:	6363      	str	r3, [r4, #52]	; 0x34
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	2300      	movs	r3, #0
 8007184:	6063      	str	r3, [r4, #4]
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	f043 0308 	orr.w	r3, r3, #8
 8007190:	81a3      	strh	r3, [r4, #12]
 8007192:	6923      	ldr	r3, [r4, #16]
 8007194:	b94b      	cbnz	r3, 80071aa <__swsetup_r+0x9a>
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800719c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a0:	d003      	beq.n	80071aa <__swsetup_r+0x9a>
 80071a2:	4621      	mov	r1, r4
 80071a4:	4630      	mov	r0, r6
 80071a6:	f001 f801 	bl	80081ac <__smakebuf_r>
 80071aa:	89a0      	ldrh	r0, [r4, #12]
 80071ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071b0:	f010 0301 	ands.w	r3, r0, #1
 80071b4:	d00a      	beq.n	80071cc <__swsetup_r+0xbc>
 80071b6:	2300      	movs	r3, #0
 80071b8:	60a3      	str	r3, [r4, #8]
 80071ba:	6963      	ldr	r3, [r4, #20]
 80071bc:	425b      	negs	r3, r3
 80071be:	61a3      	str	r3, [r4, #24]
 80071c0:	6923      	ldr	r3, [r4, #16]
 80071c2:	b943      	cbnz	r3, 80071d6 <__swsetup_r+0xc6>
 80071c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071c8:	d1ba      	bne.n	8007140 <__swsetup_r+0x30>
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	0781      	lsls	r1, r0, #30
 80071ce:	bf58      	it	pl
 80071d0:	6963      	ldrpl	r3, [r4, #20]
 80071d2:	60a3      	str	r3, [r4, #8]
 80071d4:	e7f4      	b.n	80071c0 <__swsetup_r+0xb0>
 80071d6:	2000      	movs	r0, #0
 80071d8:	e7f7      	b.n	80071ca <__swsetup_r+0xba>
 80071da:	bf00      	nop
 80071dc:	24000010 	.word	0x24000010
 80071e0:	080092e0 	.word	0x080092e0
 80071e4:	08009300 	.word	0x08009300
 80071e8:	080092c0 	.word	0x080092c0

080071ec <quorem>:
 80071ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	6903      	ldr	r3, [r0, #16]
 80071f2:	690c      	ldr	r4, [r1, #16]
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	4607      	mov	r7, r0
 80071f8:	f2c0 8081 	blt.w	80072fe <quorem+0x112>
 80071fc:	3c01      	subs	r4, #1
 80071fe:	f101 0814 	add.w	r8, r1, #20
 8007202:	f100 0514 	add.w	r5, r0, #20
 8007206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007210:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007214:	3301      	adds	r3, #1
 8007216:	429a      	cmp	r2, r3
 8007218:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800721c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007220:	fbb2 f6f3 	udiv	r6, r2, r3
 8007224:	d331      	bcc.n	800728a <quorem+0x9e>
 8007226:	f04f 0e00 	mov.w	lr, #0
 800722a:	4640      	mov	r0, r8
 800722c:	46ac      	mov	ip, r5
 800722e:	46f2      	mov	sl, lr
 8007230:	f850 2b04 	ldr.w	r2, [r0], #4
 8007234:	b293      	uxth	r3, r2
 8007236:	fb06 e303 	mla	r3, r6, r3, lr
 800723a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800723e:	b29b      	uxth	r3, r3
 8007240:	ebaa 0303 	sub.w	r3, sl, r3
 8007244:	f8dc a000 	ldr.w	sl, [ip]
 8007248:	0c12      	lsrs	r2, r2, #16
 800724a:	fa13 f38a 	uxtah	r3, r3, sl
 800724e:	fb06 e202 	mla	r2, r6, r2, lr
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	9b00      	ldr	r3, [sp, #0]
 8007256:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800725a:	b292      	uxth	r2, r2
 800725c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007264:	f8bd 3000 	ldrh.w	r3, [sp]
 8007268:	4581      	cmp	r9, r0
 800726a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800726e:	f84c 3b04 	str.w	r3, [ip], #4
 8007272:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007276:	d2db      	bcs.n	8007230 <quorem+0x44>
 8007278:	f855 300b 	ldr.w	r3, [r5, fp]
 800727c:	b92b      	cbnz	r3, 800728a <quorem+0x9e>
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	3b04      	subs	r3, #4
 8007282:	429d      	cmp	r5, r3
 8007284:	461a      	mov	r2, r3
 8007286:	d32e      	bcc.n	80072e6 <quorem+0xfa>
 8007288:	613c      	str	r4, [r7, #16]
 800728a:	4638      	mov	r0, r7
 800728c:	f001 fa66 	bl	800875c <__mcmp>
 8007290:	2800      	cmp	r0, #0
 8007292:	db24      	blt.n	80072de <quorem+0xf2>
 8007294:	3601      	adds	r6, #1
 8007296:	4628      	mov	r0, r5
 8007298:	f04f 0c00 	mov.w	ip, #0
 800729c:	f858 2b04 	ldr.w	r2, [r8], #4
 80072a0:	f8d0 e000 	ldr.w	lr, [r0]
 80072a4:	b293      	uxth	r3, r2
 80072a6:	ebac 0303 	sub.w	r3, ip, r3
 80072aa:	0c12      	lsrs	r2, r2, #16
 80072ac:	fa13 f38e 	uxtah	r3, r3, lr
 80072b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80072b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072be:	45c1      	cmp	r9, r8
 80072c0:	f840 3b04 	str.w	r3, [r0], #4
 80072c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072c8:	d2e8      	bcs.n	800729c <quorem+0xb0>
 80072ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072d2:	b922      	cbnz	r2, 80072de <quorem+0xf2>
 80072d4:	3b04      	subs	r3, #4
 80072d6:	429d      	cmp	r5, r3
 80072d8:	461a      	mov	r2, r3
 80072da:	d30a      	bcc.n	80072f2 <quorem+0x106>
 80072dc:	613c      	str	r4, [r7, #16]
 80072de:	4630      	mov	r0, r6
 80072e0:	b003      	add	sp, #12
 80072e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	3b04      	subs	r3, #4
 80072ea:	2a00      	cmp	r2, #0
 80072ec:	d1cc      	bne.n	8007288 <quorem+0x9c>
 80072ee:	3c01      	subs	r4, #1
 80072f0:	e7c7      	b.n	8007282 <quorem+0x96>
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	3b04      	subs	r3, #4
 80072f6:	2a00      	cmp	r2, #0
 80072f8:	d1f0      	bne.n	80072dc <quorem+0xf0>
 80072fa:	3c01      	subs	r4, #1
 80072fc:	e7eb      	b.n	80072d6 <quorem+0xea>
 80072fe:	2000      	movs	r0, #0
 8007300:	e7ee      	b.n	80072e0 <quorem+0xf4>
 8007302:	0000      	movs	r0, r0
 8007304:	0000      	movs	r0, r0
	...

08007308 <_dtoa_r>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	ed2d 8b02 	vpush	{d8}
 8007310:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007312:	b091      	sub	sp, #68	; 0x44
 8007314:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007318:	ec59 8b10 	vmov	r8, r9, d0
 800731c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800731e:	9106      	str	r1, [sp, #24]
 8007320:	4606      	mov	r6, r0
 8007322:	9208      	str	r2, [sp, #32]
 8007324:	930c      	str	r3, [sp, #48]	; 0x30
 8007326:	b975      	cbnz	r5, 8007346 <_dtoa_r+0x3e>
 8007328:	2010      	movs	r0, #16
 800732a:	f000 ff7f 	bl	800822c <malloc>
 800732e:	4602      	mov	r2, r0
 8007330:	6270      	str	r0, [r6, #36]	; 0x24
 8007332:	b920      	cbnz	r0, 800733e <_dtoa_r+0x36>
 8007334:	4baa      	ldr	r3, [pc, #680]	; (80075e0 <_dtoa_r+0x2d8>)
 8007336:	21ea      	movs	r1, #234	; 0xea
 8007338:	48aa      	ldr	r0, [pc, #680]	; (80075e4 <_dtoa_r+0x2dc>)
 800733a:	f001 fe0f 	bl	8008f5c <__assert_func>
 800733e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007342:	6005      	str	r5, [r0, #0]
 8007344:	60c5      	str	r5, [r0, #12]
 8007346:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007348:	6819      	ldr	r1, [r3, #0]
 800734a:	b151      	cbz	r1, 8007362 <_dtoa_r+0x5a>
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	604a      	str	r2, [r1, #4]
 8007350:	2301      	movs	r3, #1
 8007352:	4093      	lsls	r3, r2
 8007354:	608b      	str	r3, [r1, #8]
 8007356:	4630      	mov	r0, r6
 8007358:	f000 ffbe 	bl	80082d8 <_Bfree>
 800735c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	f1b9 0300 	subs.w	r3, r9, #0
 8007366:	bfbb      	ittet	lt
 8007368:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800736c:	9303      	strlt	r3, [sp, #12]
 800736e:	2300      	movge	r3, #0
 8007370:	2201      	movlt	r2, #1
 8007372:	bfac      	ite	ge
 8007374:	6023      	strge	r3, [r4, #0]
 8007376:	6022      	strlt	r2, [r4, #0]
 8007378:	4b9b      	ldr	r3, [pc, #620]	; (80075e8 <_dtoa_r+0x2e0>)
 800737a:	9c03      	ldr	r4, [sp, #12]
 800737c:	43a3      	bics	r3, r4
 800737e:	d11c      	bne.n	80073ba <_dtoa_r+0xb2>
 8007380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007382:	f242 730f 	movw	r3, #9999	; 0x270f
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800738c:	ea53 0308 	orrs.w	r3, r3, r8
 8007390:	f000 84fd 	beq.w	8007d8e <_dtoa_r+0xa86>
 8007394:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007396:	b963      	cbnz	r3, 80073b2 <_dtoa_r+0xaa>
 8007398:	4b94      	ldr	r3, [pc, #592]	; (80075ec <_dtoa_r+0x2e4>)
 800739a:	e01f      	b.n	80073dc <_dtoa_r+0xd4>
 800739c:	4b94      	ldr	r3, [pc, #592]	; (80075f0 <_dtoa_r+0x2e8>)
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	3308      	adds	r3, #8
 80073a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	9801      	ldr	r0, [sp, #4]
 80073a8:	b011      	add	sp, #68	; 0x44
 80073aa:	ecbd 8b02 	vpop	{d8}
 80073ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b2:	4b8e      	ldr	r3, [pc, #568]	; (80075ec <_dtoa_r+0x2e4>)
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	3303      	adds	r3, #3
 80073b8:	e7f3      	b.n	80073a2 <_dtoa_r+0x9a>
 80073ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80073be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c6:	d10b      	bne.n	80073e0 <_dtoa_r+0xd8>
 80073c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073ca:	2301      	movs	r3, #1
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 84d9 	beq.w	8007d88 <_dtoa_r+0xa80>
 80073d6:	4887      	ldr	r0, [pc, #540]	; (80075f4 <_dtoa_r+0x2ec>)
 80073d8:	6018      	str	r0, [r3, #0]
 80073da:	1e43      	subs	r3, r0, #1
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	e7e2      	b.n	80073a6 <_dtoa_r+0x9e>
 80073e0:	a90f      	add	r1, sp, #60	; 0x3c
 80073e2:	aa0e      	add	r2, sp, #56	; 0x38
 80073e4:	4630      	mov	r0, r6
 80073e6:	eeb0 0b48 	vmov.f64	d0, d8
 80073ea:	f001 fa5d 	bl	80088a8 <__d2b>
 80073ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80073f2:	4605      	mov	r5, r0
 80073f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80073f6:	2900      	cmp	r1, #0
 80073f8:	d046      	beq.n	8007488 <_dtoa_r+0x180>
 80073fa:	ee18 4a90 	vmov	r4, s17
 80073fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007402:	ec53 2b18 	vmov	r2, r3, d8
 8007406:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800740a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800740e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007412:	2400      	movs	r4, #0
 8007414:	ec43 2b16 	vmov	d6, r2, r3
 8007418:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800741c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80075c8 <_dtoa_r+0x2c0>
 8007420:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007424:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80075d0 <_dtoa_r+0x2c8>
 8007428:	eea7 6b05 	vfma.f64	d6, d7, d5
 800742c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80075d8 <_dtoa_r+0x2d0>
 8007430:	ee07 1a90 	vmov	s15, r1
 8007434:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007438:	eeb0 7b46 	vmov.f64	d7, d6
 800743c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007440:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007444:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744c:	ee16 ba90 	vmov	fp, s13
 8007450:	940a      	str	r4, [sp, #40]	; 0x28
 8007452:	d508      	bpl.n	8007466 <_dtoa_r+0x15e>
 8007454:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007458:	eeb4 6b47 	vcmp.f64	d6, d7
 800745c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007460:	bf18      	it	ne
 8007462:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007466:	f1bb 0f16 	cmp.w	fp, #22
 800746a:	d82f      	bhi.n	80074cc <_dtoa_r+0x1c4>
 800746c:	4b62      	ldr	r3, [pc, #392]	; (80075f8 <_dtoa_r+0x2f0>)
 800746e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007472:	ed93 7b00 	vldr	d7, [r3]
 8007476:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	d501      	bpl.n	8007484 <_dtoa_r+0x17c>
 8007480:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007484:	2300      	movs	r3, #0
 8007486:	e022      	b.n	80074ce <_dtoa_r+0x1c6>
 8007488:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800748a:	4401      	add	r1, r0
 800748c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007490:	2b20      	cmp	r3, #32
 8007492:	bfc1      	itttt	gt
 8007494:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007498:	fa04 f303 	lslgt.w	r3, r4, r3
 800749c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80074a0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80074a4:	bfd6      	itet	le
 80074a6:	f1c3 0320 	rsble	r3, r3, #32
 80074aa:	ea43 0808 	orrgt.w	r8, r3, r8
 80074ae:	fa08 f803 	lslle.w	r8, r8, r3
 80074b2:	ee07 8a90 	vmov	s15, r8
 80074b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80074ba:	3901      	subs	r1, #1
 80074bc:	ee17 4a90 	vmov	r4, s15
 80074c0:	ec53 2b17 	vmov	r2, r3, d7
 80074c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80074c8:	2401      	movs	r4, #1
 80074ca:	e7a3      	b.n	8007414 <_dtoa_r+0x10c>
 80074cc:	2301      	movs	r3, #1
 80074ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d0:	1a43      	subs	r3, r0, r1
 80074d2:	1e5a      	subs	r2, r3, #1
 80074d4:	bf45      	ittet	mi
 80074d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80074da:	9304      	strmi	r3, [sp, #16]
 80074dc:	2300      	movpl	r3, #0
 80074de:	2300      	movmi	r3, #0
 80074e0:	9205      	str	r2, [sp, #20]
 80074e2:	bf54      	ite	pl
 80074e4:	9304      	strpl	r3, [sp, #16]
 80074e6:	9305      	strmi	r3, [sp, #20]
 80074e8:	f1bb 0f00 	cmp.w	fp, #0
 80074ec:	db18      	blt.n	8007520 <_dtoa_r+0x218>
 80074ee:	9b05      	ldr	r3, [sp, #20]
 80074f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80074f4:	445b      	add	r3, fp
 80074f6:	9305      	str	r3, [sp, #20]
 80074f8:	2300      	movs	r3, #0
 80074fa:	9a06      	ldr	r2, [sp, #24]
 80074fc:	2a09      	cmp	r2, #9
 80074fe:	d849      	bhi.n	8007594 <_dtoa_r+0x28c>
 8007500:	2a05      	cmp	r2, #5
 8007502:	bfc4      	itt	gt
 8007504:	3a04      	subgt	r2, #4
 8007506:	9206      	strgt	r2, [sp, #24]
 8007508:	9a06      	ldr	r2, [sp, #24]
 800750a:	f1a2 0202 	sub.w	r2, r2, #2
 800750e:	bfcc      	ite	gt
 8007510:	2400      	movgt	r4, #0
 8007512:	2401      	movle	r4, #1
 8007514:	2a03      	cmp	r2, #3
 8007516:	d848      	bhi.n	80075aa <_dtoa_r+0x2a2>
 8007518:	e8df f002 	tbb	[pc, r2]
 800751c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007520:	9b04      	ldr	r3, [sp, #16]
 8007522:	2200      	movs	r2, #0
 8007524:	eba3 030b 	sub.w	r3, r3, fp
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	9209      	str	r2, [sp, #36]	; 0x24
 800752c:	f1cb 0300 	rsb	r3, fp, #0
 8007530:	e7e3      	b.n	80074fa <_dtoa_r+0x1f2>
 8007532:	2200      	movs	r2, #0
 8007534:	9207      	str	r2, [sp, #28]
 8007536:	9a08      	ldr	r2, [sp, #32]
 8007538:	2a00      	cmp	r2, #0
 800753a:	dc39      	bgt.n	80075b0 <_dtoa_r+0x2a8>
 800753c:	f04f 0a01 	mov.w	sl, #1
 8007540:	46d1      	mov	r9, sl
 8007542:	4652      	mov	r2, sl
 8007544:	f8cd a020 	str.w	sl, [sp, #32]
 8007548:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800754a:	2100      	movs	r1, #0
 800754c:	6079      	str	r1, [r7, #4]
 800754e:	2004      	movs	r0, #4
 8007550:	f100 0c14 	add.w	ip, r0, #20
 8007554:	4594      	cmp	ip, r2
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	d92f      	bls.n	80075ba <_dtoa_r+0x2b2>
 800755a:	4630      	mov	r0, r6
 800755c:	930d      	str	r3, [sp, #52]	; 0x34
 800755e:	f000 fe7b 	bl	8008258 <_Balloc>
 8007562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007564:	9001      	str	r0, [sp, #4]
 8007566:	4602      	mov	r2, r0
 8007568:	2800      	cmp	r0, #0
 800756a:	d149      	bne.n	8007600 <_dtoa_r+0x2f8>
 800756c:	4b23      	ldr	r3, [pc, #140]	; (80075fc <_dtoa_r+0x2f4>)
 800756e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007572:	e6e1      	b.n	8007338 <_dtoa_r+0x30>
 8007574:	2201      	movs	r2, #1
 8007576:	e7dd      	b.n	8007534 <_dtoa_r+0x22c>
 8007578:	2200      	movs	r2, #0
 800757a:	9207      	str	r2, [sp, #28]
 800757c:	9a08      	ldr	r2, [sp, #32]
 800757e:	eb0b 0a02 	add.w	sl, fp, r2
 8007582:	f10a 0901 	add.w	r9, sl, #1
 8007586:	464a      	mov	r2, r9
 8007588:	2a01      	cmp	r2, #1
 800758a:	bfb8      	it	lt
 800758c:	2201      	movlt	r2, #1
 800758e:	e7db      	b.n	8007548 <_dtoa_r+0x240>
 8007590:	2201      	movs	r2, #1
 8007592:	e7f2      	b.n	800757a <_dtoa_r+0x272>
 8007594:	2401      	movs	r4, #1
 8007596:	2200      	movs	r2, #0
 8007598:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800759c:	f04f 3aff 	mov.w	sl, #4294967295
 80075a0:	2100      	movs	r1, #0
 80075a2:	46d1      	mov	r9, sl
 80075a4:	2212      	movs	r2, #18
 80075a6:	9108      	str	r1, [sp, #32]
 80075a8:	e7ce      	b.n	8007548 <_dtoa_r+0x240>
 80075aa:	2201      	movs	r2, #1
 80075ac:	9207      	str	r2, [sp, #28]
 80075ae:	e7f5      	b.n	800759c <_dtoa_r+0x294>
 80075b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80075b4:	46d1      	mov	r9, sl
 80075b6:	4652      	mov	r2, sl
 80075b8:	e7c6      	b.n	8007548 <_dtoa_r+0x240>
 80075ba:	3101      	adds	r1, #1
 80075bc:	6079      	str	r1, [r7, #4]
 80075be:	0040      	lsls	r0, r0, #1
 80075c0:	e7c6      	b.n	8007550 <_dtoa_r+0x248>
 80075c2:	bf00      	nop
 80075c4:	f3af 8000 	nop.w
 80075c8:	636f4361 	.word	0x636f4361
 80075cc:	3fd287a7 	.word	0x3fd287a7
 80075d0:	8b60c8b3 	.word	0x8b60c8b3
 80075d4:	3fc68a28 	.word	0x3fc68a28
 80075d8:	509f79fb 	.word	0x509f79fb
 80075dc:	3fd34413 	.word	0x3fd34413
 80075e0:	0800923d 	.word	0x0800923d
 80075e4:	08009254 	.word	0x08009254
 80075e8:	7ff00000 	.word	0x7ff00000
 80075ec:	08009239 	.word	0x08009239
 80075f0:	08009230 	.word	0x08009230
 80075f4:	0800920d 	.word	0x0800920d
 80075f8:	080093a8 	.word	0x080093a8
 80075fc:	080092af 	.word	0x080092af
 8007600:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007602:	9901      	ldr	r1, [sp, #4]
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	f1b9 0f0e 	cmp.w	r9, #14
 800760a:	d86c      	bhi.n	80076e6 <_dtoa_r+0x3de>
 800760c:	2c00      	cmp	r4, #0
 800760e:	d06a      	beq.n	80076e6 <_dtoa_r+0x3de>
 8007610:	f1bb 0f00 	cmp.w	fp, #0
 8007614:	f340 80a0 	ble.w	8007758 <_dtoa_r+0x450>
 8007618:	49c1      	ldr	r1, [pc, #772]	; (8007920 <_dtoa_r+0x618>)
 800761a:	f00b 020f 	and.w	r2, fp, #15
 800761e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007622:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007626:	ed92 7b00 	vldr	d7, [r2]
 800762a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800762e:	f000 8087 	beq.w	8007740 <_dtoa_r+0x438>
 8007632:	4abc      	ldr	r2, [pc, #752]	; (8007924 <_dtoa_r+0x61c>)
 8007634:	ed92 6b08 	vldr	d6, [r2, #32]
 8007638:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800763c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007640:	f001 010f 	and.w	r1, r1, #15
 8007644:	2203      	movs	r2, #3
 8007646:	48b7      	ldr	r0, [pc, #732]	; (8007924 <_dtoa_r+0x61c>)
 8007648:	2900      	cmp	r1, #0
 800764a:	d17b      	bne.n	8007744 <_dtoa_r+0x43c>
 800764c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007650:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007654:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007658:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800765a:	2900      	cmp	r1, #0
 800765c:	f000 80a2 	beq.w	80077a4 <_dtoa_r+0x49c>
 8007660:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007664:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007668:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007670:	f140 8098 	bpl.w	80077a4 <_dtoa_r+0x49c>
 8007674:	f1b9 0f00 	cmp.w	r9, #0
 8007678:	f000 8094 	beq.w	80077a4 <_dtoa_r+0x49c>
 800767c:	f1ba 0f00 	cmp.w	sl, #0
 8007680:	dd2f      	ble.n	80076e2 <_dtoa_r+0x3da>
 8007682:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007686:	ee27 7b06 	vmul.f64	d7, d7, d6
 800768a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800768e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007692:	3201      	adds	r2, #1
 8007694:	4650      	mov	r0, sl
 8007696:	ed9d 6b02 	vldr	d6, [sp, #8]
 800769a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800769e:	ee07 2a90 	vmov	s15, r2
 80076a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80076a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80076aa:	ee15 4a90 	vmov	r4, s11
 80076ae:	ec52 1b15 	vmov	r1, r2, d5
 80076b2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d177      	bne.n	80077aa <_dtoa_r+0x4a2>
 80076ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80076be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80076c2:	ec42 1b17 	vmov	d7, r1, r2
 80076c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ce:	f300 8263 	bgt.w	8007b98 <_dtoa_r+0x890>
 80076d2:	eeb1 7b47 	vneg.f64	d7, d7
 80076d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076de:	f100 8258 	bmi.w	8007b92 <_dtoa_r+0x88a>
 80076e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80076e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	f2c0 811d 	blt.w	8007928 <_dtoa_r+0x620>
 80076ee:	f1bb 0f0e 	cmp.w	fp, #14
 80076f2:	f300 8119 	bgt.w	8007928 <_dtoa_r+0x620>
 80076f6:	4b8a      	ldr	r3, [pc, #552]	; (8007920 <_dtoa_r+0x618>)
 80076f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076fc:	ed93 6b00 	vldr	d6, [r3]
 8007700:	9b08      	ldr	r3, [sp, #32]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f280 80b7 	bge.w	8007876 <_dtoa_r+0x56e>
 8007708:	f1b9 0f00 	cmp.w	r9, #0
 800770c:	f300 80b3 	bgt.w	8007876 <_dtoa_r+0x56e>
 8007710:	f040 823f 	bne.w	8007b92 <_dtoa_r+0x88a>
 8007714:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007718:	ee26 6b07 	vmul.f64	d6, d6, d7
 800771c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007720:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007728:	464c      	mov	r4, r9
 800772a:	464f      	mov	r7, r9
 800772c:	f280 8215 	bge.w	8007b5a <_dtoa_r+0x852>
 8007730:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007734:	2331      	movs	r3, #49	; 0x31
 8007736:	f808 3b01 	strb.w	r3, [r8], #1
 800773a:	f10b 0b01 	add.w	fp, fp, #1
 800773e:	e211      	b.n	8007b64 <_dtoa_r+0x85c>
 8007740:	2202      	movs	r2, #2
 8007742:	e780      	b.n	8007646 <_dtoa_r+0x33e>
 8007744:	07cc      	lsls	r4, r1, #31
 8007746:	d504      	bpl.n	8007752 <_dtoa_r+0x44a>
 8007748:	ed90 6b00 	vldr	d6, [r0]
 800774c:	3201      	adds	r2, #1
 800774e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007752:	1049      	asrs	r1, r1, #1
 8007754:	3008      	adds	r0, #8
 8007756:	e777      	b.n	8007648 <_dtoa_r+0x340>
 8007758:	d022      	beq.n	80077a0 <_dtoa_r+0x498>
 800775a:	f1cb 0100 	rsb	r1, fp, #0
 800775e:	4a70      	ldr	r2, [pc, #448]	; (8007920 <_dtoa_r+0x618>)
 8007760:	f001 000f 	and.w	r0, r1, #15
 8007764:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007768:	ed92 7b00 	vldr	d7, [r2]
 800776c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007770:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007774:	486b      	ldr	r0, [pc, #428]	; (8007924 <_dtoa_r+0x61c>)
 8007776:	1109      	asrs	r1, r1, #4
 8007778:	2400      	movs	r4, #0
 800777a:	2202      	movs	r2, #2
 800777c:	b929      	cbnz	r1, 800778a <_dtoa_r+0x482>
 800777e:	2c00      	cmp	r4, #0
 8007780:	f43f af6a 	beq.w	8007658 <_dtoa_r+0x350>
 8007784:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007788:	e766      	b.n	8007658 <_dtoa_r+0x350>
 800778a:	07cf      	lsls	r7, r1, #31
 800778c:	d505      	bpl.n	800779a <_dtoa_r+0x492>
 800778e:	ed90 6b00 	vldr	d6, [r0]
 8007792:	3201      	adds	r2, #1
 8007794:	2401      	movs	r4, #1
 8007796:	ee27 7b06 	vmul.f64	d7, d7, d6
 800779a:	1049      	asrs	r1, r1, #1
 800779c:	3008      	adds	r0, #8
 800779e:	e7ed      	b.n	800777c <_dtoa_r+0x474>
 80077a0:	2202      	movs	r2, #2
 80077a2:	e759      	b.n	8007658 <_dtoa_r+0x350>
 80077a4:	465f      	mov	r7, fp
 80077a6:	4648      	mov	r0, r9
 80077a8:	e775      	b.n	8007696 <_dtoa_r+0x38e>
 80077aa:	ec42 1b17 	vmov	d7, r1, r2
 80077ae:	4a5c      	ldr	r2, [pc, #368]	; (8007920 <_dtoa_r+0x618>)
 80077b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80077b4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80077b8:	9a01      	ldr	r2, [sp, #4]
 80077ba:	1814      	adds	r4, r2, r0
 80077bc:	9a07      	ldr	r2, [sp, #28]
 80077be:	b352      	cbz	r2, 8007816 <_dtoa_r+0x50e>
 80077c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80077c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80077c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80077cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80077d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80077d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80077d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80077dc:	ee14 2a90 	vmov	r2, s9
 80077e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80077e4:	3230      	adds	r2, #48	; 0x30
 80077e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80077ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f2:	f808 2b01 	strb.w	r2, [r8], #1
 80077f6:	d439      	bmi.n	800786c <_dtoa_r+0x564>
 80077f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80077fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007804:	d472      	bmi.n	80078ec <_dtoa_r+0x5e4>
 8007806:	45a0      	cmp	r8, r4
 8007808:	f43f af6b 	beq.w	80076e2 <_dtoa_r+0x3da>
 800780c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007810:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007814:	e7e0      	b.n	80077d8 <_dtoa_r+0x4d0>
 8007816:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800781a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800781e:	4621      	mov	r1, r4
 8007820:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007824:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007828:	ee14 2a90 	vmov	r2, s9
 800782c:	3230      	adds	r2, #48	; 0x30
 800782e:	f808 2b01 	strb.w	r2, [r8], #1
 8007832:	45a0      	cmp	r8, r4
 8007834:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007838:	ee36 6b45 	vsub.f64	d6, d6, d5
 800783c:	d118      	bne.n	8007870 <_dtoa_r+0x568>
 800783e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007842:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007846:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800784a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784e:	dc4d      	bgt.n	80078ec <_dtoa_r+0x5e4>
 8007850:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007854:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785c:	f57f af41 	bpl.w	80076e2 <_dtoa_r+0x3da>
 8007860:	4688      	mov	r8, r1
 8007862:	3901      	subs	r1, #1
 8007864:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007868:	2b30      	cmp	r3, #48	; 0x30
 800786a:	d0f9      	beq.n	8007860 <_dtoa_r+0x558>
 800786c:	46bb      	mov	fp, r7
 800786e:	e02a      	b.n	80078c6 <_dtoa_r+0x5be>
 8007870:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007874:	e7d6      	b.n	8007824 <_dtoa_r+0x51c>
 8007876:	ed9d 7b02 	vldr	d7, [sp, #8]
 800787a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800787e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007882:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007886:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800788a:	ee15 3a10 	vmov	r3, s10
 800788e:	3330      	adds	r3, #48	; 0x30
 8007890:	f808 3b01 	strb.w	r3, [r8], #1
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	eba8 0303 	sub.w	r3, r8, r3
 800789a:	4599      	cmp	r9, r3
 800789c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80078a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80078a4:	d133      	bne.n	800790e <_dtoa_r+0x606>
 80078a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80078aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80078ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b2:	dc1a      	bgt.n	80078ea <_dtoa_r+0x5e2>
 80078b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80078b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078bc:	d103      	bne.n	80078c6 <_dtoa_r+0x5be>
 80078be:	ee15 3a10 	vmov	r3, s10
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	d411      	bmi.n	80078ea <_dtoa_r+0x5e2>
 80078c6:	4629      	mov	r1, r5
 80078c8:	4630      	mov	r0, r6
 80078ca:	f000 fd05 	bl	80082d8 <_Bfree>
 80078ce:	2300      	movs	r3, #0
 80078d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078d2:	f888 3000 	strb.w	r3, [r8]
 80078d6:	f10b 0301 	add.w	r3, fp, #1
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f43f ad61 	beq.w	80073a6 <_dtoa_r+0x9e>
 80078e4:	f8c3 8000 	str.w	r8, [r3]
 80078e8:	e55d      	b.n	80073a6 <_dtoa_r+0x9e>
 80078ea:	465f      	mov	r7, fp
 80078ec:	4643      	mov	r3, r8
 80078ee:	4698      	mov	r8, r3
 80078f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078f4:	2a39      	cmp	r2, #57	; 0x39
 80078f6:	d106      	bne.n	8007906 <_dtoa_r+0x5fe>
 80078f8:	9a01      	ldr	r2, [sp, #4]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d1f7      	bne.n	80078ee <_dtoa_r+0x5e6>
 80078fe:	9901      	ldr	r1, [sp, #4]
 8007900:	2230      	movs	r2, #48	; 0x30
 8007902:	3701      	adds	r7, #1
 8007904:	700a      	strb	r2, [r1, #0]
 8007906:	781a      	ldrb	r2, [r3, #0]
 8007908:	3201      	adds	r2, #1
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	e7ae      	b.n	800786c <_dtoa_r+0x564>
 800790e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007912:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791a:	d1b2      	bne.n	8007882 <_dtoa_r+0x57a>
 800791c:	e7d3      	b.n	80078c6 <_dtoa_r+0x5be>
 800791e:	bf00      	nop
 8007920:	080093a8 	.word	0x080093a8
 8007924:	08009380 	.word	0x08009380
 8007928:	9907      	ldr	r1, [sp, #28]
 800792a:	2900      	cmp	r1, #0
 800792c:	f000 80d0 	beq.w	8007ad0 <_dtoa_r+0x7c8>
 8007930:	9906      	ldr	r1, [sp, #24]
 8007932:	2901      	cmp	r1, #1
 8007934:	f300 80b4 	bgt.w	8007aa0 <_dtoa_r+0x798>
 8007938:	990a      	ldr	r1, [sp, #40]	; 0x28
 800793a:	2900      	cmp	r1, #0
 800793c:	f000 80ac 	beq.w	8007a98 <_dtoa_r+0x790>
 8007940:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007944:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007948:	461c      	mov	r4, r3
 800794a:	930a      	str	r3, [sp, #40]	; 0x28
 800794c:	9b04      	ldr	r3, [sp, #16]
 800794e:	4413      	add	r3, r2
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	9b05      	ldr	r3, [sp, #20]
 8007954:	2101      	movs	r1, #1
 8007956:	4413      	add	r3, r2
 8007958:	4630      	mov	r0, r6
 800795a:	9305      	str	r3, [sp, #20]
 800795c:	f000 fd74 	bl	8008448 <__i2b>
 8007960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007962:	4607      	mov	r7, r0
 8007964:	f1b8 0f00 	cmp.w	r8, #0
 8007968:	dd0d      	ble.n	8007986 <_dtoa_r+0x67e>
 800796a:	9a05      	ldr	r2, [sp, #20]
 800796c:	2a00      	cmp	r2, #0
 800796e:	dd0a      	ble.n	8007986 <_dtoa_r+0x67e>
 8007970:	4542      	cmp	r2, r8
 8007972:	9904      	ldr	r1, [sp, #16]
 8007974:	bfa8      	it	ge
 8007976:	4642      	movge	r2, r8
 8007978:	1a89      	subs	r1, r1, r2
 800797a:	9104      	str	r1, [sp, #16]
 800797c:	9905      	ldr	r1, [sp, #20]
 800797e:	eba8 0802 	sub.w	r8, r8, r2
 8007982:	1a8a      	subs	r2, r1, r2
 8007984:	9205      	str	r2, [sp, #20]
 8007986:	b303      	cbz	r3, 80079ca <_dtoa_r+0x6c2>
 8007988:	9a07      	ldr	r2, [sp, #28]
 800798a:	2a00      	cmp	r2, #0
 800798c:	f000 80a5 	beq.w	8007ada <_dtoa_r+0x7d2>
 8007990:	2c00      	cmp	r4, #0
 8007992:	dd13      	ble.n	80079bc <_dtoa_r+0x6b4>
 8007994:	4639      	mov	r1, r7
 8007996:	4622      	mov	r2, r4
 8007998:	4630      	mov	r0, r6
 800799a:	930d      	str	r3, [sp, #52]	; 0x34
 800799c:	f000 fe14 	bl	80085c8 <__pow5mult>
 80079a0:	462a      	mov	r2, r5
 80079a2:	4601      	mov	r1, r0
 80079a4:	4607      	mov	r7, r0
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 fd64 	bl	8008474 <__multiply>
 80079ac:	4629      	mov	r1, r5
 80079ae:	900a      	str	r0, [sp, #40]	; 0x28
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 fc91 	bl	80082d8 <_Bfree>
 80079b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079ba:	4615      	mov	r5, r2
 80079bc:	1b1a      	subs	r2, r3, r4
 80079be:	d004      	beq.n	80079ca <_dtoa_r+0x6c2>
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f000 fe00 	bl	80085c8 <__pow5mult>
 80079c8:	4605      	mov	r5, r0
 80079ca:	2101      	movs	r1, #1
 80079cc:	4630      	mov	r0, r6
 80079ce:	f000 fd3b 	bl	8008448 <__i2b>
 80079d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	4604      	mov	r4, r0
 80079d8:	f340 8081 	ble.w	8007ade <_dtoa_r+0x7d6>
 80079dc:	461a      	mov	r2, r3
 80079de:	4601      	mov	r1, r0
 80079e0:	4630      	mov	r0, r6
 80079e2:	f000 fdf1 	bl	80085c8 <__pow5mult>
 80079e6:	9b06      	ldr	r3, [sp, #24]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	4604      	mov	r4, r0
 80079ec:	dd7a      	ble.n	8007ae4 <_dtoa_r+0x7dc>
 80079ee:	2300      	movs	r3, #0
 80079f0:	930a      	str	r3, [sp, #40]	; 0x28
 80079f2:	6922      	ldr	r2, [r4, #16]
 80079f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80079f8:	6910      	ldr	r0, [r2, #16]
 80079fa:	f000 fcd5 	bl	80083a8 <__hi0bits>
 80079fe:	f1c0 0020 	rsb	r0, r0, #32
 8007a02:	9b05      	ldr	r3, [sp, #20]
 8007a04:	4418      	add	r0, r3
 8007a06:	f010 001f 	ands.w	r0, r0, #31
 8007a0a:	f000 808c 	beq.w	8007b26 <_dtoa_r+0x81e>
 8007a0e:	f1c0 0220 	rsb	r2, r0, #32
 8007a12:	2a04      	cmp	r2, #4
 8007a14:	f340 8085 	ble.w	8007b22 <_dtoa_r+0x81a>
 8007a18:	f1c0 001c 	rsb	r0, r0, #28
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	4403      	add	r3, r0
 8007a20:	9304      	str	r3, [sp, #16]
 8007a22:	9b05      	ldr	r3, [sp, #20]
 8007a24:	4403      	add	r3, r0
 8007a26:	4480      	add	r8, r0
 8007a28:	9305      	str	r3, [sp, #20]
 8007a2a:	9b04      	ldr	r3, [sp, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dd05      	ble.n	8007a3c <_dtoa_r+0x734>
 8007a30:	4629      	mov	r1, r5
 8007a32:	461a      	mov	r2, r3
 8007a34:	4630      	mov	r0, r6
 8007a36:	f000 fe21 	bl	800867c <__lshift>
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	9b05      	ldr	r3, [sp, #20]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dd05      	ble.n	8007a4e <_dtoa_r+0x746>
 8007a42:	4621      	mov	r1, r4
 8007a44:	461a      	mov	r2, r3
 8007a46:	4630      	mov	r0, r6
 8007a48:	f000 fe18 	bl	800867c <__lshift>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d06a      	beq.n	8007b2a <_dtoa_r+0x822>
 8007a54:	4621      	mov	r1, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 fe80 	bl	800875c <__mcmp>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	da64      	bge.n	8007b2a <_dtoa_r+0x822>
 8007a60:	2300      	movs	r3, #0
 8007a62:	4629      	mov	r1, r5
 8007a64:	220a      	movs	r2, #10
 8007a66:	4630      	mov	r0, r6
 8007a68:	f000 fc58 	bl	800831c <__multadd>
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a72:	4605      	mov	r5, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 8191 	beq.w	8007d9c <_dtoa_r+0xa94>
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	220a      	movs	r2, #10
 8007a80:	4630      	mov	r0, r6
 8007a82:	f000 fc4b 	bl	800831c <__multadd>
 8007a86:	f1ba 0f00 	cmp.w	sl, #0
 8007a8a:	4607      	mov	r7, r0
 8007a8c:	f300 808d 	bgt.w	8007baa <_dtoa_r+0x8a2>
 8007a90:	9b06      	ldr	r3, [sp, #24]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	dc50      	bgt.n	8007b38 <_dtoa_r+0x830>
 8007a96:	e088      	b.n	8007baa <_dtoa_r+0x8a2>
 8007a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a9e:	e751      	b.n	8007944 <_dtoa_r+0x63c>
 8007aa0:	f109 34ff 	add.w	r4, r9, #4294967295
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	bfbf      	itttt	lt
 8007aa8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007aaa:	1ae3      	sublt	r3, r4, r3
 8007aac:	18d2      	addlt	r2, r2, r3
 8007aae:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007ab0:	bfb6      	itet	lt
 8007ab2:	4623      	movlt	r3, r4
 8007ab4:	1b1c      	subge	r4, r3, r4
 8007ab6:	2400      	movlt	r4, #0
 8007ab8:	f1b9 0f00 	cmp.w	r9, #0
 8007abc:	bfb5      	itete	lt
 8007abe:	9a04      	ldrlt	r2, [sp, #16]
 8007ac0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007ac4:	eba2 0809 	sublt.w	r8, r2, r9
 8007ac8:	464a      	movge	r2, r9
 8007aca:	bfb8      	it	lt
 8007acc:	2200      	movlt	r2, #0
 8007ace:	e73c      	b.n	800794a <_dtoa_r+0x642>
 8007ad0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007ad4:	9f07      	ldr	r7, [sp, #28]
 8007ad6:	461c      	mov	r4, r3
 8007ad8:	e744      	b.n	8007964 <_dtoa_r+0x65c>
 8007ada:	461a      	mov	r2, r3
 8007adc:	e770      	b.n	80079c0 <_dtoa_r+0x6b8>
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	dc18      	bgt.n	8007b16 <_dtoa_r+0x80e>
 8007ae4:	9b02      	ldr	r3, [sp, #8]
 8007ae6:	b9b3      	cbnz	r3, 8007b16 <_dtoa_r+0x80e>
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007aee:	b9a2      	cbnz	r2, 8007b1a <_dtoa_r+0x812>
 8007af0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007af4:	0d12      	lsrs	r2, r2, #20
 8007af6:	0512      	lsls	r2, r2, #20
 8007af8:	b18a      	cbz	r2, 8007b1e <_dtoa_r+0x816>
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	3301      	adds	r3, #1
 8007afe:	9304      	str	r3, [sp, #16]
 8007b00:	9b05      	ldr	r3, [sp, #20]
 8007b02:	3301      	adds	r3, #1
 8007b04:	9305      	str	r3, [sp, #20]
 8007b06:	2301      	movs	r3, #1
 8007b08:	930a      	str	r3, [sp, #40]	; 0x28
 8007b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f47f af70 	bne.w	80079f2 <_dtoa_r+0x6ea>
 8007b12:	2001      	movs	r0, #1
 8007b14:	e775      	b.n	8007a02 <_dtoa_r+0x6fa>
 8007b16:	2300      	movs	r3, #0
 8007b18:	e7f6      	b.n	8007b08 <_dtoa_r+0x800>
 8007b1a:	9b02      	ldr	r3, [sp, #8]
 8007b1c:	e7f4      	b.n	8007b08 <_dtoa_r+0x800>
 8007b1e:	920a      	str	r2, [sp, #40]	; 0x28
 8007b20:	e7f3      	b.n	8007b0a <_dtoa_r+0x802>
 8007b22:	d082      	beq.n	8007a2a <_dtoa_r+0x722>
 8007b24:	4610      	mov	r0, r2
 8007b26:	301c      	adds	r0, #28
 8007b28:	e778      	b.n	8007a1c <_dtoa_r+0x714>
 8007b2a:	f1b9 0f00 	cmp.w	r9, #0
 8007b2e:	dc37      	bgt.n	8007ba0 <_dtoa_r+0x898>
 8007b30:	9b06      	ldr	r3, [sp, #24]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	dd34      	ble.n	8007ba0 <_dtoa_r+0x898>
 8007b36:	46ca      	mov	sl, r9
 8007b38:	f1ba 0f00 	cmp.w	sl, #0
 8007b3c:	d10d      	bne.n	8007b5a <_dtoa_r+0x852>
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4653      	mov	r3, sl
 8007b42:	2205      	movs	r2, #5
 8007b44:	4630      	mov	r0, r6
 8007b46:	f000 fbe9 	bl	800831c <__multadd>
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 fe04 	bl	800875c <__mcmp>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f73f adeb 	bgt.w	8007730 <_dtoa_r+0x428>
 8007b5a:	9b08      	ldr	r3, [sp, #32]
 8007b5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b60:	ea6f 0b03 	mvn.w	fp, r3
 8007b64:	f04f 0900 	mov.w	r9, #0
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f000 fbb4 	bl	80082d8 <_Bfree>
 8007b70:	2f00      	cmp	r7, #0
 8007b72:	f43f aea8 	beq.w	80078c6 <_dtoa_r+0x5be>
 8007b76:	f1b9 0f00 	cmp.w	r9, #0
 8007b7a:	d005      	beq.n	8007b88 <_dtoa_r+0x880>
 8007b7c:	45b9      	cmp	r9, r7
 8007b7e:	d003      	beq.n	8007b88 <_dtoa_r+0x880>
 8007b80:	4649      	mov	r1, r9
 8007b82:	4630      	mov	r0, r6
 8007b84:	f000 fba8 	bl	80082d8 <_Bfree>
 8007b88:	4639      	mov	r1, r7
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f000 fba4 	bl	80082d8 <_Bfree>
 8007b90:	e699      	b.n	80078c6 <_dtoa_r+0x5be>
 8007b92:	2400      	movs	r4, #0
 8007b94:	4627      	mov	r7, r4
 8007b96:	e7e0      	b.n	8007b5a <_dtoa_r+0x852>
 8007b98:	46bb      	mov	fp, r7
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	e5c7      	b.n	8007730 <_dtoa_r+0x428>
 8007ba0:	9b07      	ldr	r3, [sp, #28]
 8007ba2:	46ca      	mov	sl, r9
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 8100 	beq.w	8007daa <_dtoa_r+0xaa2>
 8007baa:	f1b8 0f00 	cmp.w	r8, #0
 8007bae:	dd05      	ble.n	8007bbc <_dtoa_r+0x8b4>
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	4642      	mov	r2, r8
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f000 fd61 	bl	800867c <__lshift>
 8007bba:	4607      	mov	r7, r0
 8007bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d05d      	beq.n	8007c7e <_dtoa_r+0x976>
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 fb47 	bl	8008258 <_Balloc>
 8007bca:	4680      	mov	r8, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <_dtoa_r+0x8d2>
 8007bce:	4b82      	ldr	r3, [pc, #520]	; (8007dd8 <_dtoa_r+0xad0>)
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bd6:	f7ff bbaf 	b.w	8007338 <_dtoa_r+0x30>
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	3202      	adds	r2, #2
 8007bde:	0092      	lsls	r2, r2, #2
 8007be0:	f107 010c 	add.w	r1, r7, #12
 8007be4:	300c      	adds	r0, #12
 8007be6:	f000 fb29 	bl	800823c <memcpy>
 8007bea:	2201      	movs	r2, #1
 8007bec:	4641      	mov	r1, r8
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f000 fd44 	bl	800867c <__lshift>
 8007bf4:	9b01      	ldr	r3, [sp, #4]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	9304      	str	r3, [sp, #16]
 8007bfa:	9b01      	ldr	r3, [sp, #4]
 8007bfc:	4453      	add	r3, sl
 8007bfe:	9308      	str	r3, [sp, #32]
 8007c00:	9b02      	ldr	r3, [sp, #8]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	46b9      	mov	r9, r7
 8007c08:	9307      	str	r3, [sp, #28]
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	4621      	mov	r1, r4
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4628      	mov	r0, r5
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	f7ff fae9 	bl	80071ec <quorem>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	3330      	adds	r3, #48	; 0x30
 8007c1e:	9005      	str	r0, [sp, #20]
 8007c20:	4649      	mov	r1, r9
 8007c22:	4628      	mov	r0, r5
 8007c24:	9309      	str	r3, [sp, #36]	; 0x24
 8007c26:	f000 fd99 	bl	800875c <__mcmp>
 8007c2a:	463a      	mov	r2, r7
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4630      	mov	r0, r6
 8007c32:	f000 fdaf 	bl	8008794 <__mdiff>
 8007c36:	68c2      	ldr	r2, [r0, #12]
 8007c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3a:	4680      	mov	r8, r0
 8007c3c:	bb0a      	cbnz	r2, 8007c82 <_dtoa_r+0x97a>
 8007c3e:	4601      	mov	r1, r0
 8007c40:	4628      	mov	r0, r5
 8007c42:	f000 fd8b 	bl	800875c <__mcmp>
 8007c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c48:	4602      	mov	r2, r0
 8007c4a:	4641      	mov	r1, r8
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007c52:	f000 fb41 	bl	80082d8 <_Bfree>
 8007c56:	9b06      	ldr	r3, [sp, #24]
 8007c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c5a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007c5e:	ea43 0102 	orr.w	r1, r3, r2
 8007c62:	9b07      	ldr	r3, [sp, #28]
 8007c64:	430b      	orrs	r3, r1
 8007c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c68:	d10d      	bne.n	8007c86 <_dtoa_r+0x97e>
 8007c6a:	2b39      	cmp	r3, #57	; 0x39
 8007c6c:	d029      	beq.n	8007cc2 <_dtoa_r+0x9ba>
 8007c6e:	f1ba 0f00 	cmp.w	sl, #0
 8007c72:	dd01      	ble.n	8007c78 <_dtoa_r+0x970>
 8007c74:	9b05      	ldr	r3, [sp, #20]
 8007c76:	3331      	adds	r3, #49	; 0x31
 8007c78:	9a02      	ldr	r2, [sp, #8]
 8007c7a:	7013      	strb	r3, [r2, #0]
 8007c7c:	e774      	b.n	8007b68 <_dtoa_r+0x860>
 8007c7e:	4638      	mov	r0, r7
 8007c80:	e7b8      	b.n	8007bf4 <_dtoa_r+0x8ec>
 8007c82:	2201      	movs	r2, #1
 8007c84:	e7e1      	b.n	8007c4a <_dtoa_r+0x942>
 8007c86:	f1ba 0f00 	cmp.w	sl, #0
 8007c8a:	db06      	blt.n	8007c9a <_dtoa_r+0x992>
 8007c8c:	9906      	ldr	r1, [sp, #24]
 8007c8e:	ea41 0a0a 	orr.w	sl, r1, sl
 8007c92:	9907      	ldr	r1, [sp, #28]
 8007c94:	ea5a 0101 	orrs.w	r1, sl, r1
 8007c98:	d120      	bne.n	8007cdc <_dtoa_r+0x9d4>
 8007c9a:	2a00      	cmp	r2, #0
 8007c9c:	ddec      	ble.n	8007c78 <_dtoa_r+0x970>
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	f000 fce9 	bl	800867c <__lshift>
 8007caa:	4621      	mov	r1, r4
 8007cac:	4605      	mov	r5, r0
 8007cae:	f000 fd55 	bl	800875c <__mcmp>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	dc02      	bgt.n	8007cbe <_dtoa_r+0x9b6>
 8007cb8:	d1de      	bne.n	8007c78 <_dtoa_r+0x970>
 8007cba:	07da      	lsls	r2, r3, #31
 8007cbc:	d5dc      	bpl.n	8007c78 <_dtoa_r+0x970>
 8007cbe:	2b39      	cmp	r3, #57	; 0x39
 8007cc0:	d1d8      	bne.n	8007c74 <_dtoa_r+0x96c>
 8007cc2:	9a02      	ldr	r2, [sp, #8]
 8007cc4:	2339      	movs	r3, #57	; 0x39
 8007cc6:	7013      	strb	r3, [r2, #0]
 8007cc8:	4643      	mov	r3, r8
 8007cca:	4698      	mov	r8, r3
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007cd2:	2a39      	cmp	r2, #57	; 0x39
 8007cd4:	d051      	beq.n	8007d7a <_dtoa_r+0xa72>
 8007cd6:	3201      	adds	r2, #1
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e745      	b.n	8007b68 <_dtoa_r+0x860>
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	dd03      	ble.n	8007ce8 <_dtoa_r+0x9e0>
 8007ce0:	2b39      	cmp	r3, #57	; 0x39
 8007ce2:	d0ee      	beq.n	8007cc2 <_dtoa_r+0x9ba>
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	e7c7      	b.n	8007c78 <_dtoa_r+0x970>
 8007ce8:	9a04      	ldr	r2, [sp, #16]
 8007cea:	9908      	ldr	r1, [sp, #32]
 8007cec:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007cf0:	428a      	cmp	r2, r1
 8007cf2:	d02b      	beq.n	8007d4c <_dtoa_r+0xa44>
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	220a      	movs	r2, #10
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 fb0e 	bl	800831c <__multadd>
 8007d00:	45b9      	cmp	r9, r7
 8007d02:	4605      	mov	r5, r0
 8007d04:	f04f 0300 	mov.w	r3, #0
 8007d08:	f04f 020a 	mov.w	r2, #10
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	4630      	mov	r0, r6
 8007d10:	d107      	bne.n	8007d22 <_dtoa_r+0xa1a>
 8007d12:	f000 fb03 	bl	800831c <__multadd>
 8007d16:	4681      	mov	r9, r0
 8007d18:	4607      	mov	r7, r0
 8007d1a:	9b04      	ldr	r3, [sp, #16]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	e774      	b.n	8007c0c <_dtoa_r+0x904>
 8007d22:	f000 fafb 	bl	800831c <__multadd>
 8007d26:	4639      	mov	r1, r7
 8007d28:	4681      	mov	r9, r0
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	220a      	movs	r2, #10
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f000 faf4 	bl	800831c <__multadd>
 8007d34:	4607      	mov	r7, r0
 8007d36:	e7f0      	b.n	8007d1a <_dtoa_r+0xa12>
 8007d38:	f1ba 0f00 	cmp.w	sl, #0
 8007d3c:	9a01      	ldr	r2, [sp, #4]
 8007d3e:	bfcc      	ite	gt
 8007d40:	46d0      	movgt	r8, sl
 8007d42:	f04f 0801 	movle.w	r8, #1
 8007d46:	4490      	add	r8, r2
 8007d48:	f04f 0900 	mov.w	r9, #0
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	2201      	movs	r2, #1
 8007d50:	4630      	mov	r0, r6
 8007d52:	9302      	str	r3, [sp, #8]
 8007d54:	f000 fc92 	bl	800867c <__lshift>
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	f000 fcfe 	bl	800875c <__mcmp>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	dcb1      	bgt.n	8007cc8 <_dtoa_r+0x9c0>
 8007d64:	d102      	bne.n	8007d6c <_dtoa_r+0xa64>
 8007d66:	9b02      	ldr	r3, [sp, #8]
 8007d68:	07db      	lsls	r3, r3, #31
 8007d6a:	d4ad      	bmi.n	8007cc8 <_dtoa_r+0x9c0>
 8007d6c:	4643      	mov	r3, r8
 8007d6e:	4698      	mov	r8, r3
 8007d70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d74:	2a30      	cmp	r2, #48	; 0x30
 8007d76:	d0fa      	beq.n	8007d6e <_dtoa_r+0xa66>
 8007d78:	e6f6      	b.n	8007b68 <_dtoa_r+0x860>
 8007d7a:	9a01      	ldr	r2, [sp, #4]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d1a4      	bne.n	8007cca <_dtoa_r+0x9c2>
 8007d80:	f10b 0b01 	add.w	fp, fp, #1
 8007d84:	2331      	movs	r3, #49	; 0x31
 8007d86:	e778      	b.n	8007c7a <_dtoa_r+0x972>
 8007d88:	4b14      	ldr	r3, [pc, #80]	; (8007ddc <_dtoa_r+0xad4>)
 8007d8a:	f7ff bb27 	b.w	80073dc <_dtoa_r+0xd4>
 8007d8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f47f ab03 	bne.w	800739c <_dtoa_r+0x94>
 8007d96:	4b12      	ldr	r3, [pc, #72]	; (8007de0 <_dtoa_r+0xad8>)
 8007d98:	f7ff bb20 	b.w	80073dc <_dtoa_r+0xd4>
 8007d9c:	f1ba 0f00 	cmp.w	sl, #0
 8007da0:	dc03      	bgt.n	8007daa <_dtoa_r+0xaa2>
 8007da2:	9b06      	ldr	r3, [sp, #24]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	f73f aec7 	bgt.w	8007b38 <_dtoa_r+0x830>
 8007daa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007dae:	4621      	mov	r1, r4
 8007db0:	4628      	mov	r0, r5
 8007db2:	f7ff fa1b 	bl	80071ec <quorem>
 8007db6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007dba:	f808 3b01 	strb.w	r3, [r8], #1
 8007dbe:	9a01      	ldr	r2, [sp, #4]
 8007dc0:	eba8 0202 	sub.w	r2, r8, r2
 8007dc4:	4592      	cmp	sl, r2
 8007dc6:	ddb7      	ble.n	8007d38 <_dtoa_r+0xa30>
 8007dc8:	4629      	mov	r1, r5
 8007dca:	2300      	movs	r3, #0
 8007dcc:	220a      	movs	r2, #10
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 faa4 	bl	800831c <__multadd>
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	e7ea      	b.n	8007dae <_dtoa_r+0xaa6>
 8007dd8:	080092af 	.word	0x080092af
 8007ddc:	0800920c 	.word	0x0800920c
 8007de0:	08009230 	.word	0x08009230

08007de4 <__sflush_r>:
 8007de4:	898a      	ldrh	r2, [r1, #12]
 8007de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dea:	4605      	mov	r5, r0
 8007dec:	0710      	lsls	r0, r2, #28
 8007dee:	460c      	mov	r4, r1
 8007df0:	d458      	bmi.n	8007ea4 <__sflush_r+0xc0>
 8007df2:	684b      	ldr	r3, [r1, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dc05      	bgt.n	8007e04 <__sflush_r+0x20>
 8007df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dc02      	bgt.n	8007e04 <__sflush_r+0x20>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	d0f9      	beq.n	8007dfe <__sflush_r+0x1a>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e10:	682f      	ldr	r7, [r5, #0]
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	d032      	beq.n	8007e7c <__sflush_r+0x98>
 8007e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	075a      	lsls	r2, r3, #29
 8007e1c:	d505      	bpl.n	8007e2a <__sflush_r+0x46>
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	1ac0      	subs	r0, r0, r3
 8007e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e24:	b10b      	cbz	r3, 8007e2a <__sflush_r+0x46>
 8007e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e28:	1ac0      	subs	r0, r0, r3
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e30:	6a21      	ldr	r1, [r4, #32]
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b0      	blx	r6
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	d106      	bne.n	8007e4a <__sflush_r+0x66>
 8007e3c:	6829      	ldr	r1, [r5, #0]
 8007e3e:	291d      	cmp	r1, #29
 8007e40:	d82c      	bhi.n	8007e9c <__sflush_r+0xb8>
 8007e42:	4a2a      	ldr	r2, [pc, #168]	; (8007eec <__sflush_r+0x108>)
 8007e44:	40ca      	lsrs	r2, r1
 8007e46:	07d6      	lsls	r6, r2, #31
 8007e48:	d528      	bpl.n	8007e9c <__sflush_r+0xb8>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	6062      	str	r2, [r4, #4]
 8007e4e:	04d9      	lsls	r1, r3, #19
 8007e50:	6922      	ldr	r2, [r4, #16]
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	d504      	bpl.n	8007e60 <__sflush_r+0x7c>
 8007e56:	1c42      	adds	r2, r0, #1
 8007e58:	d101      	bne.n	8007e5e <__sflush_r+0x7a>
 8007e5a:	682b      	ldr	r3, [r5, #0]
 8007e5c:	b903      	cbnz	r3, 8007e60 <__sflush_r+0x7c>
 8007e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8007e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e62:	602f      	str	r7, [r5, #0]
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d0ca      	beq.n	8007dfe <__sflush_r+0x1a>
 8007e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e6c:	4299      	cmp	r1, r3
 8007e6e:	d002      	beq.n	8007e76 <__sflush_r+0x92>
 8007e70:	4628      	mov	r0, r5
 8007e72:	f000 fd8b 	bl	800898c <_free_r>
 8007e76:	2000      	movs	r0, #0
 8007e78:	6360      	str	r0, [r4, #52]	; 0x34
 8007e7a:	e7c1      	b.n	8007e00 <__sflush_r+0x1c>
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b0      	blx	r6
 8007e84:	1c41      	adds	r1, r0, #1
 8007e86:	d1c7      	bne.n	8007e18 <__sflush_r+0x34>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0c4      	beq.n	8007e18 <__sflush_r+0x34>
 8007e8e:	2b1d      	cmp	r3, #29
 8007e90:	d001      	beq.n	8007e96 <__sflush_r+0xb2>
 8007e92:	2b16      	cmp	r3, #22
 8007e94:	d101      	bne.n	8007e9a <__sflush_r+0xb6>
 8007e96:	602f      	str	r7, [r5, #0]
 8007e98:	e7b1      	b.n	8007dfe <__sflush_r+0x1a>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea0:	81a3      	strh	r3, [r4, #12]
 8007ea2:	e7ad      	b.n	8007e00 <__sflush_r+0x1c>
 8007ea4:	690f      	ldr	r7, [r1, #16]
 8007ea6:	2f00      	cmp	r7, #0
 8007ea8:	d0a9      	beq.n	8007dfe <__sflush_r+0x1a>
 8007eaa:	0793      	lsls	r3, r2, #30
 8007eac:	680e      	ldr	r6, [r1, #0]
 8007eae:	bf08      	it	eq
 8007eb0:	694b      	ldreq	r3, [r1, #20]
 8007eb2:	600f      	str	r7, [r1, #0]
 8007eb4:	bf18      	it	ne
 8007eb6:	2300      	movne	r3, #0
 8007eb8:	eba6 0807 	sub.w	r8, r6, r7
 8007ebc:	608b      	str	r3, [r1, #8]
 8007ebe:	f1b8 0f00 	cmp.w	r8, #0
 8007ec2:	dd9c      	ble.n	8007dfe <__sflush_r+0x1a>
 8007ec4:	6a21      	ldr	r1, [r4, #32]
 8007ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ec8:	4643      	mov	r3, r8
 8007eca:	463a      	mov	r2, r7
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b0      	blx	r6
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	dc06      	bgt.n	8007ee2 <__sflush_r+0xfe>
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	e78e      	b.n	8007e00 <__sflush_r+0x1c>
 8007ee2:	4407      	add	r7, r0
 8007ee4:	eba8 0800 	sub.w	r8, r8, r0
 8007ee8:	e7e9      	b.n	8007ebe <__sflush_r+0xda>
 8007eea:	bf00      	nop
 8007eec:	20400001 	.word	0x20400001

08007ef0 <_fflush_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	690b      	ldr	r3, [r1, #16]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	b913      	cbnz	r3, 8007f00 <_fflush_r+0x10>
 8007efa:	2500      	movs	r5, #0
 8007efc:	4628      	mov	r0, r5
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	b118      	cbz	r0, 8007f0a <_fflush_r+0x1a>
 8007f02:	6983      	ldr	r3, [r0, #24]
 8007f04:	b90b      	cbnz	r3, 8007f0a <_fflush_r+0x1a>
 8007f06:	f000 f887 	bl	8008018 <__sinit>
 8007f0a:	4b14      	ldr	r3, [pc, #80]	; (8007f5c <_fflush_r+0x6c>)
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	d11b      	bne.n	8007f48 <_fflush_r+0x58>
 8007f10:	686c      	ldr	r4, [r5, #4]
 8007f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0ef      	beq.n	8007efa <_fflush_r+0xa>
 8007f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f1c:	07d0      	lsls	r0, r2, #31
 8007f1e:	d404      	bmi.n	8007f2a <_fflush_r+0x3a>
 8007f20:	0599      	lsls	r1, r3, #22
 8007f22:	d402      	bmi.n	8007f2a <_fflush_r+0x3a>
 8007f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f26:	f000 f91a 	bl	800815e <__retarget_lock_acquire_recursive>
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	f7ff ff59 	bl	8007de4 <__sflush_r>
 8007f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f34:	07da      	lsls	r2, r3, #31
 8007f36:	4605      	mov	r5, r0
 8007f38:	d4e0      	bmi.n	8007efc <_fflush_r+0xc>
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	059b      	lsls	r3, r3, #22
 8007f3e:	d4dd      	bmi.n	8007efc <_fflush_r+0xc>
 8007f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f42:	f000 f90d 	bl	8008160 <__retarget_lock_release_recursive>
 8007f46:	e7d9      	b.n	8007efc <_fflush_r+0xc>
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <_fflush_r+0x70>)
 8007f4a:	429c      	cmp	r4, r3
 8007f4c:	d101      	bne.n	8007f52 <_fflush_r+0x62>
 8007f4e:	68ac      	ldr	r4, [r5, #8]
 8007f50:	e7df      	b.n	8007f12 <_fflush_r+0x22>
 8007f52:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <_fflush_r+0x74>)
 8007f54:	429c      	cmp	r4, r3
 8007f56:	bf08      	it	eq
 8007f58:	68ec      	ldreq	r4, [r5, #12]
 8007f5a:	e7da      	b.n	8007f12 <_fflush_r+0x22>
 8007f5c:	080092e0 	.word	0x080092e0
 8007f60:	08009300 	.word	0x08009300
 8007f64:	080092c0 	.word	0x080092c0

08007f68 <std>:
 8007f68:	2300      	movs	r3, #0
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f76:	6083      	str	r3, [r0, #8]
 8007f78:	8181      	strh	r1, [r0, #12]
 8007f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f7c:	81c2      	strh	r2, [r0, #14]
 8007f7e:	6183      	str	r3, [r0, #24]
 8007f80:	4619      	mov	r1, r3
 8007f82:	2208      	movs	r2, #8
 8007f84:	305c      	adds	r0, #92	; 0x5c
 8007f86:	f7fe fb83 	bl	8006690 <memset>
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <std+0x38>)
 8007f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007f8e:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <std+0x3c>)
 8007f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <std+0x40>)
 8007f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <std+0x44>)
 8007f98:	6224      	str	r4, [r4, #32]
 8007f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f9c:	bd10      	pop	{r4, pc}
 8007f9e:	bf00      	nop
 8007fa0:	08008eb1 	.word	0x08008eb1
 8007fa4:	08008ed3 	.word	0x08008ed3
 8007fa8:	08008f0b 	.word	0x08008f0b
 8007fac:	08008f2f 	.word	0x08008f2f

08007fb0 <_cleanup_r>:
 8007fb0:	4901      	ldr	r1, [pc, #4]	; (8007fb8 <_cleanup_r+0x8>)
 8007fb2:	f000 b8af 	b.w	8008114 <_fwalk_reent>
 8007fb6:	bf00      	nop
 8007fb8:	08007ef1 	.word	0x08007ef1

08007fbc <__sfmoreglue>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	2268      	movs	r2, #104	; 0x68
 8007fc0:	1e4d      	subs	r5, r1, #1
 8007fc2:	4355      	muls	r5, r2
 8007fc4:	460e      	mov	r6, r1
 8007fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fca:	f000 fd4b 	bl	8008a64 <_malloc_r>
 8007fce:	4604      	mov	r4, r0
 8007fd0:	b140      	cbz	r0, 8007fe4 <__sfmoreglue+0x28>
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8007fd8:	300c      	adds	r0, #12
 8007fda:	60a0      	str	r0, [r4, #8]
 8007fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fe0:	f7fe fb56 	bl	8006690 <memset>
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}

08007fe8 <__sfp_lock_acquire>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__sfp_lock_acquire+0x8>)
 8007fea:	f000 b8b8 	b.w	800815e <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	24000951 	.word	0x24000951

08007ff4 <__sfp_lock_release>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	; (8007ffc <__sfp_lock_release+0x8>)
 8007ff6:	f000 b8b3 	b.w	8008160 <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	24000951 	.word	0x24000951

08008000 <__sinit_lock_acquire>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__sinit_lock_acquire+0x8>)
 8008002:	f000 b8ac 	b.w	800815e <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	24000952 	.word	0x24000952

0800800c <__sinit_lock_release>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__sinit_lock_release+0x8>)
 800800e:	f000 b8a7 	b.w	8008160 <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	24000952 	.word	0x24000952

08008018 <__sinit>:
 8008018:	b510      	push	{r4, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	f7ff fff0 	bl	8008000 <__sinit_lock_acquire>
 8008020:	69a3      	ldr	r3, [r4, #24]
 8008022:	b11b      	cbz	r3, 800802c <__sinit+0x14>
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f7ff bff0 	b.w	800800c <__sinit_lock_release>
 800802c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008030:	6523      	str	r3, [r4, #80]	; 0x50
 8008032:	4b13      	ldr	r3, [pc, #76]	; (8008080 <__sinit+0x68>)
 8008034:	4a13      	ldr	r2, [pc, #76]	; (8008084 <__sinit+0x6c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	62a2      	str	r2, [r4, #40]	; 0x28
 800803a:	42a3      	cmp	r3, r4
 800803c:	bf04      	itt	eq
 800803e:	2301      	moveq	r3, #1
 8008040:	61a3      	streq	r3, [r4, #24]
 8008042:	4620      	mov	r0, r4
 8008044:	f000 f820 	bl	8008088 <__sfp>
 8008048:	6060      	str	r0, [r4, #4]
 800804a:	4620      	mov	r0, r4
 800804c:	f000 f81c 	bl	8008088 <__sfp>
 8008050:	60a0      	str	r0, [r4, #8]
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f818 	bl	8008088 <__sfp>
 8008058:	2200      	movs	r2, #0
 800805a:	60e0      	str	r0, [r4, #12]
 800805c:	2104      	movs	r1, #4
 800805e:	6860      	ldr	r0, [r4, #4]
 8008060:	f7ff ff82 	bl	8007f68 <std>
 8008064:	68a0      	ldr	r0, [r4, #8]
 8008066:	2201      	movs	r2, #1
 8008068:	2109      	movs	r1, #9
 800806a:	f7ff ff7d 	bl	8007f68 <std>
 800806e:	68e0      	ldr	r0, [r4, #12]
 8008070:	2202      	movs	r2, #2
 8008072:	2112      	movs	r1, #18
 8008074:	f7ff ff78 	bl	8007f68 <std>
 8008078:	2301      	movs	r3, #1
 800807a:	61a3      	str	r3, [r4, #24]
 800807c:	e7d2      	b.n	8008024 <__sinit+0xc>
 800807e:	bf00      	nop
 8008080:	080091f8 	.word	0x080091f8
 8008084:	08007fb1 	.word	0x08007fb1

08008088 <__sfp>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	4607      	mov	r7, r0
 800808c:	f7ff ffac 	bl	8007fe8 <__sfp_lock_acquire>
 8008090:	4b1e      	ldr	r3, [pc, #120]	; (800810c <__sfp+0x84>)
 8008092:	681e      	ldr	r6, [r3, #0]
 8008094:	69b3      	ldr	r3, [r6, #24]
 8008096:	b913      	cbnz	r3, 800809e <__sfp+0x16>
 8008098:	4630      	mov	r0, r6
 800809a:	f7ff ffbd 	bl	8008018 <__sinit>
 800809e:	3648      	adds	r6, #72	; 0x48
 80080a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	d503      	bpl.n	80080b0 <__sfp+0x28>
 80080a8:	6833      	ldr	r3, [r6, #0]
 80080aa:	b30b      	cbz	r3, 80080f0 <__sfp+0x68>
 80080ac:	6836      	ldr	r6, [r6, #0]
 80080ae:	e7f7      	b.n	80080a0 <__sfp+0x18>
 80080b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080b4:	b9d5      	cbnz	r5, 80080ec <__sfp+0x64>
 80080b6:	4b16      	ldr	r3, [pc, #88]	; (8008110 <__sfp+0x88>)
 80080b8:	60e3      	str	r3, [r4, #12]
 80080ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080be:	6665      	str	r5, [r4, #100]	; 0x64
 80080c0:	f000 f84c 	bl	800815c <__retarget_lock_init_recursive>
 80080c4:	f7ff ff96 	bl	8007ff4 <__sfp_lock_release>
 80080c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080d0:	6025      	str	r5, [r4, #0]
 80080d2:	61a5      	str	r5, [r4, #24]
 80080d4:	2208      	movs	r2, #8
 80080d6:	4629      	mov	r1, r5
 80080d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080dc:	f7fe fad8 	bl	8006690 <memset>
 80080e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080e8:	4620      	mov	r0, r4
 80080ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ec:	3468      	adds	r4, #104	; 0x68
 80080ee:	e7d9      	b.n	80080a4 <__sfp+0x1c>
 80080f0:	2104      	movs	r1, #4
 80080f2:	4638      	mov	r0, r7
 80080f4:	f7ff ff62 	bl	8007fbc <__sfmoreglue>
 80080f8:	4604      	mov	r4, r0
 80080fa:	6030      	str	r0, [r6, #0]
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d1d5      	bne.n	80080ac <__sfp+0x24>
 8008100:	f7ff ff78 	bl	8007ff4 <__sfp_lock_release>
 8008104:	230c      	movs	r3, #12
 8008106:	603b      	str	r3, [r7, #0]
 8008108:	e7ee      	b.n	80080e8 <__sfp+0x60>
 800810a:	bf00      	nop
 800810c:	080091f8 	.word	0x080091f8
 8008110:	ffff0001 	.word	0xffff0001

08008114 <_fwalk_reent>:
 8008114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008118:	4606      	mov	r6, r0
 800811a:	4688      	mov	r8, r1
 800811c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008120:	2700      	movs	r7, #0
 8008122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008126:	f1b9 0901 	subs.w	r9, r9, #1
 800812a:	d505      	bpl.n	8008138 <_fwalk_reent+0x24>
 800812c:	6824      	ldr	r4, [r4, #0]
 800812e:	2c00      	cmp	r4, #0
 8008130:	d1f7      	bne.n	8008122 <_fwalk_reent+0xe>
 8008132:	4638      	mov	r0, r7
 8008134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008138:	89ab      	ldrh	r3, [r5, #12]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d907      	bls.n	800814e <_fwalk_reent+0x3a>
 800813e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008142:	3301      	adds	r3, #1
 8008144:	d003      	beq.n	800814e <_fwalk_reent+0x3a>
 8008146:	4629      	mov	r1, r5
 8008148:	4630      	mov	r0, r6
 800814a:	47c0      	blx	r8
 800814c:	4307      	orrs	r7, r0
 800814e:	3568      	adds	r5, #104	; 0x68
 8008150:	e7e9      	b.n	8008126 <_fwalk_reent+0x12>
	...

08008154 <_localeconv_r>:
 8008154:	4800      	ldr	r0, [pc, #0]	; (8008158 <_localeconv_r+0x4>)
 8008156:	4770      	bx	lr
 8008158:	24000164 	.word	0x24000164

0800815c <__retarget_lock_init_recursive>:
 800815c:	4770      	bx	lr

0800815e <__retarget_lock_acquire_recursive>:
 800815e:	4770      	bx	lr

08008160 <__retarget_lock_release_recursive>:
 8008160:	4770      	bx	lr

08008162 <__swhatbuf_r>:
 8008162:	b570      	push	{r4, r5, r6, lr}
 8008164:	460e      	mov	r6, r1
 8008166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816a:	2900      	cmp	r1, #0
 800816c:	b096      	sub	sp, #88	; 0x58
 800816e:	4614      	mov	r4, r2
 8008170:	461d      	mov	r5, r3
 8008172:	da08      	bge.n	8008186 <__swhatbuf_r+0x24>
 8008174:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	602a      	str	r2, [r5, #0]
 800817c:	061a      	lsls	r2, r3, #24
 800817e:	d410      	bmi.n	80081a2 <__swhatbuf_r+0x40>
 8008180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008184:	e00e      	b.n	80081a4 <__swhatbuf_r+0x42>
 8008186:	466a      	mov	r2, sp
 8008188:	f000 ff28 	bl	8008fdc <_fstat_r>
 800818c:	2800      	cmp	r0, #0
 800818e:	dbf1      	blt.n	8008174 <__swhatbuf_r+0x12>
 8008190:	9a01      	ldr	r2, [sp, #4]
 8008192:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008196:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800819a:	425a      	negs	r2, r3
 800819c:	415a      	adcs	r2, r3
 800819e:	602a      	str	r2, [r5, #0]
 80081a0:	e7ee      	b.n	8008180 <__swhatbuf_r+0x1e>
 80081a2:	2340      	movs	r3, #64	; 0x40
 80081a4:	2000      	movs	r0, #0
 80081a6:	6023      	str	r3, [r4, #0]
 80081a8:	b016      	add	sp, #88	; 0x58
 80081aa:	bd70      	pop	{r4, r5, r6, pc}

080081ac <__smakebuf_r>:
 80081ac:	898b      	ldrh	r3, [r1, #12]
 80081ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081b0:	079d      	lsls	r5, r3, #30
 80081b2:	4606      	mov	r6, r0
 80081b4:	460c      	mov	r4, r1
 80081b6:	d507      	bpl.n	80081c8 <__smakebuf_r+0x1c>
 80081b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	6123      	str	r3, [r4, #16]
 80081c0:	2301      	movs	r3, #1
 80081c2:	6163      	str	r3, [r4, #20]
 80081c4:	b002      	add	sp, #8
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	ab01      	add	r3, sp, #4
 80081ca:	466a      	mov	r2, sp
 80081cc:	f7ff ffc9 	bl	8008162 <__swhatbuf_r>
 80081d0:	9900      	ldr	r1, [sp, #0]
 80081d2:	4605      	mov	r5, r0
 80081d4:	4630      	mov	r0, r6
 80081d6:	f000 fc45 	bl	8008a64 <_malloc_r>
 80081da:	b948      	cbnz	r0, 80081f0 <__smakebuf_r+0x44>
 80081dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e0:	059a      	lsls	r2, r3, #22
 80081e2:	d4ef      	bmi.n	80081c4 <__smakebuf_r+0x18>
 80081e4:	f023 0303 	bic.w	r3, r3, #3
 80081e8:	f043 0302 	orr.w	r3, r3, #2
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	e7e3      	b.n	80081b8 <__smakebuf_r+0xc>
 80081f0:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <__smakebuf_r+0x7c>)
 80081f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	6020      	str	r0, [r4, #0]
 80081f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	9b00      	ldr	r3, [sp, #0]
 8008200:	6163      	str	r3, [r4, #20]
 8008202:	9b01      	ldr	r3, [sp, #4]
 8008204:	6120      	str	r0, [r4, #16]
 8008206:	b15b      	cbz	r3, 8008220 <__smakebuf_r+0x74>
 8008208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800820c:	4630      	mov	r0, r6
 800820e:	f000 fef7 	bl	8009000 <_isatty_r>
 8008212:	b128      	cbz	r0, 8008220 <__smakebuf_r+0x74>
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	f023 0303 	bic.w	r3, r3, #3
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	89a0      	ldrh	r0, [r4, #12]
 8008222:	4305      	orrs	r5, r0
 8008224:	81a5      	strh	r5, [r4, #12]
 8008226:	e7cd      	b.n	80081c4 <__smakebuf_r+0x18>
 8008228:	08007fb1 	.word	0x08007fb1

0800822c <malloc>:
 800822c:	4b02      	ldr	r3, [pc, #8]	; (8008238 <malloc+0xc>)
 800822e:	4601      	mov	r1, r0
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	f000 bc17 	b.w	8008a64 <_malloc_r>
 8008236:	bf00      	nop
 8008238:	24000010 	.word	0x24000010

0800823c <memcpy>:
 800823c:	440a      	add	r2, r1
 800823e:	4291      	cmp	r1, r2
 8008240:	f100 33ff 	add.w	r3, r0, #4294967295
 8008244:	d100      	bne.n	8008248 <memcpy+0xc>
 8008246:	4770      	bx	lr
 8008248:	b510      	push	{r4, lr}
 800824a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800824e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008252:	4291      	cmp	r1, r2
 8008254:	d1f9      	bne.n	800824a <memcpy+0xe>
 8008256:	bd10      	pop	{r4, pc}

08008258 <_Balloc>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800825c:	4604      	mov	r4, r0
 800825e:	460d      	mov	r5, r1
 8008260:	b976      	cbnz	r6, 8008280 <_Balloc+0x28>
 8008262:	2010      	movs	r0, #16
 8008264:	f7ff ffe2 	bl	800822c <malloc>
 8008268:	4602      	mov	r2, r0
 800826a:	6260      	str	r0, [r4, #36]	; 0x24
 800826c:	b920      	cbnz	r0, 8008278 <_Balloc+0x20>
 800826e:	4b18      	ldr	r3, [pc, #96]	; (80082d0 <_Balloc+0x78>)
 8008270:	4818      	ldr	r0, [pc, #96]	; (80082d4 <_Balloc+0x7c>)
 8008272:	2166      	movs	r1, #102	; 0x66
 8008274:	f000 fe72 	bl	8008f5c <__assert_func>
 8008278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800827c:	6006      	str	r6, [r0, #0]
 800827e:	60c6      	str	r6, [r0, #12]
 8008280:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008282:	68f3      	ldr	r3, [r6, #12]
 8008284:	b183      	cbz	r3, 80082a8 <_Balloc+0x50>
 8008286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800828e:	b9b8      	cbnz	r0, 80082c0 <_Balloc+0x68>
 8008290:	2101      	movs	r1, #1
 8008292:	fa01 f605 	lsl.w	r6, r1, r5
 8008296:	1d72      	adds	r2, r6, #5
 8008298:	0092      	lsls	r2, r2, #2
 800829a:	4620      	mov	r0, r4
 800829c:	f000 fb60 	bl	8008960 <_calloc_r>
 80082a0:	b160      	cbz	r0, 80082bc <_Balloc+0x64>
 80082a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082a6:	e00e      	b.n	80082c6 <_Balloc+0x6e>
 80082a8:	2221      	movs	r2, #33	; 0x21
 80082aa:	2104      	movs	r1, #4
 80082ac:	4620      	mov	r0, r4
 80082ae:	f000 fb57 	bl	8008960 <_calloc_r>
 80082b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082b4:	60f0      	str	r0, [r6, #12]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e4      	bne.n	8008286 <_Balloc+0x2e>
 80082bc:	2000      	movs	r0, #0
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	6802      	ldr	r2, [r0, #0]
 80082c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082c6:	2300      	movs	r3, #0
 80082c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082cc:	e7f7      	b.n	80082be <_Balloc+0x66>
 80082ce:	bf00      	nop
 80082d0:	0800923d 	.word	0x0800923d
 80082d4:	08009320 	.word	0x08009320

080082d8 <_Bfree>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082dc:	4605      	mov	r5, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	b976      	cbnz	r6, 8008300 <_Bfree+0x28>
 80082e2:	2010      	movs	r0, #16
 80082e4:	f7ff ffa2 	bl	800822c <malloc>
 80082e8:	4602      	mov	r2, r0
 80082ea:	6268      	str	r0, [r5, #36]	; 0x24
 80082ec:	b920      	cbnz	r0, 80082f8 <_Bfree+0x20>
 80082ee:	4b09      	ldr	r3, [pc, #36]	; (8008314 <_Bfree+0x3c>)
 80082f0:	4809      	ldr	r0, [pc, #36]	; (8008318 <_Bfree+0x40>)
 80082f2:	218a      	movs	r1, #138	; 0x8a
 80082f4:	f000 fe32 	bl	8008f5c <__assert_func>
 80082f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082fc:	6006      	str	r6, [r0, #0]
 80082fe:	60c6      	str	r6, [r0, #12]
 8008300:	b13c      	cbz	r4, 8008312 <_Bfree+0x3a>
 8008302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008304:	6862      	ldr	r2, [r4, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800830c:	6021      	str	r1, [r4, #0]
 800830e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	0800923d 	.word	0x0800923d
 8008318:	08009320 	.word	0x08009320

0800831c <__multadd>:
 800831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008320:	690d      	ldr	r5, [r1, #16]
 8008322:	4607      	mov	r7, r0
 8008324:	460c      	mov	r4, r1
 8008326:	461e      	mov	r6, r3
 8008328:	f101 0c14 	add.w	ip, r1, #20
 800832c:	2000      	movs	r0, #0
 800832e:	f8dc 3000 	ldr.w	r3, [ip]
 8008332:	b299      	uxth	r1, r3
 8008334:	fb02 6101 	mla	r1, r2, r1, r6
 8008338:	0c1e      	lsrs	r6, r3, #16
 800833a:	0c0b      	lsrs	r3, r1, #16
 800833c:	fb02 3306 	mla	r3, r2, r6, r3
 8008340:	b289      	uxth	r1, r1
 8008342:	3001      	adds	r0, #1
 8008344:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008348:	4285      	cmp	r5, r0
 800834a:	f84c 1b04 	str.w	r1, [ip], #4
 800834e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008352:	dcec      	bgt.n	800832e <__multadd+0x12>
 8008354:	b30e      	cbz	r6, 800839a <__multadd+0x7e>
 8008356:	68a3      	ldr	r3, [r4, #8]
 8008358:	42ab      	cmp	r3, r5
 800835a:	dc19      	bgt.n	8008390 <__multadd+0x74>
 800835c:	6861      	ldr	r1, [r4, #4]
 800835e:	4638      	mov	r0, r7
 8008360:	3101      	adds	r1, #1
 8008362:	f7ff ff79 	bl	8008258 <_Balloc>
 8008366:	4680      	mov	r8, r0
 8008368:	b928      	cbnz	r0, 8008376 <__multadd+0x5a>
 800836a:	4602      	mov	r2, r0
 800836c:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <__multadd+0x84>)
 800836e:	480d      	ldr	r0, [pc, #52]	; (80083a4 <__multadd+0x88>)
 8008370:	21b5      	movs	r1, #181	; 0xb5
 8008372:	f000 fdf3 	bl	8008f5c <__assert_func>
 8008376:	6922      	ldr	r2, [r4, #16]
 8008378:	3202      	adds	r2, #2
 800837a:	f104 010c 	add.w	r1, r4, #12
 800837e:	0092      	lsls	r2, r2, #2
 8008380:	300c      	adds	r0, #12
 8008382:	f7ff ff5b 	bl	800823c <memcpy>
 8008386:	4621      	mov	r1, r4
 8008388:	4638      	mov	r0, r7
 800838a:	f7ff ffa5 	bl	80082d8 <_Bfree>
 800838e:	4644      	mov	r4, r8
 8008390:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008394:	3501      	adds	r5, #1
 8008396:	615e      	str	r6, [r3, #20]
 8008398:	6125      	str	r5, [r4, #16]
 800839a:	4620      	mov	r0, r4
 800839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a0:	080092af 	.word	0x080092af
 80083a4:	08009320 	.word	0x08009320

080083a8 <__hi0bits>:
 80083a8:	0c03      	lsrs	r3, r0, #16
 80083aa:	041b      	lsls	r3, r3, #16
 80083ac:	b9d3      	cbnz	r3, 80083e4 <__hi0bits+0x3c>
 80083ae:	0400      	lsls	r0, r0, #16
 80083b0:	2310      	movs	r3, #16
 80083b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80083b6:	bf04      	itt	eq
 80083b8:	0200      	lsleq	r0, r0, #8
 80083ba:	3308      	addeq	r3, #8
 80083bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80083c0:	bf04      	itt	eq
 80083c2:	0100      	lsleq	r0, r0, #4
 80083c4:	3304      	addeq	r3, #4
 80083c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80083ca:	bf04      	itt	eq
 80083cc:	0080      	lsleq	r0, r0, #2
 80083ce:	3302      	addeq	r3, #2
 80083d0:	2800      	cmp	r0, #0
 80083d2:	db05      	blt.n	80083e0 <__hi0bits+0x38>
 80083d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80083d8:	f103 0301 	add.w	r3, r3, #1
 80083dc:	bf08      	it	eq
 80083de:	2320      	moveq	r3, #32
 80083e0:	4618      	mov	r0, r3
 80083e2:	4770      	bx	lr
 80083e4:	2300      	movs	r3, #0
 80083e6:	e7e4      	b.n	80083b2 <__hi0bits+0xa>

080083e8 <__lo0bits>:
 80083e8:	6803      	ldr	r3, [r0, #0]
 80083ea:	f013 0207 	ands.w	r2, r3, #7
 80083ee:	4601      	mov	r1, r0
 80083f0:	d00b      	beq.n	800840a <__lo0bits+0x22>
 80083f2:	07da      	lsls	r2, r3, #31
 80083f4:	d423      	bmi.n	800843e <__lo0bits+0x56>
 80083f6:	0798      	lsls	r0, r3, #30
 80083f8:	bf49      	itett	mi
 80083fa:	085b      	lsrmi	r3, r3, #1
 80083fc:	089b      	lsrpl	r3, r3, #2
 80083fe:	2001      	movmi	r0, #1
 8008400:	600b      	strmi	r3, [r1, #0]
 8008402:	bf5c      	itt	pl
 8008404:	600b      	strpl	r3, [r1, #0]
 8008406:	2002      	movpl	r0, #2
 8008408:	4770      	bx	lr
 800840a:	b298      	uxth	r0, r3
 800840c:	b9a8      	cbnz	r0, 800843a <__lo0bits+0x52>
 800840e:	0c1b      	lsrs	r3, r3, #16
 8008410:	2010      	movs	r0, #16
 8008412:	b2da      	uxtb	r2, r3
 8008414:	b90a      	cbnz	r2, 800841a <__lo0bits+0x32>
 8008416:	3008      	adds	r0, #8
 8008418:	0a1b      	lsrs	r3, r3, #8
 800841a:	071a      	lsls	r2, r3, #28
 800841c:	bf04      	itt	eq
 800841e:	091b      	lsreq	r3, r3, #4
 8008420:	3004      	addeq	r0, #4
 8008422:	079a      	lsls	r2, r3, #30
 8008424:	bf04      	itt	eq
 8008426:	089b      	lsreq	r3, r3, #2
 8008428:	3002      	addeq	r0, #2
 800842a:	07da      	lsls	r2, r3, #31
 800842c:	d403      	bmi.n	8008436 <__lo0bits+0x4e>
 800842e:	085b      	lsrs	r3, r3, #1
 8008430:	f100 0001 	add.w	r0, r0, #1
 8008434:	d005      	beq.n	8008442 <__lo0bits+0x5a>
 8008436:	600b      	str	r3, [r1, #0]
 8008438:	4770      	bx	lr
 800843a:	4610      	mov	r0, r2
 800843c:	e7e9      	b.n	8008412 <__lo0bits+0x2a>
 800843e:	2000      	movs	r0, #0
 8008440:	4770      	bx	lr
 8008442:	2020      	movs	r0, #32
 8008444:	4770      	bx	lr
	...

08008448 <__i2b>:
 8008448:	b510      	push	{r4, lr}
 800844a:	460c      	mov	r4, r1
 800844c:	2101      	movs	r1, #1
 800844e:	f7ff ff03 	bl	8008258 <_Balloc>
 8008452:	4602      	mov	r2, r0
 8008454:	b928      	cbnz	r0, 8008462 <__i2b+0x1a>
 8008456:	4b05      	ldr	r3, [pc, #20]	; (800846c <__i2b+0x24>)
 8008458:	4805      	ldr	r0, [pc, #20]	; (8008470 <__i2b+0x28>)
 800845a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800845e:	f000 fd7d 	bl	8008f5c <__assert_func>
 8008462:	2301      	movs	r3, #1
 8008464:	6144      	str	r4, [r0, #20]
 8008466:	6103      	str	r3, [r0, #16]
 8008468:	bd10      	pop	{r4, pc}
 800846a:	bf00      	nop
 800846c:	080092af 	.word	0x080092af
 8008470:	08009320 	.word	0x08009320

08008474 <__multiply>:
 8008474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008478:	4691      	mov	r9, r2
 800847a:	690a      	ldr	r2, [r1, #16]
 800847c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008480:	429a      	cmp	r2, r3
 8008482:	bfb8      	it	lt
 8008484:	460b      	movlt	r3, r1
 8008486:	460c      	mov	r4, r1
 8008488:	bfbc      	itt	lt
 800848a:	464c      	movlt	r4, r9
 800848c:	4699      	movlt	r9, r3
 800848e:	6927      	ldr	r7, [r4, #16]
 8008490:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008494:	68a3      	ldr	r3, [r4, #8]
 8008496:	6861      	ldr	r1, [r4, #4]
 8008498:	eb07 060a 	add.w	r6, r7, sl
 800849c:	42b3      	cmp	r3, r6
 800849e:	b085      	sub	sp, #20
 80084a0:	bfb8      	it	lt
 80084a2:	3101      	addlt	r1, #1
 80084a4:	f7ff fed8 	bl	8008258 <_Balloc>
 80084a8:	b930      	cbnz	r0, 80084b8 <__multiply+0x44>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4b44      	ldr	r3, [pc, #272]	; (80085c0 <__multiply+0x14c>)
 80084ae:	4845      	ldr	r0, [pc, #276]	; (80085c4 <__multiply+0x150>)
 80084b0:	f240 115d 	movw	r1, #349	; 0x15d
 80084b4:	f000 fd52 	bl	8008f5c <__assert_func>
 80084b8:	f100 0514 	add.w	r5, r0, #20
 80084bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084c0:	462b      	mov	r3, r5
 80084c2:	2200      	movs	r2, #0
 80084c4:	4543      	cmp	r3, r8
 80084c6:	d321      	bcc.n	800850c <__multiply+0x98>
 80084c8:	f104 0314 	add.w	r3, r4, #20
 80084cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084d0:	f109 0314 	add.w	r3, r9, #20
 80084d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084d8:	9202      	str	r2, [sp, #8]
 80084da:	1b3a      	subs	r2, r7, r4
 80084dc:	3a15      	subs	r2, #21
 80084de:	f022 0203 	bic.w	r2, r2, #3
 80084e2:	3204      	adds	r2, #4
 80084e4:	f104 0115 	add.w	r1, r4, #21
 80084e8:	428f      	cmp	r7, r1
 80084ea:	bf38      	it	cc
 80084ec:	2204      	movcc	r2, #4
 80084ee:	9201      	str	r2, [sp, #4]
 80084f0:	9a02      	ldr	r2, [sp, #8]
 80084f2:	9303      	str	r3, [sp, #12]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d80c      	bhi.n	8008512 <__multiply+0x9e>
 80084f8:	2e00      	cmp	r6, #0
 80084fa:	dd03      	ble.n	8008504 <__multiply+0x90>
 80084fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008500:	2b00      	cmp	r3, #0
 8008502:	d05a      	beq.n	80085ba <__multiply+0x146>
 8008504:	6106      	str	r6, [r0, #16]
 8008506:	b005      	add	sp, #20
 8008508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850c:	f843 2b04 	str.w	r2, [r3], #4
 8008510:	e7d8      	b.n	80084c4 <__multiply+0x50>
 8008512:	f8b3 a000 	ldrh.w	sl, [r3]
 8008516:	f1ba 0f00 	cmp.w	sl, #0
 800851a:	d024      	beq.n	8008566 <__multiply+0xf2>
 800851c:	f104 0e14 	add.w	lr, r4, #20
 8008520:	46a9      	mov	r9, r5
 8008522:	f04f 0c00 	mov.w	ip, #0
 8008526:	f85e 2b04 	ldr.w	r2, [lr], #4
 800852a:	f8d9 1000 	ldr.w	r1, [r9]
 800852e:	fa1f fb82 	uxth.w	fp, r2
 8008532:	b289      	uxth	r1, r1
 8008534:	fb0a 110b 	mla	r1, sl, fp, r1
 8008538:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800853c:	f8d9 2000 	ldr.w	r2, [r9]
 8008540:	4461      	add	r1, ip
 8008542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008546:	fb0a c20b 	mla	r2, sl, fp, ip
 800854a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800854e:	b289      	uxth	r1, r1
 8008550:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008554:	4577      	cmp	r7, lr
 8008556:	f849 1b04 	str.w	r1, [r9], #4
 800855a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800855e:	d8e2      	bhi.n	8008526 <__multiply+0xb2>
 8008560:	9a01      	ldr	r2, [sp, #4]
 8008562:	f845 c002 	str.w	ip, [r5, r2]
 8008566:	9a03      	ldr	r2, [sp, #12]
 8008568:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800856c:	3304      	adds	r3, #4
 800856e:	f1b9 0f00 	cmp.w	r9, #0
 8008572:	d020      	beq.n	80085b6 <__multiply+0x142>
 8008574:	6829      	ldr	r1, [r5, #0]
 8008576:	f104 0c14 	add.w	ip, r4, #20
 800857a:	46ae      	mov	lr, r5
 800857c:	f04f 0a00 	mov.w	sl, #0
 8008580:	f8bc b000 	ldrh.w	fp, [ip]
 8008584:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008588:	fb09 220b 	mla	r2, r9, fp, r2
 800858c:	4492      	add	sl, r2
 800858e:	b289      	uxth	r1, r1
 8008590:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008594:	f84e 1b04 	str.w	r1, [lr], #4
 8008598:	f85c 2b04 	ldr.w	r2, [ip], #4
 800859c:	f8be 1000 	ldrh.w	r1, [lr]
 80085a0:	0c12      	lsrs	r2, r2, #16
 80085a2:	fb09 1102 	mla	r1, r9, r2, r1
 80085a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085aa:	4567      	cmp	r7, ip
 80085ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085b0:	d8e6      	bhi.n	8008580 <__multiply+0x10c>
 80085b2:	9a01      	ldr	r2, [sp, #4]
 80085b4:	50a9      	str	r1, [r5, r2]
 80085b6:	3504      	adds	r5, #4
 80085b8:	e79a      	b.n	80084f0 <__multiply+0x7c>
 80085ba:	3e01      	subs	r6, #1
 80085bc:	e79c      	b.n	80084f8 <__multiply+0x84>
 80085be:	bf00      	nop
 80085c0:	080092af 	.word	0x080092af
 80085c4:	08009320 	.word	0x08009320

080085c8 <__pow5mult>:
 80085c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085cc:	4615      	mov	r5, r2
 80085ce:	f012 0203 	ands.w	r2, r2, #3
 80085d2:	4606      	mov	r6, r0
 80085d4:	460f      	mov	r7, r1
 80085d6:	d007      	beq.n	80085e8 <__pow5mult+0x20>
 80085d8:	4c25      	ldr	r4, [pc, #148]	; (8008670 <__pow5mult+0xa8>)
 80085da:	3a01      	subs	r2, #1
 80085dc:	2300      	movs	r3, #0
 80085de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085e2:	f7ff fe9b 	bl	800831c <__multadd>
 80085e6:	4607      	mov	r7, r0
 80085e8:	10ad      	asrs	r5, r5, #2
 80085ea:	d03d      	beq.n	8008668 <__pow5mult+0xa0>
 80085ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085ee:	b97c      	cbnz	r4, 8008610 <__pow5mult+0x48>
 80085f0:	2010      	movs	r0, #16
 80085f2:	f7ff fe1b 	bl	800822c <malloc>
 80085f6:	4602      	mov	r2, r0
 80085f8:	6270      	str	r0, [r6, #36]	; 0x24
 80085fa:	b928      	cbnz	r0, 8008608 <__pow5mult+0x40>
 80085fc:	4b1d      	ldr	r3, [pc, #116]	; (8008674 <__pow5mult+0xac>)
 80085fe:	481e      	ldr	r0, [pc, #120]	; (8008678 <__pow5mult+0xb0>)
 8008600:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008604:	f000 fcaa 	bl	8008f5c <__assert_func>
 8008608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800860c:	6004      	str	r4, [r0, #0]
 800860e:	60c4      	str	r4, [r0, #12]
 8008610:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008618:	b94c      	cbnz	r4, 800862e <__pow5mult+0x66>
 800861a:	f240 2171 	movw	r1, #625	; 0x271
 800861e:	4630      	mov	r0, r6
 8008620:	f7ff ff12 	bl	8008448 <__i2b>
 8008624:	2300      	movs	r3, #0
 8008626:	f8c8 0008 	str.w	r0, [r8, #8]
 800862a:	4604      	mov	r4, r0
 800862c:	6003      	str	r3, [r0, #0]
 800862e:	f04f 0900 	mov.w	r9, #0
 8008632:	07eb      	lsls	r3, r5, #31
 8008634:	d50a      	bpl.n	800864c <__pow5mult+0x84>
 8008636:	4639      	mov	r1, r7
 8008638:	4622      	mov	r2, r4
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff ff1a 	bl	8008474 <__multiply>
 8008640:	4639      	mov	r1, r7
 8008642:	4680      	mov	r8, r0
 8008644:	4630      	mov	r0, r6
 8008646:	f7ff fe47 	bl	80082d8 <_Bfree>
 800864a:	4647      	mov	r7, r8
 800864c:	106d      	asrs	r5, r5, #1
 800864e:	d00b      	beq.n	8008668 <__pow5mult+0xa0>
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	b938      	cbnz	r0, 8008664 <__pow5mult+0x9c>
 8008654:	4622      	mov	r2, r4
 8008656:	4621      	mov	r1, r4
 8008658:	4630      	mov	r0, r6
 800865a:	f7ff ff0b 	bl	8008474 <__multiply>
 800865e:	6020      	str	r0, [r4, #0]
 8008660:	f8c0 9000 	str.w	r9, [r0]
 8008664:	4604      	mov	r4, r0
 8008666:	e7e4      	b.n	8008632 <__pow5mult+0x6a>
 8008668:	4638      	mov	r0, r7
 800866a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800866e:	bf00      	nop
 8008670:	08009470 	.word	0x08009470
 8008674:	0800923d 	.word	0x0800923d
 8008678:	08009320 	.word	0x08009320

0800867c <__lshift>:
 800867c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	460c      	mov	r4, r1
 8008682:	6849      	ldr	r1, [r1, #4]
 8008684:	6923      	ldr	r3, [r4, #16]
 8008686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	4607      	mov	r7, r0
 800868e:	4691      	mov	r9, r2
 8008690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008694:	f108 0601 	add.w	r6, r8, #1
 8008698:	42b3      	cmp	r3, r6
 800869a:	db0b      	blt.n	80086b4 <__lshift+0x38>
 800869c:	4638      	mov	r0, r7
 800869e:	f7ff fddb 	bl	8008258 <_Balloc>
 80086a2:	4605      	mov	r5, r0
 80086a4:	b948      	cbnz	r0, 80086ba <__lshift+0x3e>
 80086a6:	4602      	mov	r2, r0
 80086a8:	4b2a      	ldr	r3, [pc, #168]	; (8008754 <__lshift+0xd8>)
 80086aa:	482b      	ldr	r0, [pc, #172]	; (8008758 <__lshift+0xdc>)
 80086ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80086b0:	f000 fc54 	bl	8008f5c <__assert_func>
 80086b4:	3101      	adds	r1, #1
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	e7ee      	b.n	8008698 <__lshift+0x1c>
 80086ba:	2300      	movs	r3, #0
 80086bc:	f100 0114 	add.w	r1, r0, #20
 80086c0:	f100 0210 	add.w	r2, r0, #16
 80086c4:	4618      	mov	r0, r3
 80086c6:	4553      	cmp	r3, sl
 80086c8:	db37      	blt.n	800873a <__lshift+0xbe>
 80086ca:	6920      	ldr	r0, [r4, #16]
 80086cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086d0:	f104 0314 	add.w	r3, r4, #20
 80086d4:	f019 091f 	ands.w	r9, r9, #31
 80086d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80086e0:	d02f      	beq.n	8008742 <__lshift+0xc6>
 80086e2:	f1c9 0e20 	rsb	lr, r9, #32
 80086e6:	468a      	mov	sl, r1
 80086e8:	f04f 0c00 	mov.w	ip, #0
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	fa02 f209 	lsl.w	r2, r2, r9
 80086f2:	ea42 020c 	orr.w	r2, r2, ip
 80086f6:	f84a 2b04 	str.w	r2, [sl], #4
 80086fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fe:	4298      	cmp	r0, r3
 8008700:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008704:	d8f2      	bhi.n	80086ec <__lshift+0x70>
 8008706:	1b03      	subs	r3, r0, r4
 8008708:	3b15      	subs	r3, #21
 800870a:	f023 0303 	bic.w	r3, r3, #3
 800870e:	3304      	adds	r3, #4
 8008710:	f104 0215 	add.w	r2, r4, #21
 8008714:	4290      	cmp	r0, r2
 8008716:	bf38      	it	cc
 8008718:	2304      	movcc	r3, #4
 800871a:	f841 c003 	str.w	ip, [r1, r3]
 800871e:	f1bc 0f00 	cmp.w	ip, #0
 8008722:	d001      	beq.n	8008728 <__lshift+0xac>
 8008724:	f108 0602 	add.w	r6, r8, #2
 8008728:	3e01      	subs	r6, #1
 800872a:	4638      	mov	r0, r7
 800872c:	612e      	str	r6, [r5, #16]
 800872e:	4621      	mov	r1, r4
 8008730:	f7ff fdd2 	bl	80082d8 <_Bfree>
 8008734:	4628      	mov	r0, r5
 8008736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873a:	f842 0f04 	str.w	r0, [r2, #4]!
 800873e:	3301      	adds	r3, #1
 8008740:	e7c1      	b.n	80086c6 <__lshift+0x4a>
 8008742:	3904      	subs	r1, #4
 8008744:	f853 2b04 	ldr.w	r2, [r3], #4
 8008748:	f841 2f04 	str.w	r2, [r1, #4]!
 800874c:	4298      	cmp	r0, r3
 800874e:	d8f9      	bhi.n	8008744 <__lshift+0xc8>
 8008750:	e7ea      	b.n	8008728 <__lshift+0xac>
 8008752:	bf00      	nop
 8008754:	080092af 	.word	0x080092af
 8008758:	08009320 	.word	0x08009320

0800875c <__mcmp>:
 800875c:	b530      	push	{r4, r5, lr}
 800875e:	6902      	ldr	r2, [r0, #16]
 8008760:	690c      	ldr	r4, [r1, #16]
 8008762:	1b12      	subs	r2, r2, r4
 8008764:	d10e      	bne.n	8008784 <__mcmp+0x28>
 8008766:	f100 0314 	add.w	r3, r0, #20
 800876a:	3114      	adds	r1, #20
 800876c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008770:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008774:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008778:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800877c:	42a5      	cmp	r5, r4
 800877e:	d003      	beq.n	8008788 <__mcmp+0x2c>
 8008780:	d305      	bcc.n	800878e <__mcmp+0x32>
 8008782:	2201      	movs	r2, #1
 8008784:	4610      	mov	r0, r2
 8008786:	bd30      	pop	{r4, r5, pc}
 8008788:	4283      	cmp	r3, r0
 800878a:	d3f3      	bcc.n	8008774 <__mcmp+0x18>
 800878c:	e7fa      	b.n	8008784 <__mcmp+0x28>
 800878e:	f04f 32ff 	mov.w	r2, #4294967295
 8008792:	e7f7      	b.n	8008784 <__mcmp+0x28>

08008794 <__mdiff>:
 8008794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008798:	460c      	mov	r4, r1
 800879a:	4606      	mov	r6, r0
 800879c:	4611      	mov	r1, r2
 800879e:	4620      	mov	r0, r4
 80087a0:	4690      	mov	r8, r2
 80087a2:	f7ff ffdb 	bl	800875c <__mcmp>
 80087a6:	1e05      	subs	r5, r0, #0
 80087a8:	d110      	bne.n	80087cc <__mdiff+0x38>
 80087aa:	4629      	mov	r1, r5
 80087ac:	4630      	mov	r0, r6
 80087ae:	f7ff fd53 	bl	8008258 <_Balloc>
 80087b2:	b930      	cbnz	r0, 80087c2 <__mdiff+0x2e>
 80087b4:	4b3a      	ldr	r3, [pc, #232]	; (80088a0 <__mdiff+0x10c>)
 80087b6:	4602      	mov	r2, r0
 80087b8:	f240 2132 	movw	r1, #562	; 0x232
 80087bc:	4839      	ldr	r0, [pc, #228]	; (80088a4 <__mdiff+0x110>)
 80087be:	f000 fbcd 	bl	8008f5c <__assert_func>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087cc:	bfa4      	itt	ge
 80087ce:	4643      	movge	r3, r8
 80087d0:	46a0      	movge	r8, r4
 80087d2:	4630      	mov	r0, r6
 80087d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80087d8:	bfa6      	itte	ge
 80087da:	461c      	movge	r4, r3
 80087dc:	2500      	movge	r5, #0
 80087de:	2501      	movlt	r5, #1
 80087e0:	f7ff fd3a 	bl	8008258 <_Balloc>
 80087e4:	b920      	cbnz	r0, 80087f0 <__mdiff+0x5c>
 80087e6:	4b2e      	ldr	r3, [pc, #184]	; (80088a0 <__mdiff+0x10c>)
 80087e8:	4602      	mov	r2, r0
 80087ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80087ee:	e7e5      	b.n	80087bc <__mdiff+0x28>
 80087f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80087f4:	6926      	ldr	r6, [r4, #16]
 80087f6:	60c5      	str	r5, [r0, #12]
 80087f8:	f104 0914 	add.w	r9, r4, #20
 80087fc:	f108 0514 	add.w	r5, r8, #20
 8008800:	f100 0e14 	add.w	lr, r0, #20
 8008804:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008808:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800880c:	f108 0210 	add.w	r2, r8, #16
 8008810:	46f2      	mov	sl, lr
 8008812:	2100      	movs	r1, #0
 8008814:	f859 3b04 	ldr.w	r3, [r9], #4
 8008818:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800881c:	fa1f f883 	uxth.w	r8, r3
 8008820:	fa11 f18b 	uxtah	r1, r1, fp
 8008824:	0c1b      	lsrs	r3, r3, #16
 8008826:	eba1 0808 	sub.w	r8, r1, r8
 800882a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800882e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008832:	fa1f f888 	uxth.w	r8, r8
 8008836:	1419      	asrs	r1, r3, #16
 8008838:	454e      	cmp	r6, r9
 800883a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800883e:	f84a 3b04 	str.w	r3, [sl], #4
 8008842:	d8e7      	bhi.n	8008814 <__mdiff+0x80>
 8008844:	1b33      	subs	r3, r6, r4
 8008846:	3b15      	subs	r3, #21
 8008848:	f023 0303 	bic.w	r3, r3, #3
 800884c:	3304      	adds	r3, #4
 800884e:	3415      	adds	r4, #21
 8008850:	42a6      	cmp	r6, r4
 8008852:	bf38      	it	cc
 8008854:	2304      	movcc	r3, #4
 8008856:	441d      	add	r5, r3
 8008858:	4473      	add	r3, lr
 800885a:	469e      	mov	lr, r3
 800885c:	462e      	mov	r6, r5
 800885e:	4566      	cmp	r6, ip
 8008860:	d30e      	bcc.n	8008880 <__mdiff+0xec>
 8008862:	f10c 0203 	add.w	r2, ip, #3
 8008866:	1b52      	subs	r2, r2, r5
 8008868:	f022 0203 	bic.w	r2, r2, #3
 800886c:	3d03      	subs	r5, #3
 800886e:	45ac      	cmp	ip, r5
 8008870:	bf38      	it	cc
 8008872:	2200      	movcc	r2, #0
 8008874:	441a      	add	r2, r3
 8008876:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800887a:	b17b      	cbz	r3, 800889c <__mdiff+0x108>
 800887c:	6107      	str	r7, [r0, #16]
 800887e:	e7a3      	b.n	80087c8 <__mdiff+0x34>
 8008880:	f856 8b04 	ldr.w	r8, [r6], #4
 8008884:	fa11 f288 	uxtah	r2, r1, r8
 8008888:	1414      	asrs	r4, r2, #16
 800888a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800888e:	b292      	uxth	r2, r2
 8008890:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008894:	f84e 2b04 	str.w	r2, [lr], #4
 8008898:	1421      	asrs	r1, r4, #16
 800889a:	e7e0      	b.n	800885e <__mdiff+0xca>
 800889c:	3f01      	subs	r7, #1
 800889e:	e7ea      	b.n	8008876 <__mdiff+0xe2>
 80088a0:	080092af 	.word	0x080092af
 80088a4:	08009320 	.word	0x08009320

080088a8 <__d2b>:
 80088a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088ac:	4689      	mov	r9, r1
 80088ae:	2101      	movs	r1, #1
 80088b0:	ec57 6b10 	vmov	r6, r7, d0
 80088b4:	4690      	mov	r8, r2
 80088b6:	f7ff fccf 	bl	8008258 <_Balloc>
 80088ba:	4604      	mov	r4, r0
 80088bc:	b930      	cbnz	r0, 80088cc <__d2b+0x24>
 80088be:	4602      	mov	r2, r0
 80088c0:	4b25      	ldr	r3, [pc, #148]	; (8008958 <__d2b+0xb0>)
 80088c2:	4826      	ldr	r0, [pc, #152]	; (800895c <__d2b+0xb4>)
 80088c4:	f240 310a 	movw	r1, #778	; 0x30a
 80088c8:	f000 fb48 	bl	8008f5c <__assert_func>
 80088cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80088d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088d4:	bb35      	cbnz	r5, 8008924 <__d2b+0x7c>
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	9301      	str	r3, [sp, #4]
 80088da:	d028      	beq.n	800892e <__d2b+0x86>
 80088dc:	4668      	mov	r0, sp
 80088de:	9600      	str	r6, [sp, #0]
 80088e0:	f7ff fd82 	bl	80083e8 <__lo0bits>
 80088e4:	9900      	ldr	r1, [sp, #0]
 80088e6:	b300      	cbz	r0, 800892a <__d2b+0x82>
 80088e8:	9a01      	ldr	r2, [sp, #4]
 80088ea:	f1c0 0320 	rsb	r3, r0, #32
 80088ee:	fa02 f303 	lsl.w	r3, r2, r3
 80088f2:	430b      	orrs	r3, r1
 80088f4:	40c2      	lsrs	r2, r0
 80088f6:	6163      	str	r3, [r4, #20]
 80088f8:	9201      	str	r2, [sp, #4]
 80088fa:	9b01      	ldr	r3, [sp, #4]
 80088fc:	61a3      	str	r3, [r4, #24]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bf14      	ite	ne
 8008902:	2202      	movne	r2, #2
 8008904:	2201      	moveq	r2, #1
 8008906:	6122      	str	r2, [r4, #16]
 8008908:	b1d5      	cbz	r5, 8008940 <__d2b+0x98>
 800890a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800890e:	4405      	add	r5, r0
 8008910:	f8c9 5000 	str.w	r5, [r9]
 8008914:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008918:	f8c8 0000 	str.w	r0, [r8]
 800891c:	4620      	mov	r0, r4
 800891e:	b003      	add	sp, #12
 8008920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008928:	e7d5      	b.n	80088d6 <__d2b+0x2e>
 800892a:	6161      	str	r1, [r4, #20]
 800892c:	e7e5      	b.n	80088fa <__d2b+0x52>
 800892e:	a801      	add	r0, sp, #4
 8008930:	f7ff fd5a 	bl	80083e8 <__lo0bits>
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	6163      	str	r3, [r4, #20]
 8008938:	2201      	movs	r2, #1
 800893a:	6122      	str	r2, [r4, #16]
 800893c:	3020      	adds	r0, #32
 800893e:	e7e3      	b.n	8008908 <__d2b+0x60>
 8008940:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008944:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008948:	f8c9 0000 	str.w	r0, [r9]
 800894c:	6918      	ldr	r0, [r3, #16]
 800894e:	f7ff fd2b 	bl	80083a8 <__hi0bits>
 8008952:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008956:	e7df      	b.n	8008918 <__d2b+0x70>
 8008958:	080092af 	.word	0x080092af
 800895c:	08009320 	.word	0x08009320

08008960 <_calloc_r>:
 8008960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008962:	fba1 2402 	umull	r2, r4, r1, r2
 8008966:	b94c      	cbnz	r4, 800897c <_calloc_r+0x1c>
 8008968:	4611      	mov	r1, r2
 800896a:	9201      	str	r2, [sp, #4]
 800896c:	f000 f87a 	bl	8008a64 <_malloc_r>
 8008970:	9a01      	ldr	r2, [sp, #4]
 8008972:	4605      	mov	r5, r0
 8008974:	b930      	cbnz	r0, 8008984 <_calloc_r+0x24>
 8008976:	4628      	mov	r0, r5
 8008978:	b003      	add	sp, #12
 800897a:	bd30      	pop	{r4, r5, pc}
 800897c:	220c      	movs	r2, #12
 800897e:	6002      	str	r2, [r0, #0]
 8008980:	2500      	movs	r5, #0
 8008982:	e7f8      	b.n	8008976 <_calloc_r+0x16>
 8008984:	4621      	mov	r1, r4
 8008986:	f7fd fe83 	bl	8006690 <memset>
 800898a:	e7f4      	b.n	8008976 <_calloc_r+0x16>

0800898c <_free_r>:
 800898c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800898e:	2900      	cmp	r1, #0
 8008990:	d044      	beq.n	8008a1c <_free_r+0x90>
 8008992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008996:	9001      	str	r0, [sp, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f1a1 0404 	sub.w	r4, r1, #4
 800899e:	bfb8      	it	lt
 80089a0:	18e4      	addlt	r4, r4, r3
 80089a2:	f000 fb61 	bl	8009068 <__malloc_lock>
 80089a6:	4a1e      	ldr	r2, [pc, #120]	; (8008a20 <_free_r+0x94>)
 80089a8:	9801      	ldr	r0, [sp, #4]
 80089aa:	6813      	ldr	r3, [r2, #0]
 80089ac:	b933      	cbnz	r3, 80089bc <_free_r+0x30>
 80089ae:	6063      	str	r3, [r4, #4]
 80089b0:	6014      	str	r4, [r2, #0]
 80089b2:	b003      	add	sp, #12
 80089b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089b8:	f000 bb5c 	b.w	8009074 <__malloc_unlock>
 80089bc:	42a3      	cmp	r3, r4
 80089be:	d908      	bls.n	80089d2 <_free_r+0x46>
 80089c0:	6825      	ldr	r5, [r4, #0]
 80089c2:	1961      	adds	r1, r4, r5
 80089c4:	428b      	cmp	r3, r1
 80089c6:	bf01      	itttt	eq
 80089c8:	6819      	ldreq	r1, [r3, #0]
 80089ca:	685b      	ldreq	r3, [r3, #4]
 80089cc:	1949      	addeq	r1, r1, r5
 80089ce:	6021      	streq	r1, [r4, #0]
 80089d0:	e7ed      	b.n	80089ae <_free_r+0x22>
 80089d2:	461a      	mov	r2, r3
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	b10b      	cbz	r3, 80089dc <_free_r+0x50>
 80089d8:	42a3      	cmp	r3, r4
 80089da:	d9fa      	bls.n	80089d2 <_free_r+0x46>
 80089dc:	6811      	ldr	r1, [r2, #0]
 80089de:	1855      	adds	r5, r2, r1
 80089e0:	42a5      	cmp	r5, r4
 80089e2:	d10b      	bne.n	80089fc <_free_r+0x70>
 80089e4:	6824      	ldr	r4, [r4, #0]
 80089e6:	4421      	add	r1, r4
 80089e8:	1854      	adds	r4, r2, r1
 80089ea:	42a3      	cmp	r3, r4
 80089ec:	6011      	str	r1, [r2, #0]
 80089ee:	d1e0      	bne.n	80089b2 <_free_r+0x26>
 80089f0:	681c      	ldr	r4, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	6053      	str	r3, [r2, #4]
 80089f6:	4421      	add	r1, r4
 80089f8:	6011      	str	r1, [r2, #0]
 80089fa:	e7da      	b.n	80089b2 <_free_r+0x26>
 80089fc:	d902      	bls.n	8008a04 <_free_r+0x78>
 80089fe:	230c      	movs	r3, #12
 8008a00:	6003      	str	r3, [r0, #0]
 8008a02:	e7d6      	b.n	80089b2 <_free_r+0x26>
 8008a04:	6825      	ldr	r5, [r4, #0]
 8008a06:	1961      	adds	r1, r4, r5
 8008a08:	428b      	cmp	r3, r1
 8008a0a:	bf04      	itt	eq
 8008a0c:	6819      	ldreq	r1, [r3, #0]
 8008a0e:	685b      	ldreq	r3, [r3, #4]
 8008a10:	6063      	str	r3, [r4, #4]
 8008a12:	bf04      	itt	eq
 8008a14:	1949      	addeq	r1, r1, r5
 8008a16:	6021      	streq	r1, [r4, #0]
 8008a18:	6054      	str	r4, [r2, #4]
 8008a1a:	e7ca      	b.n	80089b2 <_free_r+0x26>
 8008a1c:	b003      	add	sp, #12
 8008a1e:	bd30      	pop	{r4, r5, pc}
 8008a20:	24000954 	.word	0x24000954

08008a24 <sbrk_aligned>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	4e0e      	ldr	r6, [pc, #56]	; (8008a60 <sbrk_aligned+0x3c>)
 8008a28:	460c      	mov	r4, r1
 8008a2a:	6831      	ldr	r1, [r6, #0]
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	b911      	cbnz	r1, 8008a36 <sbrk_aligned+0x12>
 8008a30:	f000 fa2e 	bl	8008e90 <_sbrk_r>
 8008a34:	6030      	str	r0, [r6, #0]
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 fa29 	bl	8008e90 <_sbrk_r>
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	d00a      	beq.n	8008a58 <sbrk_aligned+0x34>
 8008a42:	1cc4      	adds	r4, r0, #3
 8008a44:	f024 0403 	bic.w	r4, r4, #3
 8008a48:	42a0      	cmp	r0, r4
 8008a4a:	d007      	beq.n	8008a5c <sbrk_aligned+0x38>
 8008a4c:	1a21      	subs	r1, r4, r0
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f000 fa1e 	bl	8008e90 <_sbrk_r>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d101      	bne.n	8008a5c <sbrk_aligned+0x38>
 8008a58:	f04f 34ff 	mov.w	r4, #4294967295
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	bd70      	pop	{r4, r5, r6, pc}
 8008a60:	24000958 	.word	0x24000958

08008a64 <_malloc_r>:
 8008a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a68:	1ccd      	adds	r5, r1, #3
 8008a6a:	f025 0503 	bic.w	r5, r5, #3
 8008a6e:	3508      	adds	r5, #8
 8008a70:	2d0c      	cmp	r5, #12
 8008a72:	bf38      	it	cc
 8008a74:	250c      	movcc	r5, #12
 8008a76:	2d00      	cmp	r5, #0
 8008a78:	4607      	mov	r7, r0
 8008a7a:	db01      	blt.n	8008a80 <_malloc_r+0x1c>
 8008a7c:	42a9      	cmp	r1, r5
 8008a7e:	d905      	bls.n	8008a8c <_malloc_r+0x28>
 8008a80:	230c      	movs	r3, #12
 8008a82:	603b      	str	r3, [r7, #0]
 8008a84:	2600      	movs	r6, #0
 8008a86:	4630      	mov	r0, r6
 8008a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8c:	4e2e      	ldr	r6, [pc, #184]	; (8008b48 <_malloc_r+0xe4>)
 8008a8e:	f000 faeb 	bl	8009068 <__malloc_lock>
 8008a92:	6833      	ldr	r3, [r6, #0]
 8008a94:	461c      	mov	r4, r3
 8008a96:	bb34      	cbnz	r4, 8008ae6 <_malloc_r+0x82>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	f7ff ffc2 	bl	8008a24 <sbrk_aligned>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	d14d      	bne.n	8008b42 <_malloc_r+0xde>
 8008aa6:	6834      	ldr	r4, [r6, #0]
 8008aa8:	4626      	mov	r6, r4
 8008aaa:	2e00      	cmp	r6, #0
 8008aac:	d140      	bne.n	8008b30 <_malloc_r+0xcc>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	eb04 0803 	add.w	r8, r4, r3
 8008ab8:	f000 f9ea 	bl	8008e90 <_sbrk_r>
 8008abc:	4580      	cmp	r8, r0
 8008abe:	d13a      	bne.n	8008b36 <_malloc_r+0xd2>
 8008ac0:	6821      	ldr	r1, [r4, #0]
 8008ac2:	3503      	adds	r5, #3
 8008ac4:	1a6d      	subs	r5, r5, r1
 8008ac6:	f025 0503 	bic.w	r5, r5, #3
 8008aca:	3508      	adds	r5, #8
 8008acc:	2d0c      	cmp	r5, #12
 8008ace:	bf38      	it	cc
 8008ad0:	250c      	movcc	r5, #12
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f7ff ffa5 	bl	8008a24 <sbrk_aligned>
 8008ada:	3001      	adds	r0, #1
 8008adc:	d02b      	beq.n	8008b36 <_malloc_r+0xd2>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	442b      	add	r3, r5
 8008ae2:	6023      	str	r3, [r4, #0]
 8008ae4:	e00e      	b.n	8008b04 <_malloc_r+0xa0>
 8008ae6:	6822      	ldr	r2, [r4, #0]
 8008ae8:	1b52      	subs	r2, r2, r5
 8008aea:	d41e      	bmi.n	8008b2a <_malloc_r+0xc6>
 8008aec:	2a0b      	cmp	r2, #11
 8008aee:	d916      	bls.n	8008b1e <_malloc_r+0xba>
 8008af0:	1961      	adds	r1, r4, r5
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	6025      	str	r5, [r4, #0]
 8008af6:	bf18      	it	ne
 8008af8:	6059      	strne	r1, [r3, #4]
 8008afa:	6863      	ldr	r3, [r4, #4]
 8008afc:	bf08      	it	eq
 8008afe:	6031      	streq	r1, [r6, #0]
 8008b00:	5162      	str	r2, [r4, r5]
 8008b02:	604b      	str	r3, [r1, #4]
 8008b04:	4638      	mov	r0, r7
 8008b06:	f104 060b 	add.w	r6, r4, #11
 8008b0a:	f000 fab3 	bl	8009074 <__malloc_unlock>
 8008b0e:	f026 0607 	bic.w	r6, r6, #7
 8008b12:	1d23      	adds	r3, r4, #4
 8008b14:	1af2      	subs	r2, r6, r3
 8008b16:	d0b6      	beq.n	8008a86 <_malloc_r+0x22>
 8008b18:	1b9b      	subs	r3, r3, r6
 8008b1a:	50a3      	str	r3, [r4, r2]
 8008b1c:	e7b3      	b.n	8008a86 <_malloc_r+0x22>
 8008b1e:	6862      	ldr	r2, [r4, #4]
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	bf0c      	ite	eq
 8008b24:	6032      	streq	r2, [r6, #0]
 8008b26:	605a      	strne	r2, [r3, #4]
 8008b28:	e7ec      	b.n	8008b04 <_malloc_r+0xa0>
 8008b2a:	4623      	mov	r3, r4
 8008b2c:	6864      	ldr	r4, [r4, #4]
 8008b2e:	e7b2      	b.n	8008a96 <_malloc_r+0x32>
 8008b30:	4634      	mov	r4, r6
 8008b32:	6876      	ldr	r6, [r6, #4]
 8008b34:	e7b9      	b.n	8008aaa <_malloc_r+0x46>
 8008b36:	230c      	movs	r3, #12
 8008b38:	603b      	str	r3, [r7, #0]
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f000 fa9a 	bl	8009074 <__malloc_unlock>
 8008b40:	e7a1      	b.n	8008a86 <_malloc_r+0x22>
 8008b42:	6025      	str	r5, [r4, #0]
 8008b44:	e7de      	b.n	8008b04 <_malloc_r+0xa0>
 8008b46:	bf00      	nop
 8008b48:	24000954 	.word	0x24000954

08008b4c <__sfputc_r>:
 8008b4c:	6893      	ldr	r3, [r2, #8]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	b410      	push	{r4}
 8008b54:	6093      	str	r3, [r2, #8]
 8008b56:	da08      	bge.n	8008b6a <__sfputc_r+0x1e>
 8008b58:	6994      	ldr	r4, [r2, #24]
 8008b5a:	42a3      	cmp	r3, r4
 8008b5c:	db01      	blt.n	8008b62 <__sfputc_r+0x16>
 8008b5e:	290a      	cmp	r1, #10
 8008b60:	d103      	bne.n	8008b6a <__sfputc_r+0x1e>
 8008b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b66:	f7fe ba81 	b.w	800706c <__swbuf_r>
 8008b6a:	6813      	ldr	r3, [r2, #0]
 8008b6c:	1c58      	adds	r0, r3, #1
 8008b6e:	6010      	str	r0, [r2, #0]
 8008b70:	7019      	strb	r1, [r3, #0]
 8008b72:	4608      	mov	r0, r1
 8008b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <__sfputs_r>:
 8008b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	460f      	mov	r7, r1
 8008b80:	4614      	mov	r4, r2
 8008b82:	18d5      	adds	r5, r2, r3
 8008b84:	42ac      	cmp	r4, r5
 8008b86:	d101      	bne.n	8008b8c <__sfputs_r+0x12>
 8008b88:	2000      	movs	r0, #0
 8008b8a:	e007      	b.n	8008b9c <__sfputs_r+0x22>
 8008b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b90:	463a      	mov	r2, r7
 8008b92:	4630      	mov	r0, r6
 8008b94:	f7ff ffda 	bl	8008b4c <__sfputc_r>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d1f3      	bne.n	8008b84 <__sfputs_r+0xa>
 8008b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ba0 <_vfiprintf_r>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	460d      	mov	r5, r1
 8008ba6:	b09d      	sub	sp, #116	; 0x74
 8008ba8:	4614      	mov	r4, r2
 8008baa:	4698      	mov	r8, r3
 8008bac:	4606      	mov	r6, r0
 8008bae:	b118      	cbz	r0, 8008bb8 <_vfiprintf_r+0x18>
 8008bb0:	6983      	ldr	r3, [r0, #24]
 8008bb2:	b90b      	cbnz	r3, 8008bb8 <_vfiprintf_r+0x18>
 8008bb4:	f7ff fa30 	bl	8008018 <__sinit>
 8008bb8:	4b89      	ldr	r3, [pc, #548]	; (8008de0 <_vfiprintf_r+0x240>)
 8008bba:	429d      	cmp	r5, r3
 8008bbc:	d11b      	bne.n	8008bf6 <_vfiprintf_r+0x56>
 8008bbe:	6875      	ldr	r5, [r6, #4]
 8008bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bc2:	07d9      	lsls	r1, r3, #31
 8008bc4:	d405      	bmi.n	8008bd2 <_vfiprintf_r+0x32>
 8008bc6:	89ab      	ldrh	r3, [r5, #12]
 8008bc8:	059a      	lsls	r2, r3, #22
 8008bca:	d402      	bmi.n	8008bd2 <_vfiprintf_r+0x32>
 8008bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bce:	f7ff fac6 	bl	800815e <__retarget_lock_acquire_recursive>
 8008bd2:	89ab      	ldrh	r3, [r5, #12]
 8008bd4:	071b      	lsls	r3, r3, #28
 8008bd6:	d501      	bpl.n	8008bdc <_vfiprintf_r+0x3c>
 8008bd8:	692b      	ldr	r3, [r5, #16]
 8008bda:	b9eb      	cbnz	r3, 8008c18 <_vfiprintf_r+0x78>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7fe fa96 	bl	8007110 <__swsetup_r>
 8008be4:	b1c0      	cbz	r0, 8008c18 <_vfiprintf_r+0x78>
 8008be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008be8:	07dc      	lsls	r4, r3, #31
 8008bea:	d50e      	bpl.n	8008c0a <_vfiprintf_r+0x6a>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	b01d      	add	sp, #116	; 0x74
 8008bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf6:	4b7b      	ldr	r3, [pc, #492]	; (8008de4 <_vfiprintf_r+0x244>)
 8008bf8:	429d      	cmp	r5, r3
 8008bfa:	d101      	bne.n	8008c00 <_vfiprintf_r+0x60>
 8008bfc:	68b5      	ldr	r5, [r6, #8]
 8008bfe:	e7df      	b.n	8008bc0 <_vfiprintf_r+0x20>
 8008c00:	4b79      	ldr	r3, [pc, #484]	; (8008de8 <_vfiprintf_r+0x248>)
 8008c02:	429d      	cmp	r5, r3
 8008c04:	bf08      	it	eq
 8008c06:	68f5      	ldreq	r5, [r6, #12]
 8008c08:	e7da      	b.n	8008bc0 <_vfiprintf_r+0x20>
 8008c0a:	89ab      	ldrh	r3, [r5, #12]
 8008c0c:	0598      	lsls	r0, r3, #22
 8008c0e:	d4ed      	bmi.n	8008bec <_vfiprintf_r+0x4c>
 8008c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c12:	f7ff faa5 	bl	8008160 <__retarget_lock_release_recursive>
 8008c16:	e7e9      	b.n	8008bec <_vfiprintf_r+0x4c>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1c:	2320      	movs	r3, #32
 8008c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c26:	2330      	movs	r3, #48	; 0x30
 8008c28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008dec <_vfiprintf_r+0x24c>
 8008c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c30:	f04f 0901 	mov.w	r9, #1
 8008c34:	4623      	mov	r3, r4
 8008c36:	469a      	mov	sl, r3
 8008c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c3c:	b10a      	cbz	r2, 8008c42 <_vfiprintf_r+0xa2>
 8008c3e:	2a25      	cmp	r2, #37	; 0x25
 8008c40:	d1f9      	bne.n	8008c36 <_vfiprintf_r+0x96>
 8008c42:	ebba 0b04 	subs.w	fp, sl, r4
 8008c46:	d00b      	beq.n	8008c60 <_vfiprintf_r+0xc0>
 8008c48:	465b      	mov	r3, fp
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f7ff ff93 	bl	8008b7a <__sfputs_r>
 8008c54:	3001      	adds	r0, #1
 8008c56:	f000 80aa 	beq.w	8008dae <_vfiprintf_r+0x20e>
 8008c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c5c:	445a      	add	r2, fp
 8008c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c60:	f89a 3000 	ldrb.w	r3, [sl]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 80a2 	beq.w	8008dae <_vfiprintf_r+0x20e>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c74:	f10a 0a01 	add.w	sl, sl, #1
 8008c78:	9304      	str	r3, [sp, #16]
 8008c7a:	9307      	str	r3, [sp, #28]
 8008c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c80:	931a      	str	r3, [sp, #104]	; 0x68
 8008c82:	4654      	mov	r4, sl
 8008c84:	2205      	movs	r2, #5
 8008c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8a:	4858      	ldr	r0, [pc, #352]	; (8008dec <_vfiprintf_r+0x24c>)
 8008c8c:	f7f7 fb30 	bl	80002f0 <memchr>
 8008c90:	9a04      	ldr	r2, [sp, #16]
 8008c92:	b9d8      	cbnz	r0, 8008ccc <_vfiprintf_r+0x12c>
 8008c94:	06d1      	lsls	r1, r2, #27
 8008c96:	bf44      	itt	mi
 8008c98:	2320      	movmi	r3, #32
 8008c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c9e:	0713      	lsls	r3, r2, #28
 8008ca0:	bf44      	itt	mi
 8008ca2:	232b      	movmi	r3, #43	; 0x2b
 8008ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cac:	2b2a      	cmp	r3, #42	; 0x2a
 8008cae:	d015      	beq.n	8008cdc <_vfiprintf_r+0x13c>
 8008cb0:	9a07      	ldr	r2, [sp, #28]
 8008cb2:	4654      	mov	r4, sl
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	f04f 0c0a 	mov.w	ip, #10
 8008cba:	4621      	mov	r1, r4
 8008cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc0:	3b30      	subs	r3, #48	; 0x30
 8008cc2:	2b09      	cmp	r3, #9
 8008cc4:	d94e      	bls.n	8008d64 <_vfiprintf_r+0x1c4>
 8008cc6:	b1b0      	cbz	r0, 8008cf6 <_vfiprintf_r+0x156>
 8008cc8:	9207      	str	r2, [sp, #28]
 8008cca:	e014      	b.n	8008cf6 <_vfiprintf_r+0x156>
 8008ccc:	eba0 0308 	sub.w	r3, r0, r8
 8008cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	9304      	str	r3, [sp, #16]
 8008cd8:	46a2      	mov	sl, r4
 8008cda:	e7d2      	b.n	8008c82 <_vfiprintf_r+0xe2>
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	1d19      	adds	r1, r3, #4
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	9103      	str	r1, [sp, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bfbb      	ittet	lt
 8008ce8:	425b      	neglt	r3, r3
 8008cea:	f042 0202 	orrlt.w	r2, r2, #2
 8008cee:	9307      	strge	r3, [sp, #28]
 8008cf0:	9307      	strlt	r3, [sp, #28]
 8008cf2:	bfb8      	it	lt
 8008cf4:	9204      	strlt	r2, [sp, #16]
 8008cf6:	7823      	ldrb	r3, [r4, #0]
 8008cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8008cfa:	d10c      	bne.n	8008d16 <_vfiprintf_r+0x176>
 8008cfc:	7863      	ldrb	r3, [r4, #1]
 8008cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008d00:	d135      	bne.n	8008d6e <_vfiprintf_r+0x1ce>
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	1d1a      	adds	r2, r3, #4
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	9203      	str	r2, [sp, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	bfb8      	it	lt
 8008d0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d12:	3402      	adds	r4, #2
 8008d14:	9305      	str	r3, [sp, #20]
 8008d16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008dfc <_vfiprintf_r+0x25c>
 8008d1a:	7821      	ldrb	r1, [r4, #0]
 8008d1c:	2203      	movs	r2, #3
 8008d1e:	4650      	mov	r0, sl
 8008d20:	f7f7 fae6 	bl	80002f0 <memchr>
 8008d24:	b140      	cbz	r0, 8008d38 <_vfiprintf_r+0x198>
 8008d26:	2340      	movs	r3, #64	; 0x40
 8008d28:	eba0 000a 	sub.w	r0, r0, sl
 8008d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	4303      	orrs	r3, r0
 8008d34:	3401      	adds	r4, #1
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3c:	482c      	ldr	r0, [pc, #176]	; (8008df0 <_vfiprintf_r+0x250>)
 8008d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d42:	2206      	movs	r2, #6
 8008d44:	f7f7 fad4 	bl	80002f0 <memchr>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d03f      	beq.n	8008dcc <_vfiprintf_r+0x22c>
 8008d4c:	4b29      	ldr	r3, [pc, #164]	; (8008df4 <_vfiprintf_r+0x254>)
 8008d4e:	bb1b      	cbnz	r3, 8008d98 <_vfiprintf_r+0x1f8>
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	3307      	adds	r3, #7
 8008d54:	f023 0307 	bic.w	r3, r3, #7
 8008d58:	3308      	adds	r3, #8
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5e:	443b      	add	r3, r7
 8008d60:	9309      	str	r3, [sp, #36]	; 0x24
 8008d62:	e767      	b.n	8008c34 <_vfiprintf_r+0x94>
 8008d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d68:	460c      	mov	r4, r1
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	e7a5      	b.n	8008cba <_vfiprintf_r+0x11a>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	3401      	adds	r4, #1
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	4619      	mov	r1, r3
 8008d76:	f04f 0c0a 	mov.w	ip, #10
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d80:	3a30      	subs	r2, #48	; 0x30
 8008d82:	2a09      	cmp	r2, #9
 8008d84:	d903      	bls.n	8008d8e <_vfiprintf_r+0x1ee>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0c5      	beq.n	8008d16 <_vfiprintf_r+0x176>
 8008d8a:	9105      	str	r1, [sp, #20]
 8008d8c:	e7c3      	b.n	8008d16 <_vfiprintf_r+0x176>
 8008d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d92:	4604      	mov	r4, r0
 8008d94:	2301      	movs	r3, #1
 8008d96:	e7f0      	b.n	8008d7a <_vfiprintf_r+0x1da>
 8008d98:	ab03      	add	r3, sp, #12
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	4b16      	ldr	r3, [pc, #88]	; (8008df8 <_vfiprintf_r+0x258>)
 8008da0:	a904      	add	r1, sp, #16
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7fd fd0c 	bl	80067c0 <_printf_float>
 8008da8:	4607      	mov	r7, r0
 8008daa:	1c78      	adds	r0, r7, #1
 8008dac:	d1d6      	bne.n	8008d5c <_vfiprintf_r+0x1bc>
 8008dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008db0:	07d9      	lsls	r1, r3, #31
 8008db2:	d405      	bmi.n	8008dc0 <_vfiprintf_r+0x220>
 8008db4:	89ab      	ldrh	r3, [r5, #12]
 8008db6:	059a      	lsls	r2, r3, #22
 8008db8:	d402      	bmi.n	8008dc0 <_vfiprintf_r+0x220>
 8008dba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dbc:	f7ff f9d0 	bl	8008160 <__retarget_lock_release_recursive>
 8008dc0:	89ab      	ldrh	r3, [r5, #12]
 8008dc2:	065b      	lsls	r3, r3, #25
 8008dc4:	f53f af12 	bmi.w	8008bec <_vfiprintf_r+0x4c>
 8008dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dca:	e711      	b.n	8008bf0 <_vfiprintf_r+0x50>
 8008dcc:	ab03      	add	r3, sp, #12
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	462a      	mov	r2, r5
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <_vfiprintf_r+0x258>)
 8008dd4:	a904      	add	r1, sp, #16
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f7fd ff7e 	bl	8006cd8 <_printf_i>
 8008ddc:	e7e4      	b.n	8008da8 <_vfiprintf_r+0x208>
 8008dde:	bf00      	nop
 8008de0:	080092e0 	.word	0x080092e0
 8008de4:	08009300 	.word	0x08009300
 8008de8:	080092c0 	.word	0x080092c0
 8008dec:	0800947c 	.word	0x0800947c
 8008df0:	08009486 	.word	0x08009486
 8008df4:	080067c1 	.word	0x080067c1
 8008df8:	08008b7b 	.word	0x08008b7b
 8008dfc:	08009482 	.word	0x08009482

08008e00 <_putc_r>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	460d      	mov	r5, r1
 8008e04:	4614      	mov	r4, r2
 8008e06:	4606      	mov	r6, r0
 8008e08:	b118      	cbz	r0, 8008e12 <_putc_r+0x12>
 8008e0a:	6983      	ldr	r3, [r0, #24]
 8008e0c:	b90b      	cbnz	r3, 8008e12 <_putc_r+0x12>
 8008e0e:	f7ff f903 	bl	8008018 <__sinit>
 8008e12:	4b1c      	ldr	r3, [pc, #112]	; (8008e84 <_putc_r+0x84>)
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d124      	bne.n	8008e62 <_putc_r+0x62>
 8008e18:	6874      	ldr	r4, [r6, #4]
 8008e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e1c:	07d8      	lsls	r0, r3, #31
 8008e1e:	d405      	bmi.n	8008e2c <_putc_r+0x2c>
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	0599      	lsls	r1, r3, #22
 8008e24:	d402      	bmi.n	8008e2c <_putc_r+0x2c>
 8008e26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e28:	f7ff f999 	bl	800815e <__retarget_lock_acquire_recursive>
 8008e2c:	68a3      	ldr	r3, [r4, #8]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	60a3      	str	r3, [r4, #8]
 8008e34:	da05      	bge.n	8008e42 <_putc_r+0x42>
 8008e36:	69a2      	ldr	r2, [r4, #24]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	db1c      	blt.n	8008e76 <_putc_r+0x76>
 8008e3c:	b2eb      	uxtb	r3, r5
 8008e3e:	2b0a      	cmp	r3, #10
 8008e40:	d019      	beq.n	8008e76 <_putc_r+0x76>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	6022      	str	r2, [r4, #0]
 8008e48:	701d      	strb	r5, [r3, #0]
 8008e4a:	b2ed      	uxtb	r5, r5
 8008e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e4e:	07da      	lsls	r2, r3, #31
 8008e50:	d405      	bmi.n	8008e5e <_putc_r+0x5e>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	059b      	lsls	r3, r3, #22
 8008e56:	d402      	bmi.n	8008e5e <_putc_r+0x5e>
 8008e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e5a:	f7ff f981 	bl	8008160 <__retarget_lock_release_recursive>
 8008e5e:	4628      	mov	r0, r5
 8008e60:	bd70      	pop	{r4, r5, r6, pc}
 8008e62:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <_putc_r+0x88>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	d101      	bne.n	8008e6c <_putc_r+0x6c>
 8008e68:	68b4      	ldr	r4, [r6, #8]
 8008e6a:	e7d6      	b.n	8008e1a <_putc_r+0x1a>
 8008e6c:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <_putc_r+0x8c>)
 8008e6e:	429c      	cmp	r4, r3
 8008e70:	bf08      	it	eq
 8008e72:	68f4      	ldreq	r4, [r6, #12]
 8008e74:	e7d1      	b.n	8008e1a <_putc_r+0x1a>
 8008e76:	4629      	mov	r1, r5
 8008e78:	4622      	mov	r2, r4
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7fe f8f6 	bl	800706c <__swbuf_r>
 8008e80:	4605      	mov	r5, r0
 8008e82:	e7e3      	b.n	8008e4c <_putc_r+0x4c>
 8008e84:	080092e0 	.word	0x080092e0
 8008e88:	08009300 	.word	0x08009300
 8008e8c:	080092c0 	.word	0x080092c0

08008e90 <_sbrk_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4d06      	ldr	r5, [pc, #24]	; (8008eac <_sbrk_r+0x1c>)
 8008e94:	2300      	movs	r3, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	602b      	str	r3, [r5, #0]
 8008e9c:	f7f8 f94a 	bl	8001134 <_sbrk>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_sbrk_r+0x1a>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_sbrk_r+0x1a>
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	2400095c 	.word	0x2400095c

08008eb0 <__sread>:
 8008eb0:	b510      	push	{r4, lr}
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb8:	f000 f8e2 	bl	8009080 <_read_r>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	bfab      	itete	ge
 8008ec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ec2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ec4:	181b      	addge	r3, r3, r0
 8008ec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008eca:	bfac      	ite	ge
 8008ecc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ece:	81a3      	strhlt	r3, [r4, #12]
 8008ed0:	bd10      	pop	{r4, pc}

08008ed2 <__swrite>:
 8008ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed6:	461f      	mov	r7, r3
 8008ed8:	898b      	ldrh	r3, [r1, #12]
 8008eda:	05db      	lsls	r3, r3, #23
 8008edc:	4605      	mov	r5, r0
 8008ede:	460c      	mov	r4, r1
 8008ee0:	4616      	mov	r6, r2
 8008ee2:	d505      	bpl.n	8008ef0 <__swrite+0x1e>
 8008ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee8:	2302      	movs	r3, #2
 8008eea:	2200      	movs	r2, #0
 8008eec:	f000 f898 	bl	8009020 <_lseek_r>
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008efa:	81a3      	strh	r3, [r4, #12]
 8008efc:	4632      	mov	r2, r6
 8008efe:	463b      	mov	r3, r7
 8008f00:	4628      	mov	r0, r5
 8008f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f06:	f000 b817 	b.w	8008f38 <_write_r>

08008f0a <__sseek>:
 8008f0a:	b510      	push	{r4, lr}
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f12:	f000 f885 	bl	8009020 <_lseek_r>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	bf15      	itete	ne
 8008f1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f26:	81a3      	strheq	r3, [r4, #12]
 8008f28:	bf18      	it	ne
 8008f2a:	81a3      	strhne	r3, [r4, #12]
 8008f2c:	bd10      	pop	{r4, pc}

08008f2e <__sclose>:
 8008f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f32:	f000 b831 	b.w	8008f98 <_close_r>
	...

08008f38 <_write_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d07      	ldr	r5, [pc, #28]	; (8008f58 <_write_r+0x20>)
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	4608      	mov	r0, r1
 8008f40:	4611      	mov	r1, r2
 8008f42:	2200      	movs	r2, #0
 8008f44:	602a      	str	r2, [r5, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	f7f8 f8a3 	bl	8001092 <_write>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	d102      	bne.n	8008f56 <_write_r+0x1e>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	b103      	cbz	r3, 8008f56 <_write_r+0x1e>
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	2400095c 	.word	0x2400095c

08008f5c <__assert_func>:
 8008f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f5e:	4614      	mov	r4, r2
 8008f60:	461a      	mov	r2, r3
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <__assert_func+0x2c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4605      	mov	r5, r0
 8008f68:	68d8      	ldr	r0, [r3, #12]
 8008f6a:	b14c      	cbz	r4, 8008f80 <__assert_func+0x24>
 8008f6c:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <__assert_func+0x30>)
 8008f6e:	9100      	str	r1, [sp, #0]
 8008f70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f74:	4906      	ldr	r1, [pc, #24]	; (8008f90 <__assert_func+0x34>)
 8008f76:	462b      	mov	r3, r5
 8008f78:	f000 f81e 	bl	8008fb8 <fiprintf>
 8008f7c:	f000 f89f 	bl	80090be <abort>
 8008f80:	4b04      	ldr	r3, [pc, #16]	; (8008f94 <__assert_func+0x38>)
 8008f82:	461c      	mov	r4, r3
 8008f84:	e7f3      	b.n	8008f6e <__assert_func+0x12>
 8008f86:	bf00      	nop
 8008f88:	24000010 	.word	0x24000010
 8008f8c:	0800948d 	.word	0x0800948d
 8008f90:	0800949a 	.word	0x0800949a
 8008f94:	080094c8 	.word	0x080094c8

08008f98 <_close_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4d06      	ldr	r5, [pc, #24]	; (8008fb4 <_close_r+0x1c>)
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	4608      	mov	r0, r1
 8008fa2:	602b      	str	r3, [r5, #0]
 8008fa4:	f7f8 f891 	bl	80010ca <_close>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_close_r+0x1a>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_close_r+0x1a>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	2400095c 	.word	0x2400095c

08008fb8 <fiprintf>:
 8008fb8:	b40e      	push	{r1, r2, r3}
 8008fba:	b503      	push	{r0, r1, lr}
 8008fbc:	4601      	mov	r1, r0
 8008fbe:	ab03      	add	r3, sp, #12
 8008fc0:	4805      	ldr	r0, [pc, #20]	; (8008fd8 <fiprintf+0x20>)
 8008fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc6:	6800      	ldr	r0, [r0, #0]
 8008fc8:	9301      	str	r3, [sp, #4]
 8008fca:	f7ff fde9 	bl	8008ba0 <_vfiprintf_r>
 8008fce:	b002      	add	sp, #8
 8008fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fd4:	b003      	add	sp, #12
 8008fd6:	4770      	bx	lr
 8008fd8:	24000010 	.word	0x24000010

08008fdc <_fstat_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d07      	ldr	r5, [pc, #28]	; (8008ffc <_fstat_r+0x20>)
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	602b      	str	r3, [r5, #0]
 8008fea:	f7f8 f87a 	bl	80010e2 <_fstat>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	d102      	bne.n	8008ff8 <_fstat_r+0x1c>
 8008ff2:	682b      	ldr	r3, [r5, #0]
 8008ff4:	b103      	cbz	r3, 8008ff8 <_fstat_r+0x1c>
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	bd38      	pop	{r3, r4, r5, pc}
 8008ffa:	bf00      	nop
 8008ffc:	2400095c 	.word	0x2400095c

08009000 <_isatty_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d06      	ldr	r5, [pc, #24]	; (800901c <_isatty_r+0x1c>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	f7f8 f879 	bl	8001102 <_isatty>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_isatty_r+0x1a>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_isatty_r+0x1a>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	2400095c 	.word	0x2400095c

08009020 <_lseek_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	; (8009040 <_lseek_r+0x20>)
 8009024:	4604      	mov	r4, r0
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	2200      	movs	r2, #0
 800902c:	602a      	str	r2, [r5, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	f7f8 f872 	bl	8001118 <_lseek>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d102      	bne.n	800903e <_lseek_r+0x1e>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b103      	cbz	r3, 800903e <_lseek_r+0x1e>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	2400095c 	.word	0x2400095c

08009044 <__ascii_mbtowc>:
 8009044:	b082      	sub	sp, #8
 8009046:	b901      	cbnz	r1, 800904a <__ascii_mbtowc+0x6>
 8009048:	a901      	add	r1, sp, #4
 800904a:	b142      	cbz	r2, 800905e <__ascii_mbtowc+0x1a>
 800904c:	b14b      	cbz	r3, 8009062 <__ascii_mbtowc+0x1e>
 800904e:	7813      	ldrb	r3, [r2, #0]
 8009050:	600b      	str	r3, [r1, #0]
 8009052:	7812      	ldrb	r2, [r2, #0]
 8009054:	1e10      	subs	r0, r2, #0
 8009056:	bf18      	it	ne
 8009058:	2001      	movne	r0, #1
 800905a:	b002      	add	sp, #8
 800905c:	4770      	bx	lr
 800905e:	4610      	mov	r0, r2
 8009060:	e7fb      	b.n	800905a <__ascii_mbtowc+0x16>
 8009062:	f06f 0001 	mvn.w	r0, #1
 8009066:	e7f8      	b.n	800905a <__ascii_mbtowc+0x16>

08009068 <__malloc_lock>:
 8009068:	4801      	ldr	r0, [pc, #4]	; (8009070 <__malloc_lock+0x8>)
 800906a:	f7ff b878 	b.w	800815e <__retarget_lock_acquire_recursive>
 800906e:	bf00      	nop
 8009070:	24000950 	.word	0x24000950

08009074 <__malloc_unlock>:
 8009074:	4801      	ldr	r0, [pc, #4]	; (800907c <__malloc_unlock+0x8>)
 8009076:	f7ff b873 	b.w	8008160 <__retarget_lock_release_recursive>
 800907a:	bf00      	nop
 800907c:	24000950 	.word	0x24000950

08009080 <_read_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4d07      	ldr	r5, [pc, #28]	; (80090a0 <_read_r+0x20>)
 8009084:	4604      	mov	r4, r0
 8009086:	4608      	mov	r0, r1
 8009088:	4611      	mov	r1, r2
 800908a:	2200      	movs	r2, #0
 800908c:	602a      	str	r2, [r5, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	f7f7 ffe2 	bl	8001058 <_read>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_read_r+0x1e>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_read_r+0x1e>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	2400095c 	.word	0x2400095c

080090a4 <__ascii_wctomb>:
 80090a4:	b149      	cbz	r1, 80090ba <__ascii_wctomb+0x16>
 80090a6:	2aff      	cmp	r2, #255	; 0xff
 80090a8:	bf85      	ittet	hi
 80090aa:	238a      	movhi	r3, #138	; 0x8a
 80090ac:	6003      	strhi	r3, [r0, #0]
 80090ae:	700a      	strbls	r2, [r1, #0]
 80090b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80090b4:	bf98      	it	ls
 80090b6:	2001      	movls	r0, #1
 80090b8:	4770      	bx	lr
 80090ba:	4608      	mov	r0, r1
 80090bc:	4770      	bx	lr

080090be <abort>:
 80090be:	b508      	push	{r3, lr}
 80090c0:	2006      	movs	r0, #6
 80090c2:	f000 f82b 	bl	800911c <raise>
 80090c6:	2001      	movs	r0, #1
 80090c8:	f7f7 ffbc 	bl	8001044 <_exit>

080090cc <_raise_r>:
 80090cc:	291f      	cmp	r1, #31
 80090ce:	b538      	push	{r3, r4, r5, lr}
 80090d0:	4604      	mov	r4, r0
 80090d2:	460d      	mov	r5, r1
 80090d4:	d904      	bls.n	80090e0 <_raise_r+0x14>
 80090d6:	2316      	movs	r3, #22
 80090d8:	6003      	str	r3, [r0, #0]
 80090da:	f04f 30ff 	mov.w	r0, #4294967295
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090e2:	b112      	cbz	r2, 80090ea <_raise_r+0x1e>
 80090e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090e8:	b94b      	cbnz	r3, 80090fe <_raise_r+0x32>
 80090ea:	4620      	mov	r0, r4
 80090ec:	f000 f830 	bl	8009150 <_getpid_r>
 80090f0:	462a      	mov	r2, r5
 80090f2:	4601      	mov	r1, r0
 80090f4:	4620      	mov	r0, r4
 80090f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090fa:	f000 b817 	b.w	800912c <_kill_r>
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d00a      	beq.n	8009118 <_raise_r+0x4c>
 8009102:	1c59      	adds	r1, r3, #1
 8009104:	d103      	bne.n	800910e <_raise_r+0x42>
 8009106:	2316      	movs	r3, #22
 8009108:	6003      	str	r3, [r0, #0]
 800910a:	2001      	movs	r0, #1
 800910c:	e7e7      	b.n	80090de <_raise_r+0x12>
 800910e:	2400      	movs	r4, #0
 8009110:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009114:	4628      	mov	r0, r5
 8009116:	4798      	blx	r3
 8009118:	2000      	movs	r0, #0
 800911a:	e7e0      	b.n	80090de <_raise_r+0x12>

0800911c <raise>:
 800911c:	4b02      	ldr	r3, [pc, #8]	; (8009128 <raise+0xc>)
 800911e:	4601      	mov	r1, r0
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	f7ff bfd3 	b.w	80090cc <_raise_r>
 8009126:	bf00      	nop
 8009128:	24000010 	.word	0x24000010

0800912c <_kill_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d07      	ldr	r5, [pc, #28]	; (800914c <_kill_r+0x20>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	4611      	mov	r1, r2
 8009138:	602b      	str	r3, [r5, #0]
 800913a:	f7f7 ff73 	bl	8001024 <_kill>
 800913e:	1c43      	adds	r3, r0, #1
 8009140:	d102      	bne.n	8009148 <_kill_r+0x1c>
 8009142:	682b      	ldr	r3, [r5, #0]
 8009144:	b103      	cbz	r3, 8009148 <_kill_r+0x1c>
 8009146:	6023      	str	r3, [r4, #0]
 8009148:	bd38      	pop	{r3, r4, r5, pc}
 800914a:	bf00      	nop
 800914c:	2400095c 	.word	0x2400095c

08009150 <_getpid_r>:
 8009150:	f7f7 bf60 	b.w	8001014 <_getpid>

08009154 <_init>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	bf00      	nop
 8009158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915a:	bc08      	pop	{r3}
 800915c:	469e      	mov	lr, r3
 800915e:	4770      	bx	lr

08009160 <_fini>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	bf00      	nop
 8009164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009166:	bc08      	pop	{r3}
 8009168:	469e      	mov	lr, r3
 800916a:	4770      	bx	lr
