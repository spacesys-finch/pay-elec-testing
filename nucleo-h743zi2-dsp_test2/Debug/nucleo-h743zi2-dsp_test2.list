
nucleo-h743zi2-dsp_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009048  08009048  00019048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  080094a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e0  08009684  000201e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000240  080096e4  00020240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  240002a0  08009744  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000960  08009744  00020960  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bd9  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b9a  00000000  00000000  00039ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0003ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  0003da78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e639  00000000  00000000  0003e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006fd4  00000000  00000000  0004cfd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000c5  00000000  00000000  00053fad  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000052dc  00000000  00000000  00054074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00000286  00000000  00000000  00059350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a0 	.word	0x240002a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800902c 	.word	0x0800902c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a4 	.word	0x240002a4
 80002dc:	0800902c 	.word	0x0800902c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 fdff 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f843 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 f98b 	bl	80009bc <MX_GPIO_Init>
  MX_ETH_Init();
 80006a6:	f000 f8bf 	bl	8000828 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006aa:	f000 f909 	bl	80008c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006ae:	f000 f953 	bl	8000958 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* try out ARM dot product */
  float32_t vectorA [] = {1,2,3};
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <main+0x80>)
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float32_t vectorB [] = {1,2,3};
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <main+0x80>)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint32_t blockSize = 3;
 80006c8:	2303      	movs	r3, #3
 80006ca:	61fb      	str	r3, [r7, #28]
  float32_t result = 999;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <main+0x84>)
 80006ce:	603b      	str	r3, [r7, #0]


  // uart buffer stuff
  printf("initial result: %f\n", result);
 80006d0:	edd7 7a00 	vldr	s15, [r7]
 80006d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006d8:	ec53 2b17 	vmov	r2, r3, d7
 80006dc:	480f      	ldr	r0, [pc, #60]	; (800071c <main+0x88>)
 80006de:	f006 fbed 	bl	8006ebc <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("hello world\n");
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <main+0x8c>)
 80006e4:	f006 fc70 	bl	8006fc8 <puts>
	  HAL_Delay(500);
 80006e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ec:	f000 fe68 	bl	80013c0 <HAL_Delay>

	  arm_dot_prod_f32(vectorA, vectorB, blockSize, &result);
 80006f0:	463b      	mov	r3, r7
 80006f2:	1d39      	adds	r1, r7, #4
 80006f4:	f107 0010 	add.w	r0, r7, #16
 80006f8:	69fa      	ldr	r2, [r7, #28]
 80006fa:	f005 ff0f 	bl	800651c <arm_dot_prod_f32>

	  printf("result: %.1f\n", result);
 80006fe:	edd7 7a00 	vldr	s15, [r7]
 8000702:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000706:	ec53 2b17 	vmov	r2, r3, d7
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <main+0x90>)
 800070c:	f006 fbd6 	bl	8006ebc <iprintf>
	  printf("hello world\n");
 8000710:	e7e7      	b.n	80006e2 <main+0x4e>
 8000712:	bf00      	nop
 8000714:	08009078 	.word	0x08009078
 8000718:	4479c000 	.word	0x4479c000
 800071c:	08009048 	.word	0x08009048
 8000720:	0800905c 	.word	0x0800905c
 8000724:	08009068 	.word	0x08009068

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09c      	sub	sp, #112	; 0x70
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000732:	224c      	movs	r2, #76	; 0x4c
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f005 ff76 	bl	8006628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2220      	movs	r2, #32
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 ff70 	bl	8006628 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000748:	2002      	movs	r0, #2
 800074a:	f001 fe97 	bl	800247c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b33      	ldr	r3, [pc, #204]	; (8000820 <SystemClock_Config+0xf8>)
 8000754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000756:	4a32      	ldr	r2, [pc, #200]	; (8000820 <SystemClock_Config+0xf8>)
 8000758:	f023 0301 	bic.w	r3, r3, #1
 800075c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800075e:	4b30      	ldr	r3, [pc, #192]	; (8000820 <SystemClock_Config+0xf8>)
 8000760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <SystemClock_Config+0xfc>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000770:	4a2c      	ldr	r2, [pc, #176]	; (8000824 <SystemClock_Config+0xfc>)
 8000772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <SystemClock_Config+0xfc>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000784:	bf00      	nop
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <SystemClock_Config+0xfc>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000792:	d1f8      	bne.n	8000786 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000794:	2303      	movs	r3, #3
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000798:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800079e:	2301      	movs	r3, #1
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2340      	movs	r3, #64	; 0x40
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007b2:	2318      	movs	r3, #24
 80007b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c2:	230c      	movs	r3, #12
 80007c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fe9c 	bl	8002510 <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007de:	f000 f9ed 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	233f      	movs	r3, #63	; 0x3f
 80007e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2101      	movs	r1, #1
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fab0 	bl	8002d6c <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000812:	f000 f9d3 	bl	8000bbc <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3770      	adds	r7, #112	; 0x70
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58000400 	.word	0x58000400
 8000824:	58024800 	.word	0x58024800

08000828 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_ETH_Init+0x80>)
 800082e:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <MX_ETH_Init+0x84>)
 8000830:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_ETH_Init+0x88>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_ETH_Init+0x88>)
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_ETH_Init+0x88>)
 8000840:	22e1      	movs	r2, #225	; 0xe1
 8000842:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_ETH_Init+0x88>)
 8000846:	2200      	movs	r2, #0
 8000848:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_ETH_Init+0x88>)
 800084c:	2200      	movs	r2, #0
 800084e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_ETH_Init+0x88>)
 8000852:	2200      	movs	r2, #0
 8000854:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_ETH_Init+0x80>)
 8000858:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <MX_ETH_Init+0x88>)
 800085a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_ETH_Init+0x80>)
 800085e:	2201      	movs	r2, #1
 8000860:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_ETH_Init+0x80>)
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <MX_ETH_Init+0x8c>)
 8000866:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_ETH_Init+0x80>)
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <MX_ETH_Init+0x90>)
 800086c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_ETH_Init+0x80>)
 8000870:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000874:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_ETH_Init+0x80>)
 8000878:	f000 feca 	bl	8001610 <HAL_ETH_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000882:	f000 f99b 	bl	8000bbc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000886:	2238      	movs	r2, #56	; 0x38
 8000888:	2100      	movs	r1, #0
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_ETH_Init+0x94>)
 800088c:	f005 fecc 	bl	8006628 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_ETH_Init+0x94>)
 8000892:	2221      	movs	r2, #33	; 0x21
 8000894:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_ETH_Init+0x94>)
 8000898:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800089c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_ETH_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	240002f4 	.word	0x240002f4
 80008ac:	40028000 	.word	0x40028000
 80008b0:	24000940 	.word	0x24000940
 80008b4:	24000240 	.word	0x24000240
 80008b8:	240001e0 	.word	0x240001e0
 80008bc:	240002bc 	.word	0x240002bc

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008c6:	4a23      	ldr	r2, [pc, #140]	; (8000954 <MX_USART3_UART_Init+0x94>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800090a:	f004 f923 	bl	8004b54 <HAL_UART_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f952 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800091c:	f005 fa2a 	bl	8005d74 <HAL_UARTEx_SetTxFifoThreshold>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000926:	f000 f949 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4808      	ldr	r0, [pc, #32]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800092e:	f005 fa5f 	bl	8005df0 <HAL_UARTEx_SetRxFifoThreshold>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 f940 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800093e:	f005 f9e0 	bl	8005d02 <HAL_UARTEx_DisableFifoMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 f938 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	240003a4 	.word	0x240003a4
 8000954:	40004800 	.word	0x40004800

08000958 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000960:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000964:	2209      	movs	r2, #9
 8000966:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096a:	2202      	movs	r2, #2
 800096c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000976:	2202      	movs	r2, #2
 8000978:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097c:	2201      	movs	r2, #1
 800097e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098e:	2201      	movs	r2, #1
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000994:	2201      	movs	r2, #1
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a0:	f001 fc23 	bl	80021ea <HAL_PCD_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009aa:	f000 f907 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	24000434 	.word	0x24000434
 80009b8:	40080000 	.word	0x40080000

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b62      	ldr	r3, [pc, #392]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a60      	ldr	r2, [pc, #384]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b5e      	ldr	r3, [pc, #376]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f0:	4b5a      	ldr	r3, [pc, #360]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	4a59      	ldr	r2, [pc, #356]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a00:	4b56      	ldr	r3, [pc, #344]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b53      	ldr	r3, [pc, #332]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a51      	ldr	r2, [pc, #324]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b4f      	ldr	r3, [pc, #316]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b4b      	ldr	r3, [pc, #300]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a4a      	ldr	r2, [pc, #296]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b47      	ldr	r3, [pc, #284]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a42      	ldr	r2, [pc, #264]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a68:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	4a3b      	ldr	r2, [pc, #236]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a78:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a33      	ldr	r2, [pc, #204]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000aaa:	482d      	ldr	r0, [pc, #180]	; (8000b60 <MX_GPIO_Init+0x1a4>)
 8000aac:	f001 fb84 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab6:	482b      	ldr	r0, [pc, #172]	; (8000b64 <MX_GPIO_Init+0x1a8>)
 8000ab8:	f001 fb7e 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4829      	ldr	r0, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x1ac>)
 8000ac2:	f001 fb79 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4824      	ldr	r0, [pc, #144]	; (8000b6c <MX_GPIO_Init+0x1b0>)
 8000adc:	f001 f9bc 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ae0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4819      	ldr	r0, [pc, #100]	; (8000b60 <MX_GPIO_Init+0x1a4>)
 8000afa:	f001 f9ad 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	4813      	ldr	r0, [pc, #76]	; (8000b64 <MX_GPIO_Init+0x1a8>)
 8000b18:	f001 f99e 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480f      	ldr	r0, [pc, #60]	; (8000b70 <MX_GPIO_Init+0x1b4>)
 8000b32:	f001 f991 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <MX_GPIO_Init+0x1ac>)
 8000b4e:	f001 f983 	bl	8001e58 <HAL_GPIO_Init>

}
 8000b52:	bf00      	nop
 8000b54:	3730      	adds	r7, #48	; 0x30
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020400 	.word	0x58020400
 8000b64:	58020c00 	.word	0x58020c00
 8000b68:	58021000 	.word	0x58021000
 8000b6c:	58020800 	.word	0x58020800
 8000b70:	58021800 	.word	0x58021800

08000b74 <__io_putchar>:
  * @param  None
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the LPUART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000b7c:	1d39      	adds	r1, r7, #4
 8000b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b82:	2201      	movs	r2, #1
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <__io_putchar+0x20>)
 8000b86:	f004 f835 	bl	8004bf4 <HAL_UART_Transmit>

  return ch;
 8000b8a:	687b      	ldr	r3, [r7, #4]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	240003a4 	.word	0x240003a4

08000b98 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_UART_Receive(&huart3, &ch, 1, 0xFFFF);
 8000b9e:	1df9      	adds	r1, r7, #7
 8000ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <__io_getchar+0x20>)
 8000ba8:	f004 f8ba 	bl	8004d20 <HAL_UART_Receive>

	return ch;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	240003a4 	.word	0x240003a4

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_MspInit+0x30>)
 8000bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd4:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_MspInit+0x30>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_MspInit+0x30>)
 8000be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	58024400 	.word	0x58024400

08000bfc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a59      	ldr	r2, [pc, #356]	; (8000d80 <HAL_ETH_MspInit+0x184>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	f040 80ab 	bne.w	8000d76 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c20:	4b58      	ldr	r3, [pc, #352]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c26:	4a57      	ldr	r2, [pc, #348]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c30:	4b54      	ldr	r3, [pc, #336]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c3e:	4b51      	ldr	r3, [pc, #324]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c44:	4a4f      	ldr	r2, [pc, #316]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c4e:	4b4d      	ldr	r3, [pc, #308]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c5c:	4b49      	ldr	r3, [pc, #292]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c62:	4a48      	ldr	r2, [pc, #288]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c6c:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a40      	ldr	r2, [pc, #256]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b3e      	ldr	r3, [pc, #248]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a39      	ldr	r2, [pc, #228]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	4a2a      	ldr	r2, [pc, #168]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce4:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <HAL_ETH_MspInit+0x188>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cf2:	2332      	movs	r3, #50	; 0x32
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d02:	230b      	movs	r3, #11
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481e      	ldr	r0, [pc, #120]	; (8000d88 <HAL_ETH_MspInit+0x18c>)
 8000d0e:	f001 f8a3 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d12:	2386      	movs	r3, #134	; 0x86
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d22:	230b      	movs	r3, #11
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4817      	ldr	r0, [pc, #92]	; (8000d8c <HAL_ETH_MspInit+0x190>)
 8000d2e:	f001 f893 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d44:	230b      	movs	r3, #11
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4810      	ldr	r0, [pc, #64]	; (8000d90 <HAL_ETH_MspInit+0x194>)
 8000d50:	f001 f882 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d66:	230b      	movs	r3, #11
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <HAL_ETH_MspInit+0x198>)
 8000d72:	f001 f871 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3738      	adds	r7, #56	; 0x38
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40028000 	.word	0x40028000
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58020800 	.word	0x58020800
 8000d8c:	58020000 	.word	0x58020000
 8000d90:	58020400 	.word	0x58020400
 8000d94:	58021800 	.word	0x58021800

08000d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0b8      	sub	sp, #224	; 0xe0
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	22bc      	movs	r2, #188	; 0xbc
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f005 fc35 	bl	8006628 <memset>
  if(huart->Instance==USART3)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <HAL_UART_MspInit+0xc0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d142      	bne.n	8000e4e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fb54 	bl	8003484 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000de2:	f7ff feeb 	bl	8000bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_UART_MspInit+0xc8>)
 8000e4a:	f001 f805 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	37e0      	adds	r7, #224	; 0xe0
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40004800 	.word	0x40004800
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58020c00 	.word	0x58020c00

08000e64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0b8      	sub	sp, #224	; 0xe0
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	22bc      	movs	r2, #188	; 0xbc
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 fbcf 	bl	8006628 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <HAL_PCD_MspInit+0xe8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d156      	bne.n	8000f42 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 faec 	bl	8003484 <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000eb2:	f7ff fe83 	bl	8000bbc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000eb6:	f001 fb1b 	bl	80024f0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	4a23      	ldr	r2, [pc, #140]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ed8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000edc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000efc:	4619      	mov	r1, r3
 8000efe:	4815      	ldr	r0, [pc, #84]	; (8000f54 <HAL_PCD_MspInit+0xf0>)
 8000f00:	f000 ffaa 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <HAL_PCD_MspInit+0xf0>)
 8000f20:	f000 ff9a 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f30:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	37e0      	adds	r7, #224	; 0xe0
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40080000 	.word	0x40080000
 8000f50:	58024400 	.word	0x58024400
 8000f54:	58020000 	.word	0x58020000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f9ec 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	return 1;
 8000fb0:	2301      	movs	r3, #1
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_kill>:

int _kill(int pid, int sig)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fc6:	f005 fb05 	bl	80065d4 <__errno>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2216      	movs	r2, #22
 8000fce:	601a      	str	r2, [r3, #0]
	return -1;
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_exit>:

void _exit (int status)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffe7 	bl	8000fbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fee:	e7fe      	b.n	8000fee <_exit+0x12>

08000ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00a      	b.n	8001018 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001002:	f7ff fdc9 	bl	8000b98 <__io_getchar>
 8001006:	4601      	mov	r1, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf0      	blt.n	8001002 <_read+0x12>
	}

return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e009      	b.n	8001050 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	60ba      	str	r2, [r7, #8]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fd95 	bl	8000b74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf1      	blt.n	800103c <_write+0x12>
	}
	return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_close>:

int _close(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	return -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108a:	605a      	str	r2, [r3, #4]
	return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_isatty>:

int _isatty(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	return 1;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
	return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f005 fa6a 	bl	80065d4 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	24080000 	.word	0x24080000
 800112c:	00000400 	.word	0x00000400
 8001130:	24000948 	.word	0x24000948
 8001134:	24000960 	.word	0x24000960

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800113c:	4b37      	ldr	r3, [pc, #220]	; (800121c <SystemInit+0xe4>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a36      	ldr	r2, [pc, #216]	; (800121c <SystemInit+0xe4>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800114c:	4b34      	ldr	r3, [pc, #208]	; (8001220 <SystemInit+0xe8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	2b06      	cmp	r3, #6
 8001156:	d807      	bhi.n	8001168 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001158:	4b31      	ldr	r3, [pc, #196]	; (8001220 <SystemInit+0xe8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 030f 	bic.w	r3, r3, #15
 8001160:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <SystemInit+0xe8>)
 8001162:	f043 0307 	orr.w	r3, r3, #7
 8001166:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <SystemInit+0xec>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <SystemInit+0xec>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <SystemInit+0xec>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <SystemInit+0xec>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4929      	ldr	r1, [pc, #164]	; (8001224 <SystemInit+0xec>)
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <SystemInit+0xf0>)
 8001182:	4013      	ands	r3, r2
 8001184:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <SystemInit+0xe8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001192:	4b23      	ldr	r3, [pc, #140]	; (8001220 <SystemInit+0xe8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 030f 	bic.w	r3, r3, #15
 800119a:	4a21      	ldr	r2, [pc, #132]	; (8001220 <SystemInit+0xe8>)
 800119c:	f043 0307 	orr.w	r3, r3, #7
 80011a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <SystemInit+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <SystemInit+0xec>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <SystemInit+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <SystemInit+0xec>)
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <SystemInit+0xf4>)
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <SystemInit+0xec>)
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <SystemInit+0xf8>)
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <SystemInit+0xec>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <SystemInit+0xfc>)
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <SystemInit+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <SystemInit+0xec>)
 80011ce:	4a19      	ldr	r2, [pc, #100]	; (8001234 <SystemInit+0xfc>)
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <SystemInit+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <SystemInit+0xec>)
 80011da:	4a16      	ldr	r2, [pc, #88]	; (8001234 <SystemInit+0xfc>)
 80011dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <SystemInit+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <SystemInit+0xec>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <SystemInit+0xec>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <SystemInit+0xec>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <SystemInit+0x100>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <SystemInit+0x104>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001202:	d202      	bcs.n	800120a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <SystemInit+0x108>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <SystemInit+0x10c>)
 800120c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001210:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00
 8001220:	52002000 	.word	0x52002000
 8001224:	58024400 	.word	0x58024400
 8001228:	eaf6ed7f 	.word	0xeaf6ed7f
 800122c:	02020200 	.word	0x02020200
 8001230:	01ff0000 	.word	0x01ff0000
 8001234:	01010280 	.word	0x01010280
 8001238:	5c001000 	.word	0x5c001000
 800123c:	ffff0000 	.word	0xffff0000
 8001240:	51008108 	.word	0x51008108
 8001244:	52004000 	.word	0x52004000

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800124c:	f7ff ff74 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	; (8001294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f005 f9b3 	bl	80065e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff fa0b 	bl	8000694 <main>
  bx  lr
 800127e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001284:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001288:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 800128c:	080094a4 	.word	0x080094a4
  ldr r2, =_sbss
 8001290:	240002a0 	.word	0x240002a0
  ldr r4, =_ebss
 8001294:	24000960 	.word	0x24000960

08001298 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC3_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a2:	2003      	movs	r0, #3
 80012a4:	f000 f982 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a8:	f001 ff16 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 80012ac:	4602      	mov	r2, r0
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_Init+0x68>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	4913      	ldr	r1, [pc, #76]	; (8001308 <HAL_Init+0x6c>)
 80012ba:	5ccb      	ldrb	r3, [r1, r3]
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_Init+0x68>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_Init+0x6c>)
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	4a0b      	ldr	r2, [pc, #44]	; (800130c <HAL_Init+0x70>)
 80012de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_Init+0x74>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 f814 	bl	8001314 <HAL_InitTick>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e002      	b.n	80012fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012f6:	f7ff fc67 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	58024400 	.word	0x58024400
 8001308:	08009084 	.word	0x08009084
 800130c:	24000004 	.word	0x24000004
 8001310:	24000000 	.word	0x24000000

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_InitTick+0x60>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e021      	b.n	800136c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_InitTick+0x64>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_InitTick+0x60>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f959 	bl	80015f6 <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f931 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x68>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2400000c 	.word	0x2400000c
 8001378:	24000000 	.word	0x24000000
 800137c:	24000008 	.word	0x24000008

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	2400000c 	.word	0x2400000c
 80013a4:	2400094c 	.word	0x2400094c

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	2400094c 	.word	0x2400094c

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2400000c 	.word	0x2400000c

08001408 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetREVID+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0c1b      	lsrs	r3, r3, #16
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	5c001000 	.word	0x5c001000

08001420 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001430:	4904      	ldr	r1, [pc, #16]	; (8001444 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	58000400 	.word	0x58000400

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <__NVIC_SetPriorityGrouping+0x40>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	4313      	orrs	r3, r2
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <__NVIC_SetPriorityGrouping+0x40>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00
 800148c:	05fa0000 	.word	0x05fa0000

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff8e 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff47 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff5e 	bl	8001490 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff90 	bl	8001500 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5f 	bl	80014ac <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffb2 	bl	8001568 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0cf      	b.n	80017c2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001628:	2b00      	cmp	r3, #0
 800162a:	d106      	bne.n	800163a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2223      	movs	r2, #35	; 0x23
 8001630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fae1 	bl	8000bfc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b64      	ldr	r3, [pc, #400]	; (80017cc <HAL_ETH_Init+0x1bc>)
 800163c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001640:	4a62      	ldr	r2, [pc, #392]	; (80017cc <HAL_ETH_Init+0x1bc>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800164a:	4b60      	ldr	r3, [pc, #384]	; (80017cc <HAL_ETH_Init+0x1bc>)
 800164c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7a1b      	ldrb	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d103      	bne.n	8001668 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fedd 	bl	8001420 <HAL_SYSCFG_ETHInterfaceSelect>
 8001666:	e003      	b.n	8001670 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001668:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800166c:	f7ff fed8 	bl	8001420 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001670:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_ETH_Init+0x1c0>)
 8001672:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800168a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800168c:	f7ff fe8c 	bl	80013a8 <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001692:	e011      	b.n	80016b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001694:	f7ff fe88 	bl	80013a8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a2:	d909      	bls.n	80016b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2204      	movs	r2, #4
 80016a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	22e0      	movs	r2, #224	; 0xe0
 80016b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e084      	b.n	80017c2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1e4      	bne.n	8001694 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f886 	bl	80017dc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016d0:	f001 fe7c 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a3f      	ldr	r2, [pc, #252]	; (80017d4 <HAL_ETH_Init+0x1c4>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0c9a      	lsrs	r2, r3, #18
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3a01      	subs	r2, #1
 80016e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fa71 	bl	8001bd0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80016fa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800170a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	22e0      	movs	r2, #224	; 0xe0
 8001726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e049      	b.n	80017c2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001736:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_ETH_Init+0x1c8>)
 800173c:	4013      	ands	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6952      	ldr	r2, [r2, #20]
 8001742:	0051      	lsls	r1, r2, #1
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	430b      	orrs	r3, r1
 800174a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fad9 	bl	8001d0a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fb1f 	bl	8001d9c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	3305      	adds	r3, #5
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	021a      	lsls	r2, r3, #8
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	3304      	adds	r3, #4
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	3303      	adds	r3, #3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	061a      	lsls	r2, r3, #24
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	3302      	adds	r3, #2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	041b      	lsls	r3, r3, #16
 8001790:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800179c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2210      	movs	r2, #16
 80017bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	58024400 	.word	0x58024400
 80017d0:	58000400 	.word	0x58000400
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	ffff8001 	.word	0xffff8001

080017dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017f6:	f001 fde9 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80017fa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d908      	bls.n	8001816 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d804      	bhi.n	8001816 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e027      	b.n	8001866 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4a18      	ldr	r2, [pc, #96]	; (800187c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d908      	bls.n	8001830 <HAL_ETH_SetMDIOClockRange+0x54>
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d204      	bcs.n	8001830 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	e01a      	b.n	8001866 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d303      	bcc.n	8001840 <HAL_ETH_SetMDIOClockRange+0x64>
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d911      	bls.n	8001864 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d908      	bls.n	800185a <HAL_ETH_SetMDIOClockRange+0x7e>
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <HAL_ETH_SetMDIOClockRange+0xac>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d804      	bhi.n	800185a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e005      	b.n	8001866 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e000      	b.n	8001866 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001864:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	01312cff 	.word	0x01312cff
 800187c:	02160ebf 	.word	0x02160ebf
 8001880:	03938700 	.word	0x03938700
 8001884:	05f5e0ff 	.word	0x05f5e0ff
 8001888:	08f0d17f 	.word	0x08f0d17f

0800188c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800189e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	791b      	ldrb	r3, [r3, #4]
 80018a4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7b1b      	ldrb	r3, [r3, #12]
 80018ac:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80018ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7b5b      	ldrb	r3, [r3, #13]
 80018b4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7b9b      	ldrb	r3, [r3, #14]
 80018bc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	7bdb      	ldrb	r3, [r3, #15]
 80018c4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	7c12      	ldrb	r2, [r2, #16]
 80018cc:	2a00      	cmp	r2, #0
 80018ce:	d102      	bne.n	80018d6 <ETH_SetMACConfig+0x4a>
 80018d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018d4:	e000      	b.n	80018d8 <ETH_SetMACConfig+0x4c>
 80018d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	7c52      	ldrb	r2, [r2, #17]
 80018de:	2a00      	cmp	r2, #0
 80018e0:	d102      	bne.n	80018e8 <ETH_SetMACConfig+0x5c>
 80018e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018e6:	e000      	b.n	80018ea <ETH_SetMACConfig+0x5e>
 80018e8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	7c9b      	ldrb	r3, [r3, #18]
 80018f0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018f2:	431a      	orrs	r2, r3
               macconf->Speed |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018f8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	7f1b      	ldrb	r3, [r3, #28]
 8001904:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001906:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	7f5b      	ldrb	r3, [r3, #29]
 800190c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800190e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	7f92      	ldrb	r2, [r2, #30]
 8001914:	2a00      	cmp	r2, #0
 8001916:	d102      	bne.n	800191e <ETH_SetMACConfig+0x92>
 8001918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800191c:	e000      	b.n	8001920 <ETH_SetMACConfig+0x94>
 800191e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001920:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	7fdb      	ldrb	r3, [r3, #31]
 8001926:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001928:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001930:	2a00      	cmp	r2, #0
 8001932:	d102      	bne.n	800193a <ETH_SetMACConfig+0xae>
 8001934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001938:	e000      	b.n	800193c <ETH_SetMACConfig+0xb0>
 800193a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800193c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001942:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800194a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800194c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b56      	ldr	r3, [pc, #344]	; (8001ab8 <ETH_SetMACConfig+0x22c>)
 800195e:	4013      	ands	r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	68f9      	ldr	r1, [r7, #12]
 8001966:	430b      	orrs	r3, r1
 8001968:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001976:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001978:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001980:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001982:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800198a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800198c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001994:	2a00      	cmp	r2, #0
 8001996:	d102      	bne.n	800199e <ETH_SetMACConfig+0x112>
 8001998:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800199c:	e000      	b.n	80019a0 <ETH_SetMACConfig+0x114>
 800199e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019a0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <ETH_SetMACConfig+0x230>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	430b      	orrs	r3, r1
 80019bc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019c4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <ETH_SetMACConfig+0x234>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	430b      	orrs	r3, r1
 80019e0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019e8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80019f6:	2a00      	cmp	r2, #0
 80019f8:	d101      	bne.n	80019fe <ETH_SetMACConfig+0x172>
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	e000      	b.n	8001a00 <ETH_SetMACConfig+0x174>
 80019fe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a00:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a06:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a12:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001a16:	4013      	ands	r3, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001a28:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001a30:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	f023 0103 	bic.w	r1, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001a56:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a72:	2a00      	cmp	r2, #0
 8001a74:	d101      	bne.n	8001a7a <ETH_SetMACConfig+0x1ee>
 8001a76:	2240      	movs	r2, #64	; 0x40
 8001a78:	e000      	b.n	8001a7c <ETH_SetMACConfig+0x1f0>
 8001a7a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a7c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a84:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a8e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a9c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	00048083 	.word	0x00048083
 8001abc:	c0f88000 	.word	0xc0f88000
 8001ac0:	fffffef0 	.word	0xfffffef0

08001ac4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <ETH_SetDMAConfig+0xf8>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	6811      	ldr	r1, [r2, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aea:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	791b      	ldrb	r3, [r3, #4]
 8001af0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001af6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7b1b      	ldrb	r3, [r3, #12]
 8001afc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <ETH_SetDMAConfig+0xfc>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b1c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	7b5b      	ldrb	r3, [r3, #13]
 8001b22:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b34:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <ETH_SetDMAConfig+0x100>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	430b      	orrs	r3, r1
 8001b44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b48:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	7d1b      	ldrb	r3, [r3, #20]
 8001b54:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b56:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	7f5b      	ldrb	r3, [r3, #29]
 8001b5c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <ETH_SetDMAConfig+0x104>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	68f9      	ldr	r1, [r7, #12]
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b7e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	7f1b      	ldrb	r3, [r3, #28]
 8001b86:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b98:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <ETH_SetDMAConfig+0x108>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	68f9      	ldr	r1, [r7, #12]
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	ffff87fd 	.word	0xffff87fd
 8001bc0:	ffff2ffe 	.word	0xffff2ffe
 8001bc4:	fffec000 	.word	0xfffec000
 8001bc8:	ffc0efef 	.word	0xffc0efef
 8001bcc:	7fc0ffff 	.word	0x7fc0ffff

08001bd0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b0a4      	sub	sp, #144	; 0x90
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bde:	2300      	movs	r3, #0
 8001be0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001c28:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001c2c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c52:	2300      	movs	r3, #0
 8001c54:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c7a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c84:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001caa:	2300      	movs	r3, #0
 8001cac:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001cb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb8:	4619      	mov	r1, r3
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fde6 	bl	800188c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cde:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ce4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ce8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001cf0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cf6:	f107 0308 	add.w	r3, r7, #8
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff fee1 	bl	8001ac4 <ETH_SetDMAConfig>
}
 8001d02:	bf00      	nop
 8001d04:	3790      	adds	r7, #144	; 0x90
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	e01d      	b.n	8001d54 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68d9      	ldr	r1, [r3, #12]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2200      	movs	r2, #0
 8001d34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	3206      	adds	r2, #6
 8001d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3301      	adds	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d9de      	bls.n	8001d18 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e023      	b.n	8001df2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	3212      	adds	r2, #18
 8001de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d9d8      	bls.n	8001daa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2303      	movs	r3, #3
 8001e22:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e32:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e46:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <HAL_GPIO_Init+0x234>)
 8001e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e6a:	e194      	b.n	8002196 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8186 	beq.w	8002190 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d005      	beq.n	8001e9c <HAL_GPIO_Init+0x44>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d130      	bne.n	8001efe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0201 	and.w	r2, r3, #1
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d017      	beq.n	8001f3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d123      	bne.n	8001f8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	69b9      	ldr	r1, [r7, #24]
 8001f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0203 	and.w	r2, r3, #3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80e0 	beq.w	8002190 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_GPIO_Init+0x238>)
 8001fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fd6:	4a2e      	ldr	r2, [pc, #184]	; (8002090 <HAL_GPIO_Init+0x238>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_GPIO_Init+0x238>)
 8001fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fee:	4a29      	ldr	r2, [pc, #164]	; (8002094 <HAL_GPIO_Init+0x23c>)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a20      	ldr	r2, [pc, #128]	; (8002098 <HAL_GPIO_Init+0x240>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d052      	beq.n	80020c0 <HAL_GPIO_Init+0x268>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1f      	ldr	r2, [pc, #124]	; (800209c <HAL_GPIO_Init+0x244>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d031      	beq.n	8002086 <HAL_GPIO_Init+0x22e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <HAL_GPIO_Init+0x248>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02b      	beq.n	8002082 <HAL_GPIO_Init+0x22a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_GPIO_Init+0x24c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d025      	beq.n	800207e <HAL_GPIO_Init+0x226>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <HAL_GPIO_Init+0x250>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <HAL_GPIO_Init+0x222>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_GPIO_Init+0x254>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x21e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1a      	ldr	r2, [pc, #104]	; (80020b0 <HAL_GPIO_Init+0x258>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x21a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_GPIO_Init+0x25c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x216>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_GPIO_Init+0x260>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x212>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a17      	ldr	r2, [pc, #92]	; (80020bc <HAL_GPIO_Init+0x264>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x20e>
 8002062:	2309      	movs	r3, #9
 8002064:	e02d      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 8002066:	230a      	movs	r3, #10
 8002068:	e02b      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 800206a:	2308      	movs	r3, #8
 800206c:	e029      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 800206e:	2307      	movs	r3, #7
 8002070:	e027      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 8002072:	2306      	movs	r3, #6
 8002074:	e025      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 8002076:	2305      	movs	r3, #5
 8002078:	e023      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 800207a:	2304      	movs	r3, #4
 800207c:	e021      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 800207e:	2303      	movs	r3, #3
 8002080:	e01f      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 8002082:	2302      	movs	r3, #2
 8002084:	e01d      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 8002086:	2301      	movs	r3, #1
 8002088:	e01b      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 800208a:	bf00      	nop
 800208c:	58000080 	.word	0x58000080
 8002090:	58024400 	.word	0x58024400
 8002094:	58000400 	.word	0x58000400
 8002098:	58020000 	.word	0x58020000
 800209c:	58020400 	.word	0x58020400
 80020a0:	58020800 	.word	0x58020800
 80020a4:	58020c00 	.word	0x58020c00
 80020a8:	58021000 	.word	0x58021000
 80020ac:	58021400 	.word	0x58021400
 80020b0:	58021800 	.word	0x58021800
 80020b4:	58021c00 	.word	0x58021c00
 80020b8:	58022000 	.word	0x58022000
 80020bc:	58022400 	.word	0x58022400
 80020c0:	2300      	movs	r3, #0
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	f002 0203 	and.w	r2, r2, #3
 80020c8:	0092      	lsls	r2, r2, #2
 80020ca:	4093      	lsls	r3, r2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d2:	4938      	ldr	r1, [pc, #224]	; (80021b4 <HAL_GPIO_Init+0x35c>)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	3301      	adds	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f47f ae63 	bne.w	8001e6c <HAL_GPIO_Init+0x14>
  }
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	3724      	adds	r7, #36	; 0x24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	58000400 	.word	0x58000400

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021d4:	e003      	b.n	80021de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	041a      	lsls	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ec:	b08f      	sub	sp, #60	; 0x3c
 80021ee:	af0a      	add	r7, sp, #40	; 0x28
 80021f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e116      	b.n	800242a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fe24 	bl	8000e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2203      	movs	r2, #3
 8002220:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fed2 	bl	8005fe4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	687e      	ldr	r6, [r7, #4]
 8002248:	466d      	mov	r5, sp
 800224a:	f106 0410 	add.w	r4, r6, #16
 800224e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002256:	e894 0003 	ldmia.w	r4, {r0, r1}
 800225a:	e885 0003 	stmia.w	r5, {r0, r1}
 800225e:	1d33      	adds	r3, r6, #4
 8002260:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002262:	6838      	ldr	r0, [r7, #0]
 8002264:	f003 fe50 	bl	8005f08 <USB_CoreInit>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0d7      	b.n	800242a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f003 fec0 	bl	8006006 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	e04a      	b.n	8002322 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	333d      	adds	r3, #61	; 0x3d
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	333c      	adds	r3, #60	; 0x3c
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	b298      	uxth	r0, r3
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3344      	adds	r3, #68	; 0x44
 80022c8:	4602      	mov	r2, r0
 80022ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3340      	adds	r3, #64	; 0x40
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3348      	adds	r3, #72	; 0x48
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	334c      	adds	r3, #76	; 0x4c
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	3354      	adds	r3, #84	; 0x54
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	3301      	adds	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	d3af      	bcc.n	800228c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	e044      	b.n	80023bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	3301      	adds	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d3b5      	bcc.n	8002332 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	687e      	ldr	r6, [r7, #4]
 80023ce:	466d      	mov	r5, sp
 80023d0:	f106 0410 	add.w	r4, r6, #16
 80023d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023e4:	1d33      	adds	r3, r6, #4
 80023e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e8:	6838      	ldr	r0, [r7, #0]
 80023ea:	f003 fe59 	bl	80060a0 <USB_DevInit>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e014      	b.n	800242a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	2b01      	cmp	r3, #1
 8002416:	d102      	bne.n	800241e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f80b 	bl	8002434 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f004 f817 	bl	8006456 <USB_DevDisconnect>

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002434 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_PCDEx_ActivateLPM+0x44>)
 8002464:	4313      	orrs	r3, r2
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	10000003 	.word	0x10000003

0800247c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_PWREx_ConfigSupply+0x70>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b04      	cmp	r3, #4
 800248e:	d00a      	beq.n	80024a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_PWREx_ConfigSupply+0x70>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e01f      	b.n	80024e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e01d      	b.n	80024e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_PWREx_ConfigSupply+0x70>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f023 0207 	bic.w	r2, r3, #7
 80024ae:	490f      	ldr	r1, [pc, #60]	; (80024ec <HAL_PWREx_ConfigSupply+0x70>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024b6:	f7fe ff77 	bl	80013a8 <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024bc:	e009      	b.n	80024d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024be:	f7fe ff73 	bl	80013a8 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024cc:	d901      	bls.n	80024d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_PWREx_ConfigSupply+0x70>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024de:	d1ee      	bne.n	80024be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	58024800 	.word	0x58024800

080024f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	58024800 	.word	0x58024800

08002510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f000 bc1d 	b.w	8002d5e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8087 	beq.w	8002640 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002532:	4b99      	ldr	r3, [pc, #612]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253c:	4b96      	ldr	r3, [pc, #600]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	2b10      	cmp	r3, #16
 8002546:	d007      	beq.n	8002558 <HAL_RCC_OscConfig+0x48>
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	2b18      	cmp	r3, #24
 800254c:	d110      	bne.n	8002570 <HAL_RCC_OscConfig+0x60>
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d10b      	bne.n	8002570 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	4b8f      	ldr	r3, [pc, #572]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d06c      	beq.n	800263e <HAL_RCC_OscConfig+0x12e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d168      	bne.n	800263e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e3f6      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d106      	bne.n	8002588 <HAL_RCC_OscConfig+0x78>
 800257a:	4b87      	ldr	r3, [pc, #540]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a86      	ldr	r2, [pc, #536]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e02e      	b.n	80025e6 <HAL_RCC_OscConfig+0xd6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10c      	bne.n	80025aa <HAL_RCC_OscConfig+0x9a>
 8002590:	4b81      	ldr	r3, [pc, #516]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a80      	ldr	r2, [pc, #512]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b7e      	ldr	r3, [pc, #504]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a7d      	ldr	r2, [pc, #500]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	e01d      	b.n	80025e6 <HAL_RCC_OscConfig+0xd6>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_OscConfig+0xbe>
 80025b4:	4b78      	ldr	r3, [pc, #480]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a77      	ldr	r2, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b75      	ldr	r3, [pc, #468]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a74      	ldr	r2, [pc, #464]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e00b      	b.n	80025e6 <HAL_RCC_OscConfig+0xd6>
 80025ce:	4b72      	ldr	r3, [pc, #456]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a71      	ldr	r2, [pc, #452]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b6f      	ldr	r3, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d013      	beq.n	8002616 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7fe fedb 	bl	80013a8 <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f6:	f7fe fed7 	bl	80013a8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b64      	cmp	r3, #100	; 0x64
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e3aa      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002608:	4b63      	ldr	r3, [pc, #396]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0xe6>
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fec7 	bl	80013a8 <HAL_GetTick>
 800261a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261e:	f7fe fec3 	bl	80013a8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e396      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002630:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x10e>
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80cb 	beq.w	80027e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264e:	4b52      	ldr	r3, [pc, #328]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002656:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002658:	4b4f      	ldr	r3, [pc, #316]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_RCC_OscConfig+0x164>
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2b18      	cmp	r3, #24
 8002668:	d156      	bne.n	8002718 <HAL_RCC_OscConfig+0x208>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d151      	bne.n	8002718 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002674:	4b48      	ldr	r3, [pc, #288]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_OscConfig+0x17c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e368      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800268c:	4b42      	ldr	r3, [pc, #264]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 0219 	bic.w	r2, r3, #25
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	493f      	ldr	r1, [pc, #252]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800269e:	f7fe fe83 	bl	80013a8 <HAL_GetTick>
 80026a2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a6:	f7fe fe7f 	bl	80013a8 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e352      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026b8:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	f7fe fea0 	bl	8001408 <HAL_GetREVID>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d817      	bhi.n	8002702 <HAL_RCC_OscConfig+0x1f2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d108      	bne.n	80026ec <HAL_RCC_OscConfig+0x1dc>
 80026da:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026e2:	4a2d      	ldr	r2, [pc, #180]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ea:	e07b      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	031b      	lsls	r3, r3, #12
 80026fa:	4927      	ldr	r1, [pc, #156]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002700:	e070      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	061b      	lsls	r3, r3, #24
 8002710:	4921      	ldr	r1, [pc, #132]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002716:	e065      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d048      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 0219 	bic.w	r2, r3, #25
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	491a      	ldr	r1, [pc, #104]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fe39 	bl	80013a8 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800273a:	f7fe fe35 	bl	80013a8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e308      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	f7fe fe56 	bl	8001408 <HAL_GetREVID>
 800275c:	4603      	mov	r3, r0
 800275e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002762:	4293      	cmp	r3, r2
 8002764:	d81a      	bhi.n	800279c <HAL_RCC_OscConfig+0x28c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b40      	cmp	r3, #64	; 0x40
 800276c:	d108      	bne.n	8002780 <HAL_RCC_OscConfig+0x270>
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002776:	4a08      	ldr	r2, [pc, #32]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277c:	6053      	str	r3, [r2, #4]
 800277e:	e031      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	031b      	lsls	r3, r3, #12
 800278e:	4902      	ldr	r1, [pc, #8]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
 8002794:	e026      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
 8002796:	bf00      	nop
 8002798:	58024400 	.word	0x58024400
 800279c:	4b9a      	ldr	r3, [pc, #616]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	4997      	ldr	r1, [pc, #604]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
 80027b0:	e018      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b95      	ldr	r3, [pc, #596]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a94      	ldr	r2, [pc, #592]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe fdf3 	bl	80013a8 <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7fe fdef 	bl	80013a8 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e2c2      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027d8:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a9 	beq.w	8002944 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f2:	4b85      	ldr	r3, [pc, #532]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027fc:	4b82      	ldr	r3, [pc, #520]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d007      	beq.n	8002818 <HAL_RCC_OscConfig+0x308>
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b18      	cmp	r3, #24
 800280c:	d13a      	bne.n	8002884 <HAL_RCC_OscConfig+0x374>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d135      	bne.n	8002884 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002818:	4b7b      	ldr	r3, [pc, #492]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_OscConfig+0x320>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d001      	beq.n	8002830 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e296      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002830:	f7fe fdea 	bl	8001408 <HAL_GetREVID>
 8002834:	4603      	mov	r3, r0
 8002836:	f241 0203 	movw	r2, #4099	; 0x1003
 800283a:	4293      	cmp	r3, r2
 800283c:	d817      	bhi.n	800286e <HAL_RCC_OscConfig+0x35e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	2b20      	cmp	r3, #32
 8002844:	d108      	bne.n	8002858 <HAL_RCC_OscConfig+0x348>
 8002846:	4b70      	ldr	r3, [pc, #448]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800284e:	4a6e      	ldr	r2, [pc, #440]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002854:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002856:	e075      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002858:	4b6b      	ldr	r3, [pc, #428]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	069b      	lsls	r3, r3, #26
 8002866:	4968      	ldr	r1, [pc, #416]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800286c:	e06a      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800286e:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	061b      	lsls	r3, r3, #24
 800287c:	4962      	ldr	r1, [pc, #392]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800287e:	4313      	orrs	r3, r2
 8002880:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002882:	e05f      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d042      	beq.n	8002912 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800288c:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a5d      	ldr	r2, [pc, #372]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fd86 	bl	80013a8 <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028a0:	f7fe fd82 	bl	80013a8 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e255      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028b2:	4b55      	ldr	r3, [pc, #340]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028be:	f7fe fda3 	bl	8001408 <HAL_GetREVID>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d817      	bhi.n	80028fc <HAL_RCC_OscConfig+0x3ec>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d108      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3d6>
 80028d4:	4b4c      	ldr	r3, [pc, #304]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028dc:	4a4a      	ldr	r2, [pc, #296]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028e2:	6053      	str	r3, [r2, #4]
 80028e4:	e02e      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
 80028e6:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	069b      	lsls	r3, r3, #26
 80028f4:	4944      	ldr	r1, [pc, #272]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
 80028fa:	e023      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
 80028fc:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	493f      	ldr	r1, [pc, #252]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	60cb      	str	r3, [r1, #12]
 8002910:	e018      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a3c      	ldr	r2, [pc, #240]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800291c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe fd43 	bl	80013a8 <HAL_GetTick>
 8002922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002926:	f7fe fd3f 	bl	80013a8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e212      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002938:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d036      	beq.n	80029be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d019      	beq.n	800298c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295c:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fd20 	bl	80013a8 <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe fd1c 	bl	80013a8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e1ef      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x45c>
 800298a:	e018      	b.n	80029be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002990:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe fd06 	bl	80013a8 <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a0:	f7fe fd02 	bl	80013a8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1d5      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d039      	beq.n	8002a3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01c      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029de:	f7fe fce3 	bl	80013a8 <HAL_GetTick>
 80029e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029e6:	f7fe fcdf 	bl	80013a8 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1b2      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
 8002a04:	e01b      	b.n	8002a3e <HAL_RCC_OscConfig+0x52e>
 8002a06:	bf00      	nop
 8002a08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a0c:	4b9b      	ldr	r3, [pc, #620]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a9a      	ldr	r2, [pc, #616]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a18:	f7fe fcc6 	bl	80013a8 <HAL_GetTick>
 8002a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a20:	f7fe fcc2 	bl	80013a8 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e195      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a32:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8081 	beq.w	8002b4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a4c:	4b8c      	ldr	r3, [pc, #560]	; (8002c80 <HAL_RCC_OscConfig+0x770>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a8b      	ldr	r2, [pc, #556]	; (8002c80 <HAL_RCC_OscConfig+0x770>)
 8002a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a58:	f7fe fca6 	bl	80013a8 <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a60:	f7fe fca2 	bl	80013a8 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e175      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a72:	4b83      	ldr	r3, [pc, #524]	; (8002c80 <HAL_RCC_OscConfig+0x770>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0x584>
 8002a86:	4b7d      	ldr	r3, [pc, #500]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	4a7c      	ldr	r2, [pc, #496]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6713      	str	r3, [r2, #112]	; 0x70
 8002a92:	e02d      	b.n	8002af0 <HAL_RCC_OscConfig+0x5e0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x5a6>
 8002a9c:	4b77      	ldr	r3, [pc, #476]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	4a76      	ldr	r2, [pc, #472]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa8:	4b74      	ldr	r3, [pc, #464]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	4a73      	ldr	r2, [pc, #460]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002aae:	f023 0304 	bic.w	r3, r3, #4
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab4:	e01c      	b.n	8002af0 <HAL_RCC_OscConfig+0x5e0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x5c8>
 8002abe:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a6e      	ldr	r2, [pc, #440]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	4b6c      	ldr	r3, [pc, #432]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	4a6b      	ldr	r2, [pc, #428]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0x5e0>
 8002ad8:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a67      	ldr	r2, [pc, #412]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a64      	ldr	r2, [pc, #400]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002aea:	f023 0304 	bic.w	r3, r3, #4
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7fe fc56 	bl	80013a8 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b00:	f7fe fc52 	bl	80013a8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e123      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b16:	4b59      	ldr	r3, [pc, #356]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0ee      	beq.n	8002b00 <HAL_RCC_OscConfig+0x5f0>
 8002b22:	e014      	b.n	8002b4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe fc40 	bl	80013a8 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fc3c 	bl	80013a8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e10d      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b42:	4b4e      	ldr	r3, [pc, #312]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1ee      	bne.n	8002b2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8102 	beq.w	8002d5c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b58:	4b48      	ldr	r3, [pc, #288]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b60:	2b18      	cmp	r3, #24
 8002b62:	f000 80bd 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	f040 809e 	bne.w	8002cac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b70:	4b42      	ldr	r3, [pc, #264]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a41      	ldr	r2, [pc, #260]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fc14 	bl	80013a8 <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fc10 	bl	80013a8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0e3      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCC_OscConfig+0x774>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	4931      	ldr	r1, [pc, #196]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	628b      	str	r3, [r1, #40]	; 0x28
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	025b      	lsls	r3, r3, #9
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	3b01      	subs	r3, #1
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bec:	4923      	ldr	r1, [pc, #140]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_OscConfig+0x778>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c0a:	00d2      	lsls	r2, r2, #3
 8002c0c:	491b      	ldr	r1, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	f023 020c 	bic.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4917      	ldr	r1, [pc, #92]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f023 0202 	bic.w	r2, r3, #2
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	4912      	ldr	r1, [pc, #72]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe fb99 	bl	80013a8 <HAL_GetTick>
 8002c76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c78:	e011      	b.n	8002c9e <HAL_RCC_OscConfig+0x78e>
 8002c7a:	bf00      	nop
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	58024800 	.word	0x58024800
 8002c84:	fffffc0c 	.word	0xfffffc0c
 8002c88:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe fb8c 	bl	80013a8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e05f      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_RCC_OscConfig+0x858>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x77c>
 8002caa:	e057      	b.n	8002d5c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <HAL_RCC_OscConfig+0x858>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <HAL_RCC_OscConfig+0x858>)
 8002cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fb76 	bl	80013a8 <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe fb72 	bl	80013a8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e045      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd2:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_OscConfig+0x858>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x7b0>
 8002cde:	e03d      	b.n	8002d5c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCC_OscConfig+0x858>)
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_RCC_OscConfig+0x858>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d031      	beq.n	8002d58 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d12a      	bne.n	8002d58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d122      	bne.n	8002d58 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d11a      	bne.n	8002d58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	0a5b      	lsrs	r3, r3, #9
 8002d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d111      	bne.n	8002d58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d108      	bne.n	8002d58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0e1b      	lsrs	r3, r3, #24
 8002d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3730      	adds	r7, #48	; 0x30
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	58024400 	.word	0x58024400

08002d6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e19c      	b.n	80030ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b8a      	ldr	r3, [pc, #552]	; (8002fac <HAL_RCC_ClockConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d910      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b87      	ldr	r3, [pc, #540]	; (8002fac <HAL_RCC_ClockConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 020f 	bic.w	r2, r3, #15
 8002d96:	4985      	ldr	r1, [pc, #532]	; (8002fac <HAL_RCC_ClockConfig+0x240>)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9e:	4b83      	ldr	r3, [pc, #524]	; (8002fac <HAL_RCC_ClockConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e184      	b.n	80030ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d908      	bls.n	8002dde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dcc:	4b78      	ldr	r3, [pc, #480]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	4975      	ldr	r1, [pc, #468]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d908      	bls.n	8002e0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	496a      	ldr	r1, [pc, #424]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	4b64      	ldr	r3, [pc, #400]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d908      	bls.n	8002e3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e28:	4b61      	ldr	r3, [pc, #388]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	495e      	ldr	r1, [pc, #376]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	4b59      	ldr	r3, [pc, #356]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d908      	bls.n	8002e68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e56:	4b56      	ldr	r3, [pc, #344]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4953      	ldr	r1, [pc, #332]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	4b4d      	ldr	r3, [pc, #308]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d908      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f023 020f 	bic.w	r2, r3, #15
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4947      	ldr	r1, [pc, #284]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d055      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4940      	ldr	r1, [pc, #256]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ebc:	4b3c      	ldr	r3, [pc, #240]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d121      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0f6      	b.n	80030ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed4:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d115      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0ea      	b.n	80030ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eec:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0de      	b.n	80030ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002efc:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0d6      	b.n	80030ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f0c:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f023 0207 	bic.w	r2, r3, #7
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4925      	ldr	r1, [pc, #148]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fe fa43 	bl	80013a8 <HAL_GetTick>
 8002f22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f26:	f7fe fa3f 	bl	80013a8 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0be      	b.n	80030ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d1eb      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d010      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d208      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f023 020f 	bic.w	r2, r3, #15
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <HAL_RCC_ClockConfig+0x244>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_ClockConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d214      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_RCC_ClockConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 020f 	bic.w	r2, r3, #15
 8002f92:	4906      	ldr	r1, [pc, #24]	; (8002fac <HAL_RCC_ClockConfig+0x240>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_RCC_ClockConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e086      	b.n	80030ba <HAL_RCC_ClockConfig+0x34e>
 8002fac:	52002000 	.word	0x52002000
 8002fb0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d208      	bcs.n	8002fe2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fd0:	4b3c      	ldr	r3, [pc, #240]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	4939      	ldr	r1, [pc, #228]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d010      	beq.n	8003010 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d208      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	492e      	ldr	r1, [pc, #184]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 800300c:	4313      	orrs	r3, r2
 800300e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003028:	429a      	cmp	r2, r3
 800302a:	d208      	bcs.n	800303e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4922      	ldr	r1, [pc, #136]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 800303a:	4313      	orrs	r3, r2
 800303c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d010      	beq.n	800306c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003056:	429a      	cmp	r2, r3
 8003058:	d208      	bcs.n	800306c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4917      	ldr	r1, [pc, #92]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 8003068:	4313      	orrs	r3, r2
 800306a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800306c:	f000 f834 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	4912      	ldr	r1, [pc, #72]	; (80030c8 <HAL_RCC_ClockConfig+0x35c>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
 8003088:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800308a:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_RCC_ClockConfig+0x358>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <HAL_RCC_ClockConfig+0x35c>)
 8003094:	5cd3      	ldrb	r3, [r2, r3]
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <HAL_RCC_ClockConfig+0x360>)
 80030a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030a4:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x364>)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x368>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe f930 	bl	8001314 <HAL_InitTick>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	58024400 	.word	0x58024400
 80030c8:	08009084 	.word	0x08009084
 80030cc:	24000004 	.word	0x24000004
 80030d0:	24000000 	.word	0x24000000
 80030d4:	24000008 	.word	0x24000008

080030d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030de:	4bb3      	ldr	r3, [pc, #716]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030e6:	2b18      	cmp	r3, #24
 80030e8:	f200 8155 	bhi.w	8003396 <HAL_RCC_GetSysClockFreq+0x2be>
 80030ec:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	08003159 	.word	0x08003159
 80030f8:	08003397 	.word	0x08003397
 80030fc:	08003397 	.word	0x08003397
 8003100:	08003397 	.word	0x08003397
 8003104:	08003397 	.word	0x08003397
 8003108:	08003397 	.word	0x08003397
 800310c:	08003397 	.word	0x08003397
 8003110:	08003397 	.word	0x08003397
 8003114:	0800317f 	.word	0x0800317f
 8003118:	08003397 	.word	0x08003397
 800311c:	08003397 	.word	0x08003397
 8003120:	08003397 	.word	0x08003397
 8003124:	08003397 	.word	0x08003397
 8003128:	08003397 	.word	0x08003397
 800312c:	08003397 	.word	0x08003397
 8003130:	08003397 	.word	0x08003397
 8003134:	08003185 	.word	0x08003185
 8003138:	08003397 	.word	0x08003397
 800313c:	08003397 	.word	0x08003397
 8003140:	08003397 	.word	0x08003397
 8003144:	08003397 	.word	0x08003397
 8003148:	08003397 	.word	0x08003397
 800314c:	08003397 	.word	0x08003397
 8003150:	08003397 	.word	0x08003397
 8003154:	0800318b 	.word	0x0800318b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003158:	4b94      	ldr	r3, [pc, #592]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003164:	4b91      	ldr	r3, [pc, #580]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	4a90      	ldr	r2, [pc, #576]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003176:	e111      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003178:	4b8d      	ldr	r3, [pc, #564]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800317a:	61bb      	str	r3, [r7, #24]
    break;
 800317c:	e10e      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800317e:	4b8d      	ldr	r3, [pc, #564]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003180:	61bb      	str	r3, [r7, #24]
    break;
 8003182:	e10b      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003184:	4b8c      	ldr	r3, [pc, #560]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003186:	61bb      	str	r3, [r7, #24]
    break;
 8003188:	e108      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800318a:	4b88      	ldr	r3, [pc, #544]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003194:	4b85      	ldr	r3, [pc, #532]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800319e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031a0:	4b82      	ldr	r3, [pc, #520]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031aa:	4b80      	ldr	r3, [pc, #512]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	08db      	lsrs	r3, r3, #3
 80031b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80e1 	beq.w	8003390 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	f000 8083 	beq.w	80032dc <HAL_RCC_GetSysClockFreq+0x204>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	f200 80a1 	bhi.w	8003320 <HAL_RCC_GetSysClockFreq+0x248>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x114>
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d056      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031ea:	e099      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031ec:	4b6f      	ldr	r3, [pc, #444]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d02d      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031f8:	4b6c      	ldr	r3, [pc, #432]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	08db      	lsrs	r3, r3, #3
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	4a6b      	ldr	r2, [pc, #428]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003222:	4b62      	ldr	r3, [pc, #392]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003232:	ed97 6a02 	vldr	s12, [r7, #8]
 8003236:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800323a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800323e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800324a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003252:	e087      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003266:	4b51      	ldr	r3, [pc, #324]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003276:	ed97 6a02 	vldr	s12, [r7, #8]
 800327a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800327e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800328a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800328e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003296:	e065      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032aa:	4b40      	ldr	r3, [pc, #256]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80032be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80032c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032da:	e043      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ee:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003302:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800330a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800330e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800331e:	e021      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800332e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003342:	ed97 6a02 	vldr	s12, [r7, #8]
 8003346:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800334a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800334e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800335a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003362:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	0a5b      	lsrs	r3, r3, #9
 800336a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800336e:	3301      	adds	r3, #1
 8003370:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800337c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003388:	ee17 3a90 	vmov	r3, s15
 800338c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800338e:	e005      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
    break;
 8003394:	e002      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003398:	61bb      	str	r3, [r7, #24]
    break;
 800339a:	bf00      	nop
  }

  return sysclockfreq;
 800339c:	69bb      	ldr	r3, [r7, #24]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	58024400 	.word	0x58024400
 80033b0:	03d09000 	.word	0x03d09000
 80033b4:	003d0900 	.word	0x003d0900
 80033b8:	007a1200 	.word	0x007a1200
 80033bc:	46000000 	.word	0x46000000
 80033c0:	4c742400 	.word	0x4c742400
 80033c4:	4a742400 	.word	0x4a742400
 80033c8:	4af42400 	.word	0x4af42400

080033cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033d2:	f7ff fe81 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_RCC_GetHCLKFreq+0x50>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	490f      	ldr	r1, [pc, #60]	; (8003420 <HAL_RCC_GetHCLKFreq+0x54>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <HAL_RCC_GetHCLKFreq+0x50>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_GetHCLKFreq+0x54>)
 80033fa:	5cd3      	ldrb	r3, [r2, r3]
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <HAL_RCC_GetHCLKFreq+0x58>)
 8003408:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800340a:	4a07      	ldr	r2, [pc, #28]	; (8003428 <HAL_RCC_GetHCLKFreq+0x5c>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_RCC_GetHCLKFreq+0x58>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	58024400 	.word	0x58024400
 8003420:	08009084 	.word	0x08009084
 8003424:	24000004 	.word	0x24000004
 8003428:	24000000 	.word	0x24000000

0800342c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003430:	f7ff ffcc 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4904      	ldr	r1, [pc, #16]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	58024400 	.word	0x58024400
 8003454:	08009084 	.word	0x08009084

08003458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800345c:	f7ff ffb6 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4904      	ldr	r1, [pc, #16]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	58024400 	.word	0x58024400
 8003480:	08009084 	.word	0x08009084

08003484 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800348c:	2300      	movs	r3, #0
 800348e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003490:	2300      	movs	r3, #0
 8003492:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d03f      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a8:	d02a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ae:	d824      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b4:	d018      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ba:	d81e      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c4:	d007      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034c6:	e018      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c8:	4ba3      	ldr	r3, [pc, #652]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4aa2      	ldr	r2, [pc, #648]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034d4:	e015      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	2102      	movs	r1, #2
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 f9d5 	bl	800488c <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034e6:	e00c      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	2102      	movs	r1, #2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f001 fa7e 	bl	80049f0 <RCCEx_PLL3_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034f8:	e003      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
      break;
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003508:	4b93      	ldr	r3, [pc, #588]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003514:	4990      	ldr	r1, [pc, #576]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	650b      	str	r3, [r1, #80]	; 0x50
 800351a:	e001      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	7dfb      	ldrb	r3, [r7, #23]
 800351e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d03d      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	2b04      	cmp	r3, #4
 8003532:	d826      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003534:	a201      	add	r2, pc, #4	; (adr r2, 800353c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	08003551 	.word	0x08003551
 8003540:	0800355f 	.word	0x0800355f
 8003544:	08003571 	.word	0x08003571
 8003548:	08003589 	.word	0x08003589
 800354c:	08003589 	.word	0x08003589
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003550:	4b81      	ldr	r3, [pc, #516]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	4a80      	ldr	r2, [pc, #512]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800355c:	e015      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f001 f991 	bl	800488c <RCCEx_PLL2_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800356e:	e00c      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3324      	adds	r3, #36	; 0x24
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fa3a 	bl	80049f0 <RCCEx_PLL3_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003580:	e003      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
      break;
 8003586:	e000      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003590:	4b71      	ldr	r3, [pc, #452]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003594:	f023 0207 	bic.w	r2, r3, #7
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	496e      	ldr	r1, [pc, #440]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	650b      	str	r3, [r1, #80]	; 0x50
 80035a2:	e001      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d042      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035bc:	d02b      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80035be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c2:	d825      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035c4:	2bc0      	cmp	r3, #192	; 0xc0
 80035c6:	d028      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035c8:	2bc0      	cmp	r3, #192	; 0xc0
 80035ca:	d821      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d016      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80035d0:	2b80      	cmp	r3, #128	; 0x80
 80035d2:	d81d      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d007      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 80035dc:	e018      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035de:	4b5e      	ldr	r3, [pc, #376]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	4a5d      	ldr	r2, [pc, #372]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035ea:	e017      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 f94a 	bl	800488c <RCCEx_PLL2_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035fc:	e00e      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3324      	adds	r3, #36	; 0x24
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f001 f9f3 	bl	80049f0 <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800360e:	e005      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	75fb      	strb	r3, [r7, #23]
      break;
 8003614:	e002      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003616:	bf00      	nop
 8003618:	e000      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800361a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003622:	4b4d      	ldr	r3, [pc, #308]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003626:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	494a      	ldr	r1, [pc, #296]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	650b      	str	r3, [r1, #80]	; 0x50
 8003634:	e001      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	2b00      	cmp	r3, #0
 8003644:	d049      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800364c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003650:	d030      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003652:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003656:	d82a      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003658:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800365c:	d02c      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800365e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003662:	d824      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003668:	d018      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800366a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366e:	d81e      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003678:	d007      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800367a:	e018      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367c:	4b36      	ldr	r3, [pc, #216]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	4a35      	ldr	r2, [pc, #212]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003686:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003688:	e017      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f001 f8fb 	bl	800488c <RCCEx_PLL2_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800369a:	e00e      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3324      	adds	r3, #36	; 0x24
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 f9a4 	bl	80049f0 <RCCEx_PLL3_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ac:	e005      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
      break;
 80036b2:	e002      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036c0:	4b25      	ldr	r3, [pc, #148]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036ce:	4922      	ldr	r1, [pc, #136]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	658b      	str	r3, [r1, #88]	; 0x58
 80036d4:	e001      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d04b      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f0:	d030      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80036f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f6:	d82a      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036fc:	d02e      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80036fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003702:	d824      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003708:	d018      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800370a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800370e:	d81e      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003718:	d007      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800371a:	e018      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003728:	e019      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3304      	adds	r3, #4
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f001 f8ab 	bl	800488c <RCCEx_PLL2_Config>
 8003736:	4603      	mov	r3, r0
 8003738:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800373a:	e010      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3324      	adds	r3, #36	; 0x24
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f954 	bl	80049f0 <RCCEx_PLL3_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800374c:	e007      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	75fb      	strb	r3, [r7, #23]
      break;
 8003752:	e004      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003754:	bf00      	nop
 8003756:	e002      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003758:	58024400 	.word	0x58024400
      break;
 800375c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003764:	4b99      	ldr	r3, [pc, #612]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003772:	4996      	ldr	r1, [pc, #600]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003774:	4313      	orrs	r3, r2
 8003776:	658b      	str	r3, [r1, #88]	; 0x58
 8003778:	e001      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d032      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378e:	2b30      	cmp	r3, #48	; 0x30
 8003790:	d01c      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003792:	2b30      	cmp	r3, #48	; 0x30
 8003794:	d817      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003796:	2b20      	cmp	r3, #32
 8003798:	d00c      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800379a:	2b20      	cmp	r3, #32
 800379c:	d813      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d10f      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a6:	4b89      	ldr	r3, [pc, #548]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	4a88      	ldr	r2, [pc, #544]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037b2:	e00e      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	2102      	movs	r1, #2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 f866 	bl	800488c <RCCEx_PLL2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037c4:	e005      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75fb      	strb	r3, [r7, #23]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80037cc:	bf00      	nop
 80037ce:	e000      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80037d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037d8:	4b7c      	ldr	r3, [pc, #496]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e4:	4979      	ldr	r1, [pc, #484]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037ea:	e001      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d047      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003804:	d030      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380a:	d82a      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800380c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003810:	d02c      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003812:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003816:	d824      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381c:	d018      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003822:	d81e      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382c:	d007      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800382e:	e018      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003830:	4b66      	ldr	r3, [pc, #408]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	4a65      	ldr	r2, [pc, #404]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800383c:	e017      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f001 f821 	bl	800488c <RCCEx_PLL2_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800384e:	e00e      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3324      	adds	r3, #36	; 0x24
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f001 f8ca 	bl	80049f0 <RCCEx_PLL3_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003860:	e005      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
      break;
 8003866:	e002      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800386c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003878:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	4952      	ldr	r1, [pc, #328]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003882:	4313      	orrs	r3, r2
 8003884:	650b      	str	r3, [r1, #80]	; 0x50
 8003886:	e001      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d049      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a0:	d02e      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a6:	d828      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038ac:	d02a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80038ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038b2:	d822      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b8:	d026      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80038ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038be:	d81c      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c4:	d010      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80038c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ca:	d816      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01d      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x488>
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d111      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	2101      	movs	r1, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 ffd5 	bl	800488c <RCCEx_PLL2_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038e6:	e012      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3324      	adds	r3, #36	; 0x24
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 f87e 	bl	80049f0 <RCCEx_PLL3_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038f8:	e009      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
      break;
 80038fe:	e006      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003900:	bf00      	nop
 8003902:	e004      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003904:	bf00      	nop
 8003906:	e002      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003908:	bf00      	nop
 800390a:	e000      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800390c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003914:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003918:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003920:	492a      	ldr	r1, [pc, #168]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003922:	4313      	orrs	r3, r2
 8003924:	650b      	str	r3, [r1, #80]	; 0x50
 8003926:	e001      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d04d      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800393e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003942:	d02e      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003948:	d828      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394e:	d02a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003954:	d822      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003956:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800395a:	d026      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x526>
 800395c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003960:	d81c      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003966:	d010      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396c:	d816      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01d      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003976:	d111      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f000 ff84 	bl	800488c <RCCEx_PLL2_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003988:	e012      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3324      	adds	r3, #36	; 0x24
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f001 f82d 	bl	80049f0 <RCCEx_PLL3_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800399a:	e009      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	75fb      	strb	r3, [r7, #23]
      break;
 80039a0:	e006      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039a2:	bf00      	nop
 80039a4:	e004      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039a6:	bf00      	nop
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039c4:	4901      	ldr	r1, [pc, #4]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	658b      	str	r3, [r1, #88]	; 0x58
 80039ca:	e003      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80039cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02f      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e8:	d00e      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80039ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ee:	d814      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80039f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f8:	d10f      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039fa:	4baf      	ldr	r3, [pc, #700]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	4aae      	ldr	r2, [pc, #696]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a06:	e00c      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 ff3c 	bl	800488c <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a18:	e003      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a28:	4ba3      	ldr	r3, [pc, #652]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a34:	49a0      	ldr	r1, [pc, #640]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	650b      	str	r3, [r1, #80]	; 0x50
 8003a3a:	e001      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d032      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d81b      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a93 	.word	0x08003a93
 8003a60:	08003a6d 	.word	0x08003a6d
 8003a64:	08003a7b 	.word	0x08003a7b
 8003a68:	08003a93 	.word	0x08003a93
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a6c:	4b92      	ldr	r3, [pc, #584]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	4a91      	ldr	r2, [pc, #580]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a78:	e00c      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2102      	movs	r1, #2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 ff03 	bl	800488c <RCCEx_PLL2_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a8a:	e003      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a90:	e000      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a9a:	4b87      	ldr	r3, [pc, #540]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	f023 0203 	bic.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	4984      	ldr	r1, [pc, #528]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003aac:	e001      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8086 	beq.w	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac0:	4b7e      	ldr	r3, [pc, #504]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a7d      	ldr	r2, [pc, #500]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003acc:	f7fd fc6c 	bl	80013a8 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad2:	e009      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad4:	f7fd fc68 	bl	80013a8 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	; 0x64
 8003ae0:	d902      	bls.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	75fb      	strb	r3, [r7, #23]
        break;
 8003ae6:	e005      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae8:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d166      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003afa:	4b6f      	ldr	r3, [pc, #444]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003afc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b04:	4053      	eors	r3, r2
 8003b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d013      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b0e:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b16:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b18:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4a66      	ldr	r2, [pc, #408]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b24:	4b64      	ldr	r3, [pc, #400]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a63      	ldr	r2, [pc, #396]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b30:	4a61      	ldr	r2, [pc, #388]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b40:	d115      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd fc31 	bl	80013a8 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b48:	e00b      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fd fc2d 	bl	80013a8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d902      	bls.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	75fb      	strb	r3, [r7, #23]
            break;
 8003b60:	e005      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b62:	4b55      	ldr	r3, [pc, #340]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0ed      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d126      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b82:	d10d      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003b84:	4b4c      	ldr	r3, [pc, #304]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b92:	0919      	lsrs	r1, r3, #4
 8003b94:	4b4a      	ldr	r3, [pc, #296]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003b96:	400b      	ands	r3, r1
 8003b98:	4947      	ldr	r1, [pc, #284]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	610b      	str	r3, [r1, #16]
 8003b9e:	e005      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003ba0:	4b45      	ldr	r3, [pc, #276]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	4a44      	ldr	r2, [pc, #272]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ba6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003baa:	6113      	str	r3, [r2, #16]
 8003bac:	4b42      	ldr	r3, [pc, #264]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bba:	493f      	ldr	r1, [pc, #252]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	670b      	str	r3, [r1, #112]	; 0x70
 8003bc0:	e004      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	75bb      	strb	r3, [r7, #22]
 8003bc6:	e001      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8085 	beq.w	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bde:	2b28      	cmp	r3, #40	; 0x28
 8003be0:	d866      	bhi.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003cc5 	.word	0x08003cc5
 8003bec:	08003cb1 	.word	0x08003cb1
 8003bf0:	08003cb1 	.word	0x08003cb1
 8003bf4:	08003cb1 	.word	0x08003cb1
 8003bf8:	08003cb1 	.word	0x08003cb1
 8003bfc:	08003cb1 	.word	0x08003cb1
 8003c00:	08003cb1 	.word	0x08003cb1
 8003c04:	08003cb1 	.word	0x08003cb1
 8003c08:	08003c8d 	.word	0x08003c8d
 8003c0c:	08003cb1 	.word	0x08003cb1
 8003c10:	08003cb1 	.word	0x08003cb1
 8003c14:	08003cb1 	.word	0x08003cb1
 8003c18:	08003cb1 	.word	0x08003cb1
 8003c1c:	08003cb1 	.word	0x08003cb1
 8003c20:	08003cb1 	.word	0x08003cb1
 8003c24:	08003cb1 	.word	0x08003cb1
 8003c28:	08003c9f 	.word	0x08003c9f
 8003c2c:	08003cb1 	.word	0x08003cb1
 8003c30:	08003cb1 	.word	0x08003cb1
 8003c34:	08003cb1 	.word	0x08003cb1
 8003c38:	08003cb1 	.word	0x08003cb1
 8003c3c:	08003cb1 	.word	0x08003cb1
 8003c40:	08003cb1 	.word	0x08003cb1
 8003c44:	08003cb1 	.word	0x08003cb1
 8003c48:	08003cc5 	.word	0x08003cc5
 8003c4c:	08003cb1 	.word	0x08003cb1
 8003c50:	08003cb1 	.word	0x08003cb1
 8003c54:	08003cb1 	.word	0x08003cb1
 8003c58:	08003cb1 	.word	0x08003cb1
 8003c5c:	08003cb1 	.word	0x08003cb1
 8003c60:	08003cb1 	.word	0x08003cb1
 8003c64:	08003cb1 	.word	0x08003cb1
 8003c68:	08003cc5 	.word	0x08003cc5
 8003c6c:	08003cb1 	.word	0x08003cb1
 8003c70:	08003cb1 	.word	0x08003cb1
 8003c74:	08003cb1 	.word	0x08003cb1
 8003c78:	08003cb1 	.word	0x08003cb1
 8003c7c:	08003cb1 	.word	0x08003cb1
 8003c80:	08003cb1 	.word	0x08003cb1
 8003c84:	08003cb1 	.word	0x08003cb1
 8003c88:	08003cc5 	.word	0x08003cc5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	2101      	movs	r1, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fdfa 	bl	800488c <RCCEx_PLL2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c9c:	e013      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3324      	adds	r3, #36	; 0x24
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fea3 	bl	80049f0 <RCCEx_PLL3_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb4:	e007      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cb6:	bf00      	nop
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	58024800 	.word	0x58024800
 8003cc0:	00ffffcf 	.word	0x00ffffcf
      break;
 8003cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d109      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ccc:	4b96      	ldr	r3, [pc, #600]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd8:	4993      	ldr	r1, [pc, #588]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	654b      	str	r3, [r1, #84]	; 0x54
 8003cde:	e001      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d038      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d821      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d43 	.word	0x08003d43
 8003d04:	08003d19 	.word	0x08003d19
 8003d08:	08003d2b 	.word	0x08003d2b
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d43 	.word	0x08003d43
 8003d14:	08003d43 	.word	0x08003d43
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fdb4 	bl	800488c <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d28:	e00c      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3324      	adds	r3, #36	; 0x24
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fe5d 	bl	80049f0 <RCCEx_PLL3_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d3a:	e003      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d40:	e000      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d4a:	4b77      	ldr	r3, [pc, #476]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	f023 0207 	bic.w	r2, r3, #7
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	4974      	ldr	r1, [pc, #464]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	654b      	str	r3, [r1, #84]	; 0x54
 8003d5c:	e001      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d03a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	2b05      	cmp	r3, #5
 8003d76:	d821      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003dc3 	.word	0x08003dc3
 8003d84:	08003d99 	.word	0x08003d99
 8003d88:	08003dab 	.word	0x08003dab
 8003d8c:	08003dc3 	.word	0x08003dc3
 8003d90:	08003dc3 	.word	0x08003dc3
 8003d94:	08003dc3 	.word	0x08003dc3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fd74 	bl	800488c <RCCEx_PLL2_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003da8:	e00c      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3324      	adds	r3, #36	; 0x24
 8003dae:	2101      	movs	r1, #1
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fe1d 	bl	80049f0 <RCCEx_PLL3_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003dba:	e003      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dca:	4b57      	ldr	r3, [pc, #348]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	f023 0207 	bic.w	r2, r3, #7
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	4953      	ldr	r1, [pc, #332]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	658b      	str	r3, [r1, #88]	; 0x58
 8003dde:	e001      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d04b      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dfa:	d02e      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e00:	d828      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d02a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d822      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e12:	d026      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e18:	d81c      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e1e:	d010      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e24:	d816      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01d      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e2e:	d111      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fd28 	bl	800488c <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e40:	e012      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3324      	adds	r3, #36	; 0x24
 8003e46:	2102      	movs	r1, #2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fdd1 	bl	80049f0 <RCCEx_PLL3_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e52:	e009      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
      break;
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e004      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e002      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e6e:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7c:	492a      	ldr	r1, [pc, #168]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	654b      	str	r3, [r1, #84]	; 0x54
 8003e82:	e001      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d04d      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e9e:	d02e      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003ea0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ea4:	d828      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	d02a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb0:	d822      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003eb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eb6:	d026      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ebc:	d81c      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec2:	d010      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec8:	d816      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01d      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed2:	d111      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fcd6 	bl	800488c <RCCEx_PLL2_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ee4:	e012      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3324      	adds	r3, #36	; 0x24
 8003eea:	2102      	movs	r1, #2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fd7f 	bl	80049f0 <RCCEx_PLL3_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ef6:	e009      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	75fb      	strb	r3, [r7, #23]
      break;
 8003efc:	e006      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003efe:	bf00      	nop
 8003f00:	e004      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f20:	4901      	ldr	r1, [pc, #4]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	658b      	str	r3, [r1, #88]	; 0x58
 8003f26:	e003      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003f28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d04b      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f46:	d02e      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f4c:	d828      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f52:	d02a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f58:	d822      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f5e:	d026      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003f60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f64:	d81c      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f6a:	d010      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f70:	d816      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01d      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fc82 	bl	800488c <RCCEx_PLL2_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f8c:	e012      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3324      	adds	r3, #36	; 0x24
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fd2b 	bl	80049f0 <RCCEx_PLL3_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f9e:	e009      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa4:	e006      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e004      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fba:	4b9d      	ldr	r3, [pc, #628]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fc8:	4999      	ldr	r1, [pc, #612]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	658b      	str	r3, [r1, #88]	; 0x58
 8003fce:	e001      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fea:	d10a      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3324      	adds	r3, #36	; 0x24
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fcfc 	bl	80049f0 <RCCEx_PLL3_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004002:	4b8b      	ldr	r3, [pc, #556]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004010:	4987      	ldr	r1, [pc, #540]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004012:	4313      	orrs	r3, r2
 8004014:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402c:	d10a      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3324      	adds	r3, #36	; 0x24
 8004032:	2102      	movs	r1, #2
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fcdb 	bl	80049f0 <RCCEx_PLL3_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004044:	4b7a      	ldr	r3, [pc, #488]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004052:	4977      	ldr	r1, [pc, #476]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004054:	4313      	orrs	r3, r2
 8004056:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d034      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800406a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406e:	d01d      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004074:	d817      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800407a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407e:	d009      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004080:	e011      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fbff 	bl	800488c <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004092:	e00c      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3324      	adds	r3, #36	; 0x24
 8004098:	2102      	movs	r1, #2
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fca8 	bl	80049f0 <RCCEx_PLL3_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040a4:	e003      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	75fb      	strb	r3, [r7, #23]
      break;
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80040ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b4:	4b5e      	ldr	r3, [pc, #376]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040c2:	495b      	ldr	r1, [pc, #364]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	658b      	str	r3, [r1, #88]	; 0x58
 80040c8:	e001      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
 80040cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d033      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040e4:	d01c      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80040e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040ea:	d816      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80040ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f0:	d003      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80040f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040f6:	d007      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80040f8:	e00f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040fa:	4b4d      	ldr	r3, [pc, #308]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	4a4c      	ldr	r2, [pc, #304]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004106:	e00c      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3324      	adds	r3, #36	; 0x24
 800410c:	2101      	movs	r1, #1
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fc6e 	bl	80049f0 <RCCEx_PLL3_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004118:	e003      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
      break;
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004128:	4b41      	ldr	r3, [pc, #260]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800412a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004136:	493e      	ldr	r1, [pc, #248]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004138:	4313      	orrs	r3, r2
 800413a:	654b      	str	r3, [r1, #84]	; 0x54
 800413c:	e001      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d029      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d007      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800415c:	e00f      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415e:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	4a33      	ldr	r2, [pc, #204]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004168:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800416a:	e00b      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fb8a 	bl	800488c <RCCEx_PLL2_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800417c:	e002      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]
      break;
 8004182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004184:	7dfb      	ldrb	r3, [r7, #23]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800418a:	4b29      	ldr	r3, [pc, #164]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800418c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004196:	4926      	ldr	r1, [pc, #152]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004198:	4313      	orrs	r3, r2
 800419a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800419c:	e001      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3324      	adds	r3, #36	; 0x24
 80041b2:	2102      	movs	r1, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fc1b 	bl	80049f0 <RCCEx_PLL3_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d033      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d8:	d017      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80041da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041de:	d811      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80041e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e4:	d013      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80041e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ea:	d80b      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80041f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f4:	d106      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f6:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004200:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004202:	e007      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
      break;
 8004208:	e004      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800420a:	bf00      	nop
 800420c:	e002      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004226:	4902      	ldr	r1, [pc, #8]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004228:	4313      	orrs	r3, r2
 800422a:	654b      	str	r3, [r1, #84]	; 0x54
 800422c:	e004      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800422e:	bf00      	nop
 8004230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004244:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004248:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	492e      	ldr	r1, [pc, #184]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004252:	4313      	orrs	r3, r2
 8004254:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004262:	4b2a      	ldr	r3, [pc, #168]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004270:	4926      	ldr	r1, [pc, #152]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004272:	4313      	orrs	r3, r2
 8004274:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004282:	4b22      	ldr	r3, [pc, #136]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004286:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800428e:	491f      	ldr	r1, [pc, #124]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004290:	4313      	orrs	r3, r2
 8004292:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042aa:	6113      	str	r3, [r2, #16]
 80042ac:	4b17      	ldr	r3, [pc, #92]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042b6:	4915      	ldr	r1, [pc, #84]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	da08      	bge.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042c4:	4b11      	ldr	r3, [pc, #68]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	490e      	ldr	r1, [pc, #56]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	4906      	ldr	r1, [pc, #24]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80042f6:	7dbb      	ldrb	r3, [r7, #22]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e000      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	58024400 	.word	0x58024400

08004310 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004314:	f7ff f85a 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	4904      	ldr	r1, [pc, #16]	; (8004338 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	58024400 	.word	0x58024400
 8004338:	08009084 	.word	0x08009084

0800433c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800433c:	b480      	push	{r7}
 800433e:	b089      	sub	sp, #36	; 0x24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004344:	4ba1      	ldr	r3, [pc, #644]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800434e:	4b9f      	ldr	r3, [pc, #636]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	0b1b      	lsrs	r3, r3, #12
 8004354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004358:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800435a:	4b9c      	ldr	r3, [pc, #624]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004366:	4b99      	ldr	r3, [pc, #612]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	08db      	lsrs	r3, r3, #3
 800436c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8111 	beq.w	80045ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b02      	cmp	r3, #2
 800438e:	f000 8083 	beq.w	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b02      	cmp	r3, #2
 8004396:	f200 80a1 	bhi.w	80044dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d056      	beq.n	8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043a6:	e099      	b.n	80044dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a8:	4b88      	ldr	r3, [pc, #544]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02d      	beq.n	8004410 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043b4:	4b85      	ldr	r3, [pc, #532]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	08db      	lsrs	r3, r3, #3
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	4a84      	ldr	r2, [pc, #528]	; (80045d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
 80043c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043de:	4b7b      	ldr	r3, [pc, #492]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80043f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800440e:	e087      	b.n	8004520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800441e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004422:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004432:	ed97 6a03 	vldr	s12, [r7, #12]
 8004436:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800443a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004452:	e065      	b.n	8004520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004466:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004476:	ed97 6a03 	vldr	s12, [r7, #12]
 800447a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800447e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800448a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004496:	e043      	b.n	8004520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044aa:	4b48      	ldr	r3, [pc, #288]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80044be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044da:	e021      	b.n	8004520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ee:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004502:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800451e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004520:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	0a5b      	lsrs	r3, r3, #9
 8004526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800453a:	edd7 6a07 	vldr	s13, [r7, #28]
 800453e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004546:	ee17 2a90 	vmov	r2, s15
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800454e:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	0c1b      	lsrs	r3, r3, #16
 8004554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004558:	ee07 3a90 	vmov	s15, r3
 800455c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004568:	edd7 6a07 	vldr	s13, [r7, #28]
 800456c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004574:	ee17 2a90 	vmov	r2, s15
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800457c:	4b13      	ldr	r3, [pc, #76]	; (80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	0e1b      	lsrs	r3, r3, #24
 8004582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004596:	edd7 6a07 	vldr	s13, [r7, #28]
 800459a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a2:	ee17 2a90 	vmov	r2, s15
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045aa:	e008      	b.n	80045be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	609a      	str	r2, [r3, #8]
}
 80045be:	bf00      	nop
 80045c0:	3724      	adds	r7, #36	; 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	58024400 	.word	0x58024400
 80045d0:	03d09000 	.word	0x03d09000
 80045d4:	46000000 	.word	0x46000000
 80045d8:	4c742400 	.word	0x4c742400
 80045dc:	4a742400 	.word	0x4a742400
 80045e0:	4af42400 	.word	0x4af42400

080045e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045ec:	4ba1      	ldr	r3, [pc, #644]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80045f6:	4b9f      	ldr	r3, [pc, #636]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	0d1b      	lsrs	r3, r3, #20
 80045fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004600:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004602:	4b9c      	ldr	r3, [pc, #624]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800460e:	4b99      	ldr	r3, [pc, #612]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	08db      	lsrs	r3, r3, #3
 8004614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004626:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8111 	beq.w	8004854 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b02      	cmp	r3, #2
 8004636:	f000 8083 	beq.w	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b02      	cmp	r3, #2
 800463e:	f200 80a1 	bhi.w	8004784 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d056      	beq.n	80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800464e:	e099      	b.n	8004784 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004650:	4b88      	ldr	r3, [pc, #544]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02d      	beq.n	80046b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800465c:	4b85      	ldr	r3, [pc, #532]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	08db      	lsrs	r3, r3, #3
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	4a84      	ldr	r2, [pc, #528]	; (8004878 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
 800466c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004686:	4b7b      	ldr	r3, [pc, #492]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004696:	ed97 6a03 	vldr	s12, [r7, #12]
 800469a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800487c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800469e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046b6:	e087      	b.n	80047c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ca:	4b6a      	ldr	r3, [pc, #424]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046da:	ed97 6a03 	vldr	s12, [r7, #12]
 80046de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800487c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046fa:	e065      	b.n	80047c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004706:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800470a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470e:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004722:	eddf 5a56 	vldr	s11, [pc, #344]	; 800487c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800473e:	e043      	b.n	80047c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800474e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004752:	4b48      	ldr	r3, [pc, #288]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004762:	ed97 6a03 	vldr	s12, [r7, #12]
 8004766:	eddf 5a45 	vldr	s11, [pc, #276]	; 800487c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800476a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004782:	e021      	b.n	80047c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	4b37      	ldr	r3, [pc, #220]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800487c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80047c8:	4b2a      	ldr	r3, [pc, #168]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	0a5b      	lsrs	r3, r3, #9
 80047ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ee:	ee17 2a90 	vmov	r2, s15
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80047f6:	4b1f      	ldr	r3, [pc, #124]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	0c1b      	lsrs	r3, r3, #16
 80047fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800480c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004810:	edd7 6a07 	vldr	s13, [r7, #28]
 8004814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481c:	ee17 2a90 	vmov	r2, s15
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	0e1b      	lsrs	r3, r3, #24
 800482a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800483a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800483e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800484a:	ee17 2a90 	vmov	r2, s15
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004852:	e008      	b.n	8004866 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
}
 8004866:	bf00      	nop
 8004868:	3724      	adds	r7, #36	; 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	58024400 	.word	0x58024400
 8004878:	03d09000 	.word	0x03d09000
 800487c:	46000000 	.word	0x46000000
 8004880:	4c742400 	.word	0x4c742400
 8004884:	4a742400 	.word	0x4a742400
 8004888:	4af42400 	.word	0x4af42400

0800488c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800489a:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d101      	bne.n	80048aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e099      	b.n	80049de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048aa:	4b4f      	ldr	r3, [pc, #316]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a4e      	ldr	r2, [pc, #312]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 80048b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b6:	f7fc fd77 	bl	80013a8 <HAL_GetTick>
 80048ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048bc:	e008      	b.n	80048d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048be:	f7fc fd73 	bl	80013a8 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e086      	b.n	80049de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048d0:	4b45      	ldr	r3, [pc, #276]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f0      	bne.n	80048be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048dc:	4b42      	ldr	r3, [pc, #264]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	031b      	lsls	r3, r3, #12
 80048ea:	493f      	ldr	r1, [pc, #252]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	628b      	str	r3, [r1, #40]	; 0x28
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	3b01      	subs	r3, #1
 8004900:	025b      	lsls	r3, r3, #9
 8004902:	b29b      	uxth	r3, r3
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	3b01      	subs	r3, #1
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004920:	4931      	ldr	r1, [pc, #196]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004926:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	492d      	ldr	r1, [pc, #180]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004934:	4313      	orrs	r3, r2
 8004936:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	f023 0220 	bic.w	r2, r3, #32
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	4928      	ldr	r1, [pc, #160]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800494a:	4b27      	ldr	r3, [pc, #156]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004950:	f023 0310 	bic.w	r3, r3, #16
 8004954:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004956:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800495a:	4b24      	ldr	r3, [pc, #144]	; (80049ec <RCCEx_PLL2_Config+0x160>)
 800495c:	4013      	ands	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	69d2      	ldr	r2, [r2, #28]
 8004962:	00d2      	lsls	r2, r2, #3
 8004964:	4920      	ldr	r1, [pc, #128]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800496a:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004970:	f043 0310 	orr.w	r3, r3, #16
 8004974:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800497c:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004986:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004988:	e00f      	b.n	80049aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d106      	bne.n	800499e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004990:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 8004996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800499a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800499c:	e005      	b.n	80049aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	4a11      	ldr	r2, [pc, #68]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 80049a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a0e      	ldr	r2, [pc, #56]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 80049b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fc fcf7 	bl	80013a8 <HAL_GetTick>
 80049ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049bc:	e008      	b.n	80049d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049be:	f7fc fcf3 	bl	80013a8 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e006      	b.n	80049de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <RCCEx_PLL2_Config+0x15c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	58024400 	.word	0x58024400
 80049ec:	ffff0007 	.word	0xffff0007

080049f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049fe:	4b53      	ldr	r3, [pc, #332]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d101      	bne.n	8004a0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e099      	b.n	8004b42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a0e:	4b4f      	ldr	r3, [pc, #316]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a4e      	ldr	r2, [pc, #312]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1a:	f7fc fcc5 	bl	80013a8 <HAL_GetTick>
 8004a1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a20:	e008      	b.n	8004a34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a22:	f7fc fcc1 	bl	80013a8 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e086      	b.n	8004b42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a34:	4b45      	ldr	r3, [pc, #276]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f0      	bne.n	8004a22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a40:	4b42      	ldr	r3, [pc, #264]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	051b      	lsls	r3, r3, #20
 8004a4e:	493f      	ldr	r1, [pc, #252]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	628b      	str	r3, [r1, #40]	; 0x28
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	025b      	lsls	r3, r3, #9
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	061b      	lsls	r3, r3, #24
 8004a80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a84:	4931      	ldr	r1, [pc, #196]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a8a:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	492d      	ldr	r1, [pc, #180]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	4928      	ldr	r1, [pc, #160]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004aae:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	4a26      	ldr	r2, [pc, #152]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004aba:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004abe:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <RCCEx_PLL3_Config+0x160>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	69d2      	ldr	r2, [r2, #28]
 8004ac6:	00d2      	lsls	r2, r2, #3
 8004ac8:	4920      	ldr	r1, [pc, #128]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ace:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	4a1e      	ldr	r2, [pc, #120]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004ae6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004aec:	e00f      	b.n	8004b0e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d106      	bne.n	8004b02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004af4:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004afa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004afe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b00:	e005      	b.n	8004b0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	4a11      	ldr	r2, [pc, #68]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1a:	f7fc fc45 	bl	80013a8 <HAL_GetTick>
 8004b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b20:	e008      	b.n	8004b34 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b22:	f7fc fc41 	bl	80013a8 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e006      	b.n	8004b42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <RCCEx_PLL3_Config+0x15c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f0      	beq.n	8004b22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	ffff0007 	.word	0xffff0007

08004b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e042      	b.n	8004bec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fc f90d 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2224      	movs	r2, #36	; 0x24
 8004b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f996 	bl	8004ec8 <UART_SetConfig>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e022      	b.n	8004bec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fef2 	bl	8005998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 ff79 	bl	8005adc <UART_CheckIdleState>
 8004bea:	4603      	mov	r3, r0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	f040 8083 	bne.w	8004d16 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_UART_Transmit+0x28>
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e07b      	b.n	8004d18 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_UART_Transmit+0x3a>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e074      	b.n	8004d18 <HAL_UART_Transmit+0x124>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2221      	movs	r2, #33	; 0x21
 8004c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c46:	f7fc fbaf 	bl	80013a8 <HAL_GetTick>
 8004c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c64:	d108      	bne.n	8004c78 <HAL_UART_Transmit+0x84>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d104      	bne.n	8004c78 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	e003      	b.n	8004c80 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004c88:	e02c      	b.n	8004ce4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 ff6c 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e039      	b.n	8004d18 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10b      	bne.n	8004cc2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	e007      	b.n	8004cd2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	781a      	ldrb	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1cc      	bne.n	8004c8a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2140      	movs	r1, #64	; 0x40
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 ff39 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e006      	b.n	8004d18 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e000      	b.n	8004d18 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d16:	2302      	movs	r3, #2
  }
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	f040 80c0 	bne.w	8004ebc <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_UART_Receive+0x28>
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0b8      	b.n	8004ebe <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Receive+0x3a>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e0b1      	b.n	8004ebe <HAL_UART_Receive+0x19e>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2222      	movs	r2, #34	; 0x22
 8004d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d78:	f7fc fb16 	bl	80013a8 <HAL_GetTick>
 8004d7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	88fa      	ldrh	r2, [r7, #6]
 8004d82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d96:	d10e      	bne.n	8004db6 <HAL_UART_Receive+0x96>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d105      	bne.n	8004dac <HAL_UART_Receive+0x8c>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004da6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004daa:	e02d      	b.n	8004e08 <HAL_UART_Receive+0xe8>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	22ff      	movs	r2, #255	; 0xff
 8004db0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004db4:	e028      	b.n	8004e08 <HAL_UART_Receive+0xe8>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10d      	bne.n	8004dda <HAL_UART_Receive+0xba>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <HAL_UART_Receive+0xb0>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	22ff      	movs	r2, #255	; 0xff
 8004dca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dce:	e01b      	b.n	8004e08 <HAL_UART_Receive+0xe8>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	227f      	movs	r2, #127	; 0x7f
 8004dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dd8:	e016      	b.n	8004e08 <HAL_UART_Receive+0xe8>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004de2:	d10d      	bne.n	8004e00 <HAL_UART_Receive+0xe0>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_UART_Receive+0xd6>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	227f      	movs	r2, #127	; 0x7f
 8004df0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004df4:	e008      	b.n	8004e08 <HAL_UART_Receive+0xe8>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	223f      	movs	r2, #63	; 0x3f
 8004dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dfe:	e003      	b.n	8004e08 <HAL_UART_Receive+0xe8>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e0e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e18:	d108      	bne.n	8004e2c <HAL_UART_Receive+0x10c>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d104      	bne.n	8004e2c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	e003      	b.n	8004e34 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e3c:	e032      	b.n	8004ea4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2120      	movs	r1, #32
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 fe92 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e032      	b.n	8004ebe <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10c      	bne.n	8004e78 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	8a7b      	ldrh	r3, [r7, #18]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	3302      	adds	r3, #2
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e00c      	b.n	8004e92 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	8a7b      	ldrh	r3, [r7, #18]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	4013      	ands	r3, r2
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1c6      	bne.n	8004e3e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e000      	b.n	8004ebe <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ecc:	b092      	sub	sp, #72	; 0x48
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4bbe      	ldr	r3, [pc, #760]	; (80051f0 <UART_SetConfig+0x328>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4ab3      	ldr	r2, [pc, #716]	; (80051f4 <UART_SetConfig+0x32c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f30:	4313      	orrs	r3, r2
 8004f32:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	4baf      	ldr	r3, [pc, #700]	; (80051f8 <UART_SetConfig+0x330>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	f023 010f 	bic.w	r1, r3, #15
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4aa6      	ldr	r2, [pc, #664]	; (80051fc <UART_SetConfig+0x334>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d177      	bne.n	8005058 <UART_SetConfig+0x190>
 8004f68:	4ba5      	ldr	r3, [pc, #660]	; (8005200 <UART_SetConfig+0x338>)
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f70:	2b28      	cmp	r3, #40	; 0x28
 8004f72:	d86d      	bhi.n	8005050 <UART_SetConfig+0x188>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0xb4>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08005021 	.word	0x08005021
 8004f80:	08005051 	.word	0x08005051
 8004f84:	08005051 	.word	0x08005051
 8004f88:	08005051 	.word	0x08005051
 8004f8c:	08005051 	.word	0x08005051
 8004f90:	08005051 	.word	0x08005051
 8004f94:	08005051 	.word	0x08005051
 8004f98:	08005051 	.word	0x08005051
 8004f9c:	08005029 	.word	0x08005029
 8004fa0:	08005051 	.word	0x08005051
 8004fa4:	08005051 	.word	0x08005051
 8004fa8:	08005051 	.word	0x08005051
 8004fac:	08005051 	.word	0x08005051
 8004fb0:	08005051 	.word	0x08005051
 8004fb4:	08005051 	.word	0x08005051
 8004fb8:	08005051 	.word	0x08005051
 8004fbc:	08005031 	.word	0x08005031
 8004fc0:	08005051 	.word	0x08005051
 8004fc4:	08005051 	.word	0x08005051
 8004fc8:	08005051 	.word	0x08005051
 8004fcc:	08005051 	.word	0x08005051
 8004fd0:	08005051 	.word	0x08005051
 8004fd4:	08005051 	.word	0x08005051
 8004fd8:	08005051 	.word	0x08005051
 8004fdc:	08005039 	.word	0x08005039
 8004fe0:	08005051 	.word	0x08005051
 8004fe4:	08005051 	.word	0x08005051
 8004fe8:	08005051 	.word	0x08005051
 8004fec:	08005051 	.word	0x08005051
 8004ff0:	08005051 	.word	0x08005051
 8004ff4:	08005051 	.word	0x08005051
 8004ff8:	08005051 	.word	0x08005051
 8004ffc:	08005041 	.word	0x08005041
 8005000:	08005051 	.word	0x08005051
 8005004:	08005051 	.word	0x08005051
 8005008:	08005051 	.word	0x08005051
 800500c:	08005051 	.word	0x08005051
 8005010:	08005051 	.word	0x08005051
 8005014:	08005051 	.word	0x08005051
 8005018:	08005051 	.word	0x08005051
 800501c:	08005049 	.word	0x08005049
 8005020:	2301      	movs	r3, #1
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e222      	b.n	800546e <UART_SetConfig+0x5a6>
 8005028:	2304      	movs	r3, #4
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e21e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005030:	2308      	movs	r3, #8
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e21a      	b.n	800546e <UART_SetConfig+0x5a6>
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e216      	b.n	800546e <UART_SetConfig+0x5a6>
 8005040:	2320      	movs	r3, #32
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005046:	e212      	b.n	800546e <UART_SetConfig+0x5a6>
 8005048:	2340      	movs	r3, #64	; 0x40
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504e:	e20e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005056:	e20a      	b.n	800546e <UART_SetConfig+0x5a6>
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a69      	ldr	r2, [pc, #420]	; (8005204 <UART_SetConfig+0x33c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d130      	bne.n	80050c4 <UART_SetConfig+0x1fc>
 8005062:	4b67      	ldr	r3, [pc, #412]	; (8005200 <UART_SetConfig+0x338>)
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b05      	cmp	r3, #5
 800506c:	d826      	bhi.n	80050bc <UART_SetConfig+0x1f4>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <UART_SetConfig+0x1ac>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	0800508d 	.word	0x0800508d
 8005078:	08005095 	.word	0x08005095
 800507c:	0800509d 	.word	0x0800509d
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050b5 	.word	0x080050b5
 800508c:	2300      	movs	r3, #0
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e1ec      	b.n	800546e <UART_SetConfig+0x5a6>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e1e8      	b.n	800546e <UART_SetConfig+0x5a6>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e1e4      	b.n	800546e <UART_SetConfig+0x5a6>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	e1e0      	b.n	800546e <UART_SetConfig+0x5a6>
 80050ac:	2320      	movs	r3, #32
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b2:	e1dc      	b.n	800546e <UART_SetConfig+0x5a6>
 80050b4:	2340      	movs	r3, #64	; 0x40
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ba:	e1d8      	b.n	800546e <UART_SetConfig+0x5a6>
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c2:	e1d4      	b.n	800546e <UART_SetConfig+0x5a6>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a4f      	ldr	r2, [pc, #316]	; (8005208 <UART_SetConfig+0x340>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d130      	bne.n	8005130 <UART_SetConfig+0x268>
 80050ce:	4b4c      	ldr	r3, [pc, #304]	; (8005200 <UART_SetConfig+0x338>)
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d826      	bhi.n	8005128 <UART_SetConfig+0x260>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <UART_SetConfig+0x218>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	080050f9 	.word	0x080050f9
 80050e4:	08005101 	.word	0x08005101
 80050e8:	08005109 	.word	0x08005109
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fe:	e1b6      	b.n	800546e <UART_SetConfig+0x5a6>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005106:	e1b2      	b.n	800546e <UART_SetConfig+0x5a6>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510e:	e1ae      	b.n	800546e <UART_SetConfig+0x5a6>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005116:	e1aa      	b.n	800546e <UART_SetConfig+0x5a6>
 8005118:	2320      	movs	r3, #32
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511e:	e1a6      	b.n	800546e <UART_SetConfig+0x5a6>
 8005120:	2340      	movs	r3, #64	; 0x40
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005126:	e1a2      	b.n	800546e <UART_SetConfig+0x5a6>
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512e:	e19e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a35      	ldr	r2, [pc, #212]	; (800520c <UART_SetConfig+0x344>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d130      	bne.n	800519c <UART_SetConfig+0x2d4>
 800513a:	4b31      	ldr	r3, [pc, #196]	; (8005200 <UART_SetConfig+0x338>)
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	2b05      	cmp	r3, #5
 8005144:	d826      	bhi.n	8005194 <UART_SetConfig+0x2cc>
 8005146:	a201      	add	r2, pc, #4	; (adr r2, 800514c <UART_SetConfig+0x284>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	08005165 	.word	0x08005165
 8005150:	0800516d 	.word	0x0800516d
 8005154:	08005175 	.word	0x08005175
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	2300      	movs	r3, #0
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e180      	b.n	800546e <UART_SetConfig+0x5a6>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e17c      	b.n	800546e <UART_SetConfig+0x5a6>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517a:	e178      	b.n	800546e <UART_SetConfig+0x5a6>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005182:	e174      	b.n	800546e <UART_SetConfig+0x5a6>
 8005184:	2320      	movs	r3, #32
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518a:	e170      	b.n	800546e <UART_SetConfig+0x5a6>
 800518c:	2340      	movs	r3, #64	; 0x40
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005192:	e16c      	b.n	800546e <UART_SetConfig+0x5a6>
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519a:	e168      	b.n	800546e <UART_SetConfig+0x5a6>
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <UART_SetConfig+0x348>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d142      	bne.n	800522c <UART_SetConfig+0x364>
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <UART_SetConfig+0x338>)
 80051a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d838      	bhi.n	8005224 <UART_SetConfig+0x35c>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <UART_SetConfig+0x2f0>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051d1 	.word	0x080051d1
 80051bc:	080051d9 	.word	0x080051d9
 80051c0:	080051e1 	.word	0x080051e1
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	08005215 	.word	0x08005215
 80051cc:	0800521d 	.word	0x0800521d
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e14a      	b.n	800546e <UART_SetConfig+0x5a6>
 80051d8:	2304      	movs	r3, #4
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e146      	b.n	800546e <UART_SetConfig+0x5a6>
 80051e0:	2308      	movs	r3, #8
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e6:	e142      	b.n	800546e <UART_SetConfig+0x5a6>
 80051e8:	2310      	movs	r3, #16
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ee:	e13e      	b.n	800546e <UART_SetConfig+0x5a6>
 80051f0:	cfff69f3 	.word	0xcfff69f3
 80051f4:	58000c00 	.word	0x58000c00
 80051f8:	11fff4ff 	.word	0x11fff4ff
 80051fc:	40011000 	.word	0x40011000
 8005200:	58024400 	.word	0x58024400
 8005204:	40004400 	.word	0x40004400
 8005208:	40004800 	.word	0x40004800
 800520c:	40004c00 	.word	0x40004c00
 8005210:	40005000 	.word	0x40005000
 8005214:	2320      	movs	r3, #32
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e128      	b.n	800546e <UART_SetConfig+0x5a6>
 800521c:	2340      	movs	r3, #64	; 0x40
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e124      	b.n	800546e <UART_SetConfig+0x5a6>
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e120      	b.n	800546e <UART_SetConfig+0x5a6>
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4acb      	ldr	r2, [pc, #812]	; (8005560 <UART_SetConfig+0x698>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d176      	bne.n	8005324 <UART_SetConfig+0x45c>
 8005236:	4bcb      	ldr	r3, [pc, #812]	; (8005564 <UART_SetConfig+0x69c>)
 8005238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800523e:	2b28      	cmp	r3, #40	; 0x28
 8005240:	d86c      	bhi.n	800531c <UART_SetConfig+0x454>
 8005242:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0x380>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	080052ed 	.word	0x080052ed
 800524c:	0800531d 	.word	0x0800531d
 8005250:	0800531d 	.word	0x0800531d
 8005254:	0800531d 	.word	0x0800531d
 8005258:	0800531d 	.word	0x0800531d
 800525c:	0800531d 	.word	0x0800531d
 8005260:	0800531d 	.word	0x0800531d
 8005264:	0800531d 	.word	0x0800531d
 8005268:	080052f5 	.word	0x080052f5
 800526c:	0800531d 	.word	0x0800531d
 8005270:	0800531d 	.word	0x0800531d
 8005274:	0800531d 	.word	0x0800531d
 8005278:	0800531d 	.word	0x0800531d
 800527c:	0800531d 	.word	0x0800531d
 8005280:	0800531d 	.word	0x0800531d
 8005284:	0800531d 	.word	0x0800531d
 8005288:	080052fd 	.word	0x080052fd
 800528c:	0800531d 	.word	0x0800531d
 8005290:	0800531d 	.word	0x0800531d
 8005294:	0800531d 	.word	0x0800531d
 8005298:	0800531d 	.word	0x0800531d
 800529c:	0800531d 	.word	0x0800531d
 80052a0:	0800531d 	.word	0x0800531d
 80052a4:	0800531d 	.word	0x0800531d
 80052a8:	08005305 	.word	0x08005305
 80052ac:	0800531d 	.word	0x0800531d
 80052b0:	0800531d 	.word	0x0800531d
 80052b4:	0800531d 	.word	0x0800531d
 80052b8:	0800531d 	.word	0x0800531d
 80052bc:	0800531d 	.word	0x0800531d
 80052c0:	0800531d 	.word	0x0800531d
 80052c4:	0800531d 	.word	0x0800531d
 80052c8:	0800530d 	.word	0x0800530d
 80052cc:	0800531d 	.word	0x0800531d
 80052d0:	0800531d 	.word	0x0800531d
 80052d4:	0800531d 	.word	0x0800531d
 80052d8:	0800531d 	.word	0x0800531d
 80052dc:	0800531d 	.word	0x0800531d
 80052e0:	0800531d 	.word	0x0800531d
 80052e4:	0800531d 	.word	0x0800531d
 80052e8:	08005315 	.word	0x08005315
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e0bc      	b.n	800546e <UART_SetConfig+0x5a6>
 80052f4:	2304      	movs	r3, #4
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e0b8      	b.n	800546e <UART_SetConfig+0x5a6>
 80052fc:	2308      	movs	r3, #8
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e0b4      	b.n	800546e <UART_SetConfig+0x5a6>
 8005304:	2310      	movs	r3, #16
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e0b0      	b.n	800546e <UART_SetConfig+0x5a6>
 800530c:	2320      	movs	r3, #32
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e0ac      	b.n	800546e <UART_SetConfig+0x5a6>
 8005314:	2340      	movs	r3, #64	; 0x40
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531a:	e0a8      	b.n	800546e <UART_SetConfig+0x5a6>
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e0a4      	b.n	800546e <UART_SetConfig+0x5a6>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a8f      	ldr	r2, [pc, #572]	; (8005568 <UART_SetConfig+0x6a0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d130      	bne.n	8005390 <UART_SetConfig+0x4c8>
 800532e:	4b8d      	ldr	r3, [pc, #564]	; (8005564 <UART_SetConfig+0x69c>)
 8005330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b05      	cmp	r3, #5
 8005338:	d826      	bhi.n	8005388 <UART_SetConfig+0x4c0>
 800533a:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <UART_SetConfig+0x478>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005359 	.word	0x08005359
 8005344:	08005361 	.word	0x08005361
 8005348:	08005369 	.word	0x08005369
 800534c:	08005371 	.word	0x08005371
 8005350:	08005379 	.word	0x08005379
 8005354:	08005381 	.word	0x08005381
 8005358:	2300      	movs	r3, #0
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e086      	b.n	800546e <UART_SetConfig+0x5a6>
 8005360:	2304      	movs	r3, #4
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005366:	e082      	b.n	800546e <UART_SetConfig+0x5a6>
 8005368:	2308      	movs	r3, #8
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536e:	e07e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005370:	2310      	movs	r3, #16
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005376:	e07a      	b.n	800546e <UART_SetConfig+0x5a6>
 8005378:	2320      	movs	r3, #32
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537e:	e076      	b.n	800546e <UART_SetConfig+0x5a6>
 8005380:	2340      	movs	r3, #64	; 0x40
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005386:	e072      	b.n	800546e <UART_SetConfig+0x5a6>
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538e:	e06e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a75      	ldr	r2, [pc, #468]	; (800556c <UART_SetConfig+0x6a4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d130      	bne.n	80053fc <UART_SetConfig+0x534>
 800539a:	4b72      	ldr	r3, [pc, #456]	; (8005564 <UART_SetConfig+0x69c>)
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	d826      	bhi.n	80053f4 <UART_SetConfig+0x52c>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <UART_SetConfig+0x4e4>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053c5 	.word	0x080053c5
 80053b0:	080053cd 	.word	0x080053cd
 80053b4:	080053d5 	.word	0x080053d5
 80053b8:	080053dd 	.word	0x080053dd
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	080053ed 	.word	0x080053ed
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ca:	e050      	b.n	800546e <UART_SetConfig+0x5a6>
 80053cc:	2304      	movs	r3, #4
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d2:	e04c      	b.n	800546e <UART_SetConfig+0x5a6>
 80053d4:	2308      	movs	r3, #8
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e048      	b.n	800546e <UART_SetConfig+0x5a6>
 80053dc:	2310      	movs	r3, #16
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e044      	b.n	800546e <UART_SetConfig+0x5a6>
 80053e4:	2320      	movs	r3, #32
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ea:	e040      	b.n	800546e <UART_SetConfig+0x5a6>
 80053ec:	2340      	movs	r3, #64	; 0x40
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f2:	e03c      	b.n	800546e <UART_SetConfig+0x5a6>
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fa:	e038      	b.n	800546e <UART_SetConfig+0x5a6>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a5b      	ldr	r2, [pc, #364]	; (8005570 <UART_SetConfig+0x6a8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d130      	bne.n	8005468 <UART_SetConfig+0x5a0>
 8005406:	4b57      	ldr	r3, [pc, #348]	; (8005564 <UART_SetConfig+0x69c>)
 8005408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b05      	cmp	r3, #5
 8005410:	d826      	bhi.n	8005460 <UART_SetConfig+0x598>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <UART_SetConfig+0x550>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005431 	.word	0x08005431
 800541c:	08005439 	.word	0x08005439
 8005420:	08005441 	.word	0x08005441
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	2302      	movs	r3, #2
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e01a      	b.n	800546e <UART_SetConfig+0x5a6>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e016      	b.n	800546e <UART_SetConfig+0x5a6>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e012      	b.n	800546e <UART_SetConfig+0x5a6>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e00e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005450:	2320      	movs	r3, #32
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005456:	e00a      	b.n	800546e <UART_SetConfig+0x5a6>
 8005458:	2340      	movs	r3, #64	; 0x40
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545e:	e006      	b.n	800546e <UART_SetConfig+0x5a6>
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005466:	e002      	b.n	800546e <UART_SetConfig+0x5a6>
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a3f      	ldr	r2, [pc, #252]	; (8005570 <UART_SetConfig+0x6a8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	f040 80f8 	bne.w	800566a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800547a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800547e:	2b20      	cmp	r3, #32
 8005480:	dc46      	bgt.n	8005510 <UART_SetConfig+0x648>
 8005482:	2b02      	cmp	r3, #2
 8005484:	f2c0 8082 	blt.w	800558c <UART_SetConfig+0x6c4>
 8005488:	3b02      	subs	r3, #2
 800548a:	2b1e      	cmp	r3, #30
 800548c:	d87e      	bhi.n	800558c <UART_SetConfig+0x6c4>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0x5cc>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	08005517 	.word	0x08005517
 8005498:	0800558d 	.word	0x0800558d
 800549c:	0800551f 	.word	0x0800551f
 80054a0:	0800558d 	.word	0x0800558d
 80054a4:	0800558d 	.word	0x0800558d
 80054a8:	0800558d 	.word	0x0800558d
 80054ac:	0800552f 	.word	0x0800552f
 80054b0:	0800558d 	.word	0x0800558d
 80054b4:	0800558d 	.word	0x0800558d
 80054b8:	0800558d 	.word	0x0800558d
 80054bc:	0800558d 	.word	0x0800558d
 80054c0:	0800558d 	.word	0x0800558d
 80054c4:	0800558d 	.word	0x0800558d
 80054c8:	0800558d 	.word	0x0800558d
 80054cc:	0800553f 	.word	0x0800553f
 80054d0:	0800558d 	.word	0x0800558d
 80054d4:	0800558d 	.word	0x0800558d
 80054d8:	0800558d 	.word	0x0800558d
 80054dc:	0800558d 	.word	0x0800558d
 80054e0:	0800558d 	.word	0x0800558d
 80054e4:	0800558d 	.word	0x0800558d
 80054e8:	0800558d 	.word	0x0800558d
 80054ec:	0800558d 	.word	0x0800558d
 80054f0:	0800558d 	.word	0x0800558d
 80054f4:	0800558d 	.word	0x0800558d
 80054f8:	0800558d 	.word	0x0800558d
 80054fc:	0800558d 	.word	0x0800558d
 8005500:	0800558d 	.word	0x0800558d
 8005504:	0800558d 	.word	0x0800558d
 8005508:	0800558d 	.word	0x0800558d
 800550c:	0800557f 	.word	0x0800557f
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d037      	beq.n	8005584 <UART_SetConfig+0x6bc>
 8005514:	e03a      	b.n	800558c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005516:	f7fe fefb 	bl	8004310 <HAL_RCCEx_GetD3PCLK1Freq>
 800551a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800551c:	e03c      	b.n	8005598 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800551e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe ff0a 	bl	800433c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800552c:	e034      	b.n	8005598 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800552e:	f107 0318 	add.w	r3, r7, #24
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff f856 	bl	80045e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800553c:	e02c      	b.n	8005598 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <UART_SetConfig+0x69c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <UART_SetConfig+0x69c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	08db      	lsrs	r3, r3, #3
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	4a07      	ldr	r2, [pc, #28]	; (8005574 <UART_SetConfig+0x6ac>)
 8005556:	fa22 f303 	lsr.w	r3, r2, r3
 800555a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800555c:	e01c      	b.n	8005598 <UART_SetConfig+0x6d0>
 800555e:	bf00      	nop
 8005560:	40011400 	.word	0x40011400
 8005564:	58024400 	.word	0x58024400
 8005568:	40007800 	.word	0x40007800
 800556c:	40007c00 	.word	0x40007c00
 8005570:	58000c00 	.word	0x58000c00
 8005574:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005578:	4b9d      	ldr	r3, [pc, #628]	; (80057f0 <UART_SetConfig+0x928>)
 800557a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800557c:	e00c      	b.n	8005598 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800557e:	4b9d      	ldr	r3, [pc, #628]	; (80057f4 <UART_SetConfig+0x92c>)
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005582:	e009      	b.n	8005598 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800558a:	e005      	b.n	8005598 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005596:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 81de 	beq.w	800595c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	4a94      	ldr	r2, [pc, #592]	; (80057f8 <UART_SetConfig+0x930>)
 80055a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055aa:	461a      	mov	r2, r3
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4413      	add	r3, r2
 80055be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d305      	bcc.n	80055d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d903      	bls.n	80055d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055d6:	e1c1      	b.n	800595c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055da:	2200      	movs	r2, #0
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	60fa      	str	r2, [r7, #12]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	4a84      	ldr	r2, [pc, #528]	; (80057f8 <UART_SetConfig+0x930>)
 80055e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2200      	movs	r2, #0
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055fa:	f7fa fec9 	bl	8000390 <__aeabi_uldivmod>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	020b      	lsls	r3, r1, #8
 8005610:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005614:	0202      	lsls	r2, r0, #8
 8005616:	6979      	ldr	r1, [r7, #20]
 8005618:	6849      	ldr	r1, [r1, #4]
 800561a:	0849      	lsrs	r1, r1, #1
 800561c:	2000      	movs	r0, #0
 800561e:	460c      	mov	r4, r1
 8005620:	4605      	mov	r5, r0
 8005622:	eb12 0804 	adds.w	r8, r2, r4
 8005626:	eb43 0905 	adc.w	r9, r3, r5
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	469a      	mov	sl, r3
 8005632:	4693      	mov	fp, r2
 8005634:	4652      	mov	r2, sl
 8005636:	465b      	mov	r3, fp
 8005638:	4640      	mov	r0, r8
 800563a:	4649      	mov	r1, r9
 800563c:	f7fa fea8 	bl	8000390 <__aeabi_uldivmod>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4613      	mov	r3, r2
 8005646:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800564e:	d308      	bcc.n	8005662 <UART_SetConfig+0x79a>
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005656:	d204      	bcs.n	8005662 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e17c      	b.n	800595c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005668:	e178      	b.n	800595c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005672:	f040 80c5 	bne.w	8005800 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005676:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800567a:	2b20      	cmp	r3, #32
 800567c:	dc48      	bgt.n	8005710 <UART_SetConfig+0x848>
 800567e:	2b00      	cmp	r3, #0
 8005680:	db7b      	blt.n	800577a <UART_SetConfig+0x8b2>
 8005682:	2b20      	cmp	r3, #32
 8005684:	d879      	bhi.n	800577a <UART_SetConfig+0x8b2>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <UART_SetConfig+0x7c4>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	08005717 	.word	0x08005717
 8005690:	0800571f 	.word	0x0800571f
 8005694:	0800577b 	.word	0x0800577b
 8005698:	0800577b 	.word	0x0800577b
 800569c:	08005727 	.word	0x08005727
 80056a0:	0800577b 	.word	0x0800577b
 80056a4:	0800577b 	.word	0x0800577b
 80056a8:	0800577b 	.word	0x0800577b
 80056ac:	08005737 	.word	0x08005737
 80056b0:	0800577b 	.word	0x0800577b
 80056b4:	0800577b 	.word	0x0800577b
 80056b8:	0800577b 	.word	0x0800577b
 80056bc:	0800577b 	.word	0x0800577b
 80056c0:	0800577b 	.word	0x0800577b
 80056c4:	0800577b 	.word	0x0800577b
 80056c8:	0800577b 	.word	0x0800577b
 80056cc:	08005747 	.word	0x08005747
 80056d0:	0800577b 	.word	0x0800577b
 80056d4:	0800577b 	.word	0x0800577b
 80056d8:	0800577b 	.word	0x0800577b
 80056dc:	0800577b 	.word	0x0800577b
 80056e0:	0800577b 	.word	0x0800577b
 80056e4:	0800577b 	.word	0x0800577b
 80056e8:	0800577b 	.word	0x0800577b
 80056ec:	0800577b 	.word	0x0800577b
 80056f0:	0800577b 	.word	0x0800577b
 80056f4:	0800577b 	.word	0x0800577b
 80056f8:	0800577b 	.word	0x0800577b
 80056fc:	0800577b 	.word	0x0800577b
 8005700:	0800577b 	.word	0x0800577b
 8005704:	0800577b 	.word	0x0800577b
 8005708:	0800577b 	.word	0x0800577b
 800570c:	0800576d 	.word	0x0800576d
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d02e      	beq.n	8005772 <UART_SetConfig+0x8aa>
 8005714:	e031      	b.n	800577a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005716:	f7fd fe89 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 800571a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800571c:	e033      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800571e:	f7fd fe9b 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8005722:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005724:	e02f      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fe06 	bl	800433c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005734:	e027      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005736:	f107 0318 	add.w	r3, r7, #24
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe ff52 	bl	80045e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005744:	e01f      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005746:	4b2d      	ldr	r3, [pc, #180]	; (80057fc <UART_SetConfig+0x934>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005752:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <UART_SetConfig+0x934>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	08db      	lsrs	r3, r3, #3
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	4a24      	ldr	r2, [pc, #144]	; (80057f0 <UART_SetConfig+0x928>)
 800575e:	fa22 f303 	lsr.w	r3, r2, r3
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005764:	e00f      	b.n	8005786 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005766:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <UART_SetConfig+0x928>)
 8005768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800576a:	e00c      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800576c:	4b21      	ldr	r3, [pc, #132]	; (80057f4 <UART_SetConfig+0x92c>)
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005770:	e009      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005778:	e005      	b.n	8005786 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80e7 	beq.w	800595c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <UART_SetConfig+0x930>)
 8005794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005798:	461a      	mov	r2, r3
 800579a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579c:	fbb3 f3f2 	udiv	r3, r3, r2
 80057a0:	005a      	lsls	r2, r3, #1
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	441a      	add	r2, r3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	2b0f      	cmp	r3, #15
 80057b8:	d916      	bls.n	80057e8 <UART_SetConfig+0x920>
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c0:	d212      	bcs.n	80057e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f023 030f 	bic.w	r3, r3, #15
 80057ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057da:	4313      	orrs	r3, r2
 80057dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	e0b9      	b.n	800595c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80057ee:	e0b5      	b.n	800595c <UART_SetConfig+0xa94>
 80057f0:	03d09000 	.word	0x03d09000
 80057f4:	003d0900 	.word	0x003d0900
 80057f8:	08009094 	.word	0x08009094
 80057fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005800:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005804:	2b20      	cmp	r3, #32
 8005806:	dc49      	bgt.n	800589c <UART_SetConfig+0x9d4>
 8005808:	2b00      	cmp	r3, #0
 800580a:	db7c      	blt.n	8005906 <UART_SetConfig+0xa3e>
 800580c:	2b20      	cmp	r3, #32
 800580e:	d87a      	bhi.n	8005906 <UART_SetConfig+0xa3e>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <UART_SetConfig+0x950>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	080058a3 	.word	0x080058a3
 800581c:	080058ab 	.word	0x080058ab
 8005820:	08005907 	.word	0x08005907
 8005824:	08005907 	.word	0x08005907
 8005828:	080058b3 	.word	0x080058b3
 800582c:	08005907 	.word	0x08005907
 8005830:	08005907 	.word	0x08005907
 8005834:	08005907 	.word	0x08005907
 8005838:	080058c3 	.word	0x080058c3
 800583c:	08005907 	.word	0x08005907
 8005840:	08005907 	.word	0x08005907
 8005844:	08005907 	.word	0x08005907
 8005848:	08005907 	.word	0x08005907
 800584c:	08005907 	.word	0x08005907
 8005850:	08005907 	.word	0x08005907
 8005854:	08005907 	.word	0x08005907
 8005858:	080058d3 	.word	0x080058d3
 800585c:	08005907 	.word	0x08005907
 8005860:	08005907 	.word	0x08005907
 8005864:	08005907 	.word	0x08005907
 8005868:	08005907 	.word	0x08005907
 800586c:	08005907 	.word	0x08005907
 8005870:	08005907 	.word	0x08005907
 8005874:	08005907 	.word	0x08005907
 8005878:	08005907 	.word	0x08005907
 800587c:	08005907 	.word	0x08005907
 8005880:	08005907 	.word	0x08005907
 8005884:	08005907 	.word	0x08005907
 8005888:	08005907 	.word	0x08005907
 800588c:	08005907 	.word	0x08005907
 8005890:	08005907 	.word	0x08005907
 8005894:	08005907 	.word	0x08005907
 8005898:	080058f9 	.word	0x080058f9
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	d02e      	beq.n	80058fe <UART_SetConfig+0xa36>
 80058a0:	e031      	b.n	8005906 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a2:	f7fd fdc3 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 80058a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058a8:	e033      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058aa:	f7fd fdd5 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 80058ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058b0:	e02f      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe fd40 	bl	800433c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058c0:	e027      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c2:	f107 0318 	add.w	r3, r7, #24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fe8c 	bl	80045e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058d0:	e01f      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d2:	4b2d      	ldr	r3, [pc, #180]	; (8005988 <UART_SetConfig+0xac0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058de:	4b2a      	ldr	r3, [pc, #168]	; (8005988 <UART_SetConfig+0xac0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	08db      	lsrs	r3, r3, #3
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	4a28      	ldr	r2, [pc, #160]	; (800598c <UART_SetConfig+0xac4>)
 80058ea:	fa22 f303 	lsr.w	r3, r2, r3
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058f0:	e00f      	b.n	8005912 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80058f2:	4b26      	ldr	r3, [pc, #152]	; (800598c <UART_SetConfig+0xac4>)
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058f6:	e00c      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058f8:	4b25      	ldr	r3, [pc, #148]	; (8005990 <UART_SetConfig+0xac8>)
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058fc:	e009      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005904:	e005      	b.n	8005912 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005910:	bf00      	nop
    }

    if (pclk != 0U)
 8005912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d021      	beq.n	800595c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <UART_SetConfig+0xacc>)
 800591e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005922:	461a      	mov	r2, r3
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005926:	fbb3 f2f2 	udiv	r2, r3, r2
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	441a      	add	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	2b0f      	cmp	r3, #15
 8005940:	d909      	bls.n	8005956 <UART_SetConfig+0xa8e>
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005948:	d205      	bcs.n	8005956 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	b29a      	uxth	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60da      	str	r2, [r3, #12]
 8005954:	e002      	b.n	800595c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2201      	movs	r2, #1
 8005960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2201      	movs	r2, #1
 8005968:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2200      	movs	r2, #0
 8005970:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005978:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800597c:	4618      	mov	r0, r3
 800597e:	3748      	adds	r7, #72	; 0x48
 8005980:	46bd      	mov	sp, r7
 8005982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400
 800598c:	03d09000 	.word	0x03d09000
 8005990:	003d0900 	.word	0x003d0900
 8005994:	08009094 	.word	0x08009094

08005998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01a      	beq.n	8005aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a96:	d10a      	bne.n	8005aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aec:	f7fb fc5c 	bl	80013a8 <HAL_GetTick>
 8005af0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d10e      	bne.n	8005b1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f82f 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e025      	b.n	8005b6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d10e      	bne.n	8005b4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f819 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e00f      	b.n	8005b6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b09c      	sub	sp, #112	; 0x70
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	603b      	str	r3, [r7, #0]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b82:	e0a9      	b.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	f000 80a5 	beq.w	8005cd8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8e:	f7fb fc0b 	bl	80013a8 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d302      	bcc.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d140      	bne.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bb8:	667b      	str	r3, [r7, #100]	; 0x64
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bc4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e6      	bne.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3308      	adds	r3, #8
 8005bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	663b      	str	r3, [r7, #96]	; 0x60
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bf6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e5      	bne.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e069      	b.n	8005cfa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d051      	beq.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c42:	d149      	bne.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e6      	bne.n	8005c4e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3308      	adds	r3, #8
 8005c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ca0:	623a      	str	r2, [r7, #32]
 8005ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	69f9      	ldr	r1, [r7, #28]
 8005ca6:	6a3a      	ldr	r2, [r7, #32]
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e5      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e010      	b.n	8005cfa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69da      	ldr	r2, [r3, #28]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	bf0c      	ite	eq
 8005ce8:	2301      	moveq	r3, #1
 8005cea:	2300      	movne	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	f43f af46 	beq.w	8005b84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3770      	adds	r7, #112	; 0x70
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e027      	b.n	8005d68 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2224      	movs	r2, #36	; 0x24
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e02d      	b.n	8005de8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2224      	movs	r2, #36	; 0x24
 8005d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f84f 	bl	8005e6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e02d      	b.n	8005e64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2224      	movs	r2, #36	; 0x24
 8005e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0201 	bic.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f811 	bl	8005e6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d108      	bne.n	8005e8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e8c:	e031      	b.n	8005ef2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e8e:	2310      	movs	r3, #16
 8005e90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e92:	2310      	movs	r3, #16
 8005e94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	0e5b      	lsrs	r3, r3, #25
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	0f5b      	lsrs	r3, r3, #29
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eb6:	7bbb      	ldrb	r3, [r7, #14]
 8005eb8:	7b3a      	ldrb	r2, [r7, #12]
 8005eba:	4911      	ldr	r1, [pc, #68]	; (8005f00 <UARTEx_SetNbDataToProcess+0x94>)
 8005ebc:	5c8a      	ldrb	r2, [r1, r2]
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ec2:	7b3a      	ldrb	r2, [r7, #12]
 8005ec4:	490f      	ldr	r1, [pc, #60]	; (8005f04 <UARTEx_SetNbDataToProcess+0x98>)
 8005ec6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ec8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	7b7a      	ldrb	r2, [r7, #13]
 8005ed8:	4909      	ldr	r1, [pc, #36]	; (8005f00 <UARTEx_SetNbDataToProcess+0x94>)
 8005eda:	5c8a      	ldrb	r2, [r1, r2]
 8005edc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ee0:	7b7a      	ldrb	r2, [r7, #13]
 8005ee2:	4908      	ldr	r1, [pc, #32]	; (8005f04 <UARTEx_SetNbDataToProcess+0x98>)
 8005ee4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ee6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ef2:	bf00      	nop
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	080090ac 	.word	0x080090ac
 8005f04:	080090b4 	.word	0x080090b4

08005f08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f08:	b084      	sub	sp, #16
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	f107 001c 	add.w	r0, r7, #28
 8005f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d120      	bne.n	8005f62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	4b2a      	ldr	r3, [pc, #168]	; (8005fdc <USB_CoreInit+0xd4>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d105      	bne.n	8005f56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 faac 	bl	80064b4 <USB_CoreReset>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
 8005f60:	e01a      	b.n	8005f98 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 faa0 	bl	80064b4 <USB_CoreReset>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
 8005f8a:	e005      	b.n	8005f98 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d116      	bne.n	8005fcc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fac:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <USB_CoreInit+0xd8>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f043 0206 	orr.w	r2, r3, #6
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f043 0220 	orr.w	r2, r3, #32
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fd8:	b004      	add	sp, #16
 8005fda:	4770      	bx	lr
 8005fdc:	ffbdffbf 	.word	0xffbdffbf
 8005fe0:	03ee0000 	.word	0x03ee0000

08005fe4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f023 0201 	bic.w	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d115      	bne.n	8006054 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006034:	2001      	movs	r0, #1
 8006036:	f7fb f9c3 	bl	80013c0 <HAL_Delay>
      ms++;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3301      	adds	r3, #1
 800603e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fa29 	bl	8006498 <USB_GetMode>
 8006046:	4603      	mov	r3, r0
 8006048:	2b01      	cmp	r3, #1
 800604a:	d01e      	beq.n	800608a <USB_SetCurrentMode+0x84>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b31      	cmp	r3, #49	; 0x31
 8006050:	d9f0      	bls.n	8006034 <USB_SetCurrentMode+0x2e>
 8006052:	e01a      	b.n	800608a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d115      	bne.n	8006086 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006066:	2001      	movs	r0, #1
 8006068:	f7fb f9aa 	bl	80013c0 <HAL_Delay>
      ms++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fa10 	bl	8006498 <USB_GetMode>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <USB_SetCurrentMode+0x84>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b31      	cmp	r3, #49	; 0x31
 8006082:	d9f0      	bls.n	8006066 <USB_SetCurrentMode+0x60>
 8006084:	e001      	b.n	800608a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e005      	b.n	8006096 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b32      	cmp	r3, #50	; 0x32
 800608e:	d101      	bne.n	8006094 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060a0:	b084      	sub	sp, #16
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	e009      	b.n	80060d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	3340      	adds	r3, #64	; 0x40
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	2200      	movs	r2, #0
 80060cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	3301      	adds	r3, #1
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2b0e      	cmp	r3, #14
 80060d8:	d9f2      	bls.n	80060c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d11c      	bne.n	800611a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ee:	f043 0302 	orr.w	r3, r3, #2
 80060f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	e005      	b.n	8006126 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800612c:	461a      	mov	r2, r3
 800612e:	2300      	movs	r3, #0
 8006130:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	4619      	mov	r1, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006140:	461a      	mov	r2, r3
 8006142:	680b      	ldr	r3, [r1, #0]
 8006144:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	2b01      	cmp	r3, #1
 800614a:	d10c      	bne.n	8006166 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d104      	bne.n	800615c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006152:	2100      	movs	r1, #0
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f965 	bl	8006424 <USB_SetDevSpeed>
 800615a:	e008      	b.n	800616e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800615c:	2101      	movs	r1, #1
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f960 	bl	8006424 <USB_SetDevSpeed>
 8006164:	e003      	b.n	800616e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006166:	2103      	movs	r1, #3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f95b 	bl	8006424 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800616e:	2110      	movs	r1, #16
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8f3 	bl	800635c <USB_FlushTxFifo>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f91f 	bl	80063c4 <USB_FlushRxFifo>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006196:	461a      	mov	r2, r3
 8006198:	2300      	movs	r3, #0
 800619a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a2:	461a      	mov	r2, r3
 80061a4:	2300      	movs	r3, #0
 80061a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ae:	461a      	mov	r2, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061b4:	2300      	movs	r3, #0
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	e043      	b.n	8006242 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d0:	d118      	bne.n	8006204 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e4:	461a      	mov	r2, r3
 80061e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	e013      	b.n	8006216 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fa:	461a      	mov	r2, r3
 80061fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	e008      	b.n	8006216 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	461a      	mov	r2, r3
 8006212:	2300      	movs	r3, #0
 8006214:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006222:	461a      	mov	r2, r3
 8006224:	2300      	movs	r3, #0
 8006226:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	461a      	mov	r2, r3
 8006236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800623a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	3301      	adds	r3, #1
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	429a      	cmp	r2, r3
 8006248:	d3b7      	bcc.n	80061ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	e043      	b.n	80062d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006266:	d118      	bne.n	800629a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	461a      	mov	r2, r3
 800627c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e013      	b.n	80062ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	461a      	mov	r2, r3
 8006292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	e008      	b.n	80062ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	461a      	mov	r2, r3
 80062a8:	2300      	movs	r3, #0
 80062aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b8:	461a      	mov	r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ca:	461a      	mov	r2, r3
 80062cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	3301      	adds	r3, #1
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d3b7      	bcc.n	8006250 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006300:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	2b00      	cmp	r3, #0
 8006306:	d105      	bne.n	8006314 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f043 0210 	orr.w	r2, r3, #16
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <USB_DevInit+0x2b4>)
 800631a:	4313      	orrs	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d005      	beq.n	8006332 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f043 0208 	orr.w	r2, r3, #8
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d105      	bne.n	8006344 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699a      	ldr	r2, [r3, #24]
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <USB_DevInit+0x2b8>)
 800633e:	4313      	orrs	r3, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006344:	7dfb      	ldrb	r3, [r7, #23]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006350:	b004      	add	sp, #16
 8006352:	4770      	bx	lr
 8006354:	803c3800 	.word	0x803c3800
 8006358:	40000004 	.word	0x40000004

0800635c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3301      	adds	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <USB_FlushTxFifo+0x64>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d901      	bls.n	800637c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e01b      	b.n	80063b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	daf2      	bge.n	800636a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	019b      	lsls	r3, r3, #6
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3301      	adds	r3, #1
 8006398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a08      	ldr	r2, [pc, #32]	; (80063c0 <USB_FlushTxFifo+0x64>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d901      	bls.n	80063a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e006      	b.n	80063b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d0f0      	beq.n	8006394 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	00030d40 	.word	0x00030d40

080063c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a11      	ldr	r2, [pc, #68]	; (8006420 <USB_FlushRxFifo+0x5c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d901      	bls.n	80063e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e018      	b.n	8006414 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	daf2      	bge.n	80063d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2210      	movs	r2, #16
 80063f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3301      	adds	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a08      	ldr	r2, [pc, #32]	; (8006420 <USB_FlushRxFifo+0x5c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e006      	b.n	8006414 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	2b10      	cmp	r3, #16
 8006410:	d0f0      	beq.n	80063f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	00030d40 	.word	0x00030d40

08006424 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	68f9      	ldr	r1, [r7, #12]
 8006440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006444:	4313      	orrs	r3, r2
 8006446:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006470:	f023 0303 	bic.w	r3, r3, #3
 8006474:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006484:	f043 0302 	orr.w	r3, r3, #2
 8006488:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	f003 0301 	and.w	r3, r3, #1
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3301      	adds	r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a13      	ldr	r2, [pc, #76]	; (8006518 <USB_CoreReset+0x64>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d901      	bls.n	80064d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e01b      	b.n	800650a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	daf2      	bge.n	80064c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f043 0201 	orr.w	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3301      	adds	r3, #1
 80064ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4a09      	ldr	r2, [pc, #36]	; (8006518 <USB_CoreReset+0x64>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d901      	bls.n	80064fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e006      	b.n	800650a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b01      	cmp	r3, #1
 8006506:	d0f0      	beq.n	80064ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	00030d40 	.word	0x00030d40

0800651c <arm_dot_prod_f32>:
 800651c:	b4f0      	push	{r4, r5, r6, r7}
 800651e:	0897      	lsrs	r7, r2, #2
 8006520:	d052      	beq.n	80065c8 <arm_dot_prod_f32+0xac>
 8006522:	f100 0510 	add.w	r5, r0, #16
 8006526:	f101 0410 	add.w	r4, r1, #16
 800652a:	463e      	mov	r6, r7
 800652c:	eddf 7a28 	vldr	s15, [pc, #160]	; 80065d0 <arm_dot_prod_f32+0xb4>
 8006530:	ed14 7a04 	vldr	s14, [r4, #-16]
 8006534:	3e01      	subs	r6, #1
 8006536:	ed15 6a04 	vldr	s12, [r5, #-16]
 800653a:	f104 0410 	add.w	r4, r4, #16
 800653e:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 8006542:	f105 0510 	add.w	r5, r5, #16
 8006546:	ee26 6a07 	vmul.f32	s12, s12, s14
 800654a:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 800654e:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8006552:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006556:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 800655a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800655e:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8006562:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006566:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 800656a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800656e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006572:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006576:	ee77 7a87 	vadd.f32	s15, s15, s14
 800657a:	d1d9      	bne.n	8006530 <arm_dot_prod_f32+0x14>
 800657c:	013f      	lsls	r7, r7, #4
 800657e:	4438      	add	r0, r7
 8006580:	4439      	add	r1, r7
 8006582:	f012 0203 	ands.w	r2, r2, #3
 8006586:	d01b      	beq.n	80065c0 <arm_dot_prod_f32+0xa4>
 8006588:	ed91 7a00 	vldr	s14, [r1]
 800658c:	3a01      	subs	r2, #1
 800658e:	edd0 6a00 	vldr	s13, [r0]
 8006592:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006596:	ee77 7a87 	vadd.f32	s15, s15, s14
 800659a:	d011      	beq.n	80065c0 <arm_dot_prod_f32+0xa4>
 800659c:	ed91 7a01 	vldr	s14, [r1, #4]
 80065a0:	2a01      	cmp	r2, #1
 80065a2:	edd0 6a01 	vldr	s13, [r0, #4]
 80065a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80065aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065ae:	d007      	beq.n	80065c0 <arm_dot_prod_f32+0xa4>
 80065b0:	ed90 7a02 	vldr	s14, [r0, #8]
 80065b4:	edd1 6a02 	vldr	s13, [r1, #8]
 80065b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80065bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065c0:	edc3 7a00 	vstr	s15, [r3]
 80065c4:	bcf0      	pop	{r4, r5, r6, r7}
 80065c6:	4770      	bx	lr
 80065c8:	eddf 7a01 	vldr	s15, [pc, #4]	; 80065d0 <arm_dot_prod_f32+0xb4>
 80065cc:	e7d9      	b.n	8006582 <arm_dot_prod_f32+0x66>
 80065ce:	bf00      	nop
 80065d0:	00000000 	.word	0x00000000

080065d4 <__errno>:
 80065d4:	4b01      	ldr	r3, [pc, #4]	; (80065dc <__errno+0x8>)
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	24000010 	.word	0x24000010

080065e0 <__libc_init_array>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	4d0d      	ldr	r5, [pc, #52]	; (8006618 <__libc_init_array+0x38>)
 80065e4:	4c0d      	ldr	r4, [pc, #52]	; (800661c <__libc_init_array+0x3c>)
 80065e6:	1b64      	subs	r4, r4, r5
 80065e8:	10a4      	asrs	r4, r4, #2
 80065ea:	2600      	movs	r6, #0
 80065ec:	42a6      	cmp	r6, r4
 80065ee:	d109      	bne.n	8006604 <__libc_init_array+0x24>
 80065f0:	4d0b      	ldr	r5, [pc, #44]	; (8006620 <__libc_init_array+0x40>)
 80065f2:	4c0c      	ldr	r4, [pc, #48]	; (8006624 <__libc_init_array+0x44>)
 80065f4:	f002 fd1a 	bl	800902c <_init>
 80065f8:	1b64      	subs	r4, r4, r5
 80065fa:	10a4      	asrs	r4, r4, #2
 80065fc:	2600      	movs	r6, #0
 80065fe:	42a6      	cmp	r6, r4
 8006600:	d105      	bne.n	800660e <__libc_init_array+0x2e>
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	f855 3b04 	ldr.w	r3, [r5], #4
 8006608:	4798      	blx	r3
 800660a:	3601      	adds	r6, #1
 800660c:	e7ee      	b.n	80065ec <__libc_init_array+0xc>
 800660e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006612:	4798      	blx	r3
 8006614:	3601      	adds	r6, #1
 8006616:	e7f2      	b.n	80065fe <__libc_init_array+0x1e>
 8006618:	0800949c 	.word	0x0800949c
 800661c:	0800949c 	.word	0x0800949c
 8006620:	0800949c 	.word	0x0800949c
 8006624:	080094a0 	.word	0x080094a0

08006628 <memset>:
 8006628:	4402      	add	r2, r0
 800662a:	4603      	mov	r3, r0
 800662c:	4293      	cmp	r3, r2
 800662e:	d100      	bne.n	8006632 <memset+0xa>
 8006630:	4770      	bx	lr
 8006632:	f803 1b01 	strb.w	r1, [r3], #1
 8006636:	e7f9      	b.n	800662c <memset+0x4>

08006638 <__cvt>:
 8006638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800663a:	ed2d 8b02 	vpush	{d8}
 800663e:	eeb0 8b40 	vmov.f64	d8, d0
 8006642:	b085      	sub	sp, #20
 8006644:	4617      	mov	r7, r2
 8006646:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006648:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800664a:	ee18 2a90 	vmov	r2, s17
 800664e:	f025 0520 	bic.w	r5, r5, #32
 8006652:	2a00      	cmp	r2, #0
 8006654:	bfb6      	itet	lt
 8006656:	222d      	movlt	r2, #45	; 0x2d
 8006658:	2200      	movge	r2, #0
 800665a:	eeb1 8b40 	vneglt.f64	d8, d0
 800665e:	2d46      	cmp	r5, #70	; 0x46
 8006660:	460c      	mov	r4, r1
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	d004      	beq.n	8006670 <__cvt+0x38>
 8006666:	2d45      	cmp	r5, #69	; 0x45
 8006668:	d100      	bne.n	800666c <__cvt+0x34>
 800666a:	3401      	adds	r4, #1
 800666c:	2102      	movs	r1, #2
 800666e:	e000      	b.n	8006672 <__cvt+0x3a>
 8006670:	2103      	movs	r1, #3
 8006672:	ab03      	add	r3, sp, #12
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	ab02      	add	r3, sp, #8
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	4622      	mov	r2, r4
 800667c:	4633      	mov	r3, r6
 800667e:	eeb0 0b48 	vmov.f64	d0, d8
 8006682:	f000 fdf5 	bl	8007270 <_dtoa_r>
 8006686:	2d47      	cmp	r5, #71	; 0x47
 8006688:	d101      	bne.n	800668e <__cvt+0x56>
 800668a:	07fb      	lsls	r3, r7, #31
 800668c:	d51a      	bpl.n	80066c4 <__cvt+0x8c>
 800668e:	2d46      	cmp	r5, #70	; 0x46
 8006690:	eb00 0204 	add.w	r2, r0, r4
 8006694:	d10c      	bne.n	80066b0 <__cvt+0x78>
 8006696:	7803      	ldrb	r3, [r0, #0]
 8006698:	2b30      	cmp	r3, #48	; 0x30
 800669a:	d107      	bne.n	80066ac <__cvt+0x74>
 800669c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80066a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a4:	bf1c      	itt	ne
 80066a6:	f1c4 0401 	rsbne	r4, r4, #1
 80066aa:	6034      	strne	r4, [r6, #0]
 80066ac:	6833      	ldr	r3, [r6, #0]
 80066ae:	441a      	add	r2, r3
 80066b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80066b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b8:	bf08      	it	eq
 80066ba:	9203      	streq	r2, [sp, #12]
 80066bc:	2130      	movs	r1, #48	; 0x30
 80066be:	9b03      	ldr	r3, [sp, #12]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d307      	bcc.n	80066d4 <__cvt+0x9c>
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066c8:	1a1b      	subs	r3, r3, r0
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	b005      	add	sp, #20
 80066ce:	ecbd 8b02 	vpop	{d8}
 80066d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d4:	1c5c      	adds	r4, r3, #1
 80066d6:	9403      	str	r4, [sp, #12]
 80066d8:	7019      	strb	r1, [r3, #0]
 80066da:	e7f0      	b.n	80066be <__cvt+0x86>

080066dc <__exponent>:
 80066dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066de:	4603      	mov	r3, r0
 80066e0:	2900      	cmp	r1, #0
 80066e2:	bfb8      	it	lt
 80066e4:	4249      	neglt	r1, r1
 80066e6:	f803 2b02 	strb.w	r2, [r3], #2
 80066ea:	bfb4      	ite	lt
 80066ec:	222d      	movlt	r2, #45	; 0x2d
 80066ee:	222b      	movge	r2, #43	; 0x2b
 80066f0:	2909      	cmp	r1, #9
 80066f2:	7042      	strb	r2, [r0, #1]
 80066f4:	dd2a      	ble.n	800674c <__exponent+0x70>
 80066f6:	f10d 0407 	add.w	r4, sp, #7
 80066fa:	46a4      	mov	ip, r4
 80066fc:	270a      	movs	r7, #10
 80066fe:	46a6      	mov	lr, r4
 8006700:	460a      	mov	r2, r1
 8006702:	fb91 f6f7 	sdiv	r6, r1, r7
 8006706:	fb07 1516 	mls	r5, r7, r6, r1
 800670a:	3530      	adds	r5, #48	; 0x30
 800670c:	2a63      	cmp	r2, #99	; 0x63
 800670e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006712:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006716:	4631      	mov	r1, r6
 8006718:	dcf1      	bgt.n	80066fe <__exponent+0x22>
 800671a:	3130      	adds	r1, #48	; 0x30
 800671c:	f1ae 0502 	sub.w	r5, lr, #2
 8006720:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006724:	1c44      	adds	r4, r0, #1
 8006726:	4629      	mov	r1, r5
 8006728:	4561      	cmp	r1, ip
 800672a:	d30a      	bcc.n	8006742 <__exponent+0x66>
 800672c:	f10d 0209 	add.w	r2, sp, #9
 8006730:	eba2 020e 	sub.w	r2, r2, lr
 8006734:	4565      	cmp	r5, ip
 8006736:	bf88      	it	hi
 8006738:	2200      	movhi	r2, #0
 800673a:	4413      	add	r3, r2
 800673c:	1a18      	subs	r0, r3, r0
 800673e:	b003      	add	sp, #12
 8006740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006746:	f804 2f01 	strb.w	r2, [r4, #1]!
 800674a:	e7ed      	b.n	8006728 <__exponent+0x4c>
 800674c:	2330      	movs	r3, #48	; 0x30
 800674e:	3130      	adds	r1, #48	; 0x30
 8006750:	7083      	strb	r3, [r0, #2]
 8006752:	70c1      	strb	r1, [r0, #3]
 8006754:	1d03      	adds	r3, r0, #4
 8006756:	e7f1      	b.n	800673c <__exponent+0x60>

08006758 <_printf_float>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	b08b      	sub	sp, #44	; 0x2c
 800675e:	460c      	mov	r4, r1
 8006760:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006764:	4616      	mov	r6, r2
 8006766:	461f      	mov	r7, r3
 8006768:	4605      	mov	r5, r0
 800676a:	f001 fca7 	bl	80080bc <_localeconv_r>
 800676e:	f8d0 b000 	ldr.w	fp, [r0]
 8006772:	4658      	mov	r0, fp
 8006774:	f7f9 fdb4 	bl	80002e0 <strlen>
 8006778:	2300      	movs	r3, #0
 800677a:	9308      	str	r3, [sp, #32]
 800677c:	f8d8 3000 	ldr.w	r3, [r8]
 8006780:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006784:	6822      	ldr	r2, [r4, #0]
 8006786:	3307      	adds	r3, #7
 8006788:	f023 0307 	bic.w	r3, r3, #7
 800678c:	f103 0108 	add.w	r1, r3, #8
 8006790:	f8c8 1000 	str.w	r1, [r8]
 8006794:	4682      	mov	sl, r0
 8006796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800679a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800679e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006a00 <_printf_float+0x2a8>
 80067a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80067a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80067aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80067ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b2:	dd24      	ble.n	80067fe <_printf_float+0xa6>
 80067b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80067b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067bc:	d502      	bpl.n	80067c4 <_printf_float+0x6c>
 80067be:	232d      	movs	r3, #45	; 0x2d
 80067c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c4:	4b90      	ldr	r3, [pc, #576]	; (8006a08 <_printf_float+0x2b0>)
 80067c6:	4891      	ldr	r0, [pc, #580]	; (8006a0c <_printf_float+0x2b4>)
 80067c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80067cc:	bf94      	ite	ls
 80067ce:	4698      	movls	r8, r3
 80067d0:	4680      	movhi	r8, r0
 80067d2:	2303      	movs	r3, #3
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	f022 0204 	bic.w	r2, r2, #4
 80067da:	2300      	movs	r3, #0
 80067dc:	6022      	str	r2, [r4, #0]
 80067de:	9304      	str	r3, [sp, #16]
 80067e0:	9700      	str	r7, [sp, #0]
 80067e2:	4633      	mov	r3, r6
 80067e4:	aa09      	add	r2, sp, #36	; 0x24
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 f9d3 	bl	8006b94 <_printf_common>
 80067ee:	3001      	adds	r0, #1
 80067f0:	f040 808a 	bne.w	8006908 <_printf_float+0x1b0>
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295
 80067f8:	b00b      	add	sp, #44	; 0x2c
 80067fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8006802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006806:	d709      	bvc.n	800681c <_printf_float+0xc4>
 8006808:	ee10 3a90 	vmov	r3, s1
 800680c:	2b00      	cmp	r3, #0
 800680e:	bfbc      	itt	lt
 8006810:	232d      	movlt	r3, #45	; 0x2d
 8006812:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006816:	487e      	ldr	r0, [pc, #504]	; (8006a10 <_printf_float+0x2b8>)
 8006818:	4b7e      	ldr	r3, [pc, #504]	; (8006a14 <_printf_float+0x2bc>)
 800681a:	e7d5      	b.n	80067c8 <_printf_float+0x70>
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006822:	9104      	str	r1, [sp, #16]
 8006824:	1c59      	adds	r1, r3, #1
 8006826:	d13c      	bne.n	80068a2 <_printf_float+0x14a>
 8006828:	2306      	movs	r3, #6
 800682a:	6063      	str	r3, [r4, #4]
 800682c:	2300      	movs	r3, #0
 800682e:	9303      	str	r3, [sp, #12]
 8006830:	ab08      	add	r3, sp, #32
 8006832:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006836:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800683a:	ab07      	add	r3, sp, #28
 800683c:	6861      	ldr	r1, [r4, #4]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	6022      	str	r2, [r4, #0]
 8006842:	f10d 031b 	add.w	r3, sp, #27
 8006846:	4628      	mov	r0, r5
 8006848:	f7ff fef6 	bl	8006638 <__cvt>
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	9907      	ldr	r1, [sp, #28]
 8006850:	2b47      	cmp	r3, #71	; 0x47
 8006852:	4680      	mov	r8, r0
 8006854:	d108      	bne.n	8006868 <_printf_float+0x110>
 8006856:	1cc8      	adds	r0, r1, #3
 8006858:	db02      	blt.n	8006860 <_printf_float+0x108>
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	4299      	cmp	r1, r3
 800685e:	dd41      	ble.n	80068e4 <_printf_float+0x18c>
 8006860:	f1a9 0902 	sub.w	r9, r9, #2
 8006864:	fa5f f989 	uxtb.w	r9, r9
 8006868:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800686c:	d820      	bhi.n	80068b0 <_printf_float+0x158>
 800686e:	3901      	subs	r1, #1
 8006870:	464a      	mov	r2, r9
 8006872:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006876:	9107      	str	r1, [sp, #28]
 8006878:	f7ff ff30 	bl	80066dc <__exponent>
 800687c:	9a08      	ldr	r2, [sp, #32]
 800687e:	9004      	str	r0, [sp, #16]
 8006880:	1813      	adds	r3, r2, r0
 8006882:	2a01      	cmp	r2, #1
 8006884:	6123      	str	r3, [r4, #16]
 8006886:	dc02      	bgt.n	800688e <_printf_float+0x136>
 8006888:	6822      	ldr	r2, [r4, #0]
 800688a:	07d2      	lsls	r2, r2, #31
 800688c:	d501      	bpl.n	8006892 <_printf_float+0x13a>
 800688e:	3301      	adds	r3, #1
 8006890:	6123      	str	r3, [r4, #16]
 8006892:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0a2      	beq.n	80067e0 <_printf_float+0x88>
 800689a:	232d      	movs	r3, #45	; 0x2d
 800689c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a0:	e79e      	b.n	80067e0 <_printf_float+0x88>
 80068a2:	9904      	ldr	r1, [sp, #16]
 80068a4:	2947      	cmp	r1, #71	; 0x47
 80068a6:	d1c1      	bne.n	800682c <_printf_float+0xd4>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1bf      	bne.n	800682c <_printf_float+0xd4>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e7bc      	b.n	800682a <_printf_float+0xd2>
 80068b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80068b4:	d118      	bne.n	80068e8 <_printf_float+0x190>
 80068b6:	2900      	cmp	r1, #0
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	dd0b      	ble.n	80068d4 <_printf_float+0x17c>
 80068bc:	6121      	str	r1, [r4, #16]
 80068be:	b913      	cbnz	r3, 80068c6 <_printf_float+0x16e>
 80068c0:	6822      	ldr	r2, [r4, #0]
 80068c2:	07d0      	lsls	r0, r2, #31
 80068c4:	d502      	bpl.n	80068cc <_printf_float+0x174>
 80068c6:	3301      	adds	r3, #1
 80068c8:	440b      	add	r3, r1
 80068ca:	6123      	str	r3, [r4, #16]
 80068cc:	2300      	movs	r3, #0
 80068ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80068d0:	9304      	str	r3, [sp, #16]
 80068d2:	e7de      	b.n	8006892 <_printf_float+0x13a>
 80068d4:	b913      	cbnz	r3, 80068dc <_printf_float+0x184>
 80068d6:	6822      	ldr	r2, [r4, #0]
 80068d8:	07d2      	lsls	r2, r2, #31
 80068da:	d501      	bpl.n	80068e0 <_printf_float+0x188>
 80068dc:	3302      	adds	r3, #2
 80068de:	e7f4      	b.n	80068ca <_printf_float+0x172>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e7f2      	b.n	80068ca <_printf_float+0x172>
 80068e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80068e8:	9b08      	ldr	r3, [sp, #32]
 80068ea:	4299      	cmp	r1, r3
 80068ec:	db05      	blt.n	80068fa <_printf_float+0x1a2>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	6121      	str	r1, [r4, #16]
 80068f2:	07d8      	lsls	r0, r3, #31
 80068f4:	d5ea      	bpl.n	80068cc <_printf_float+0x174>
 80068f6:	1c4b      	adds	r3, r1, #1
 80068f8:	e7e7      	b.n	80068ca <_printf_float+0x172>
 80068fa:	2900      	cmp	r1, #0
 80068fc:	bfd4      	ite	le
 80068fe:	f1c1 0202 	rsble	r2, r1, #2
 8006902:	2201      	movgt	r2, #1
 8006904:	4413      	add	r3, r2
 8006906:	e7e0      	b.n	80068ca <_printf_float+0x172>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	055a      	lsls	r2, r3, #21
 800690c:	d407      	bmi.n	800691e <_printf_float+0x1c6>
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	4642      	mov	r2, r8
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	d12a      	bne.n	8006972 <_printf_float+0x21a>
 800691c:	e76a      	b.n	80067f4 <_printf_float+0x9c>
 800691e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006922:	f240 80e2 	bls.w	8006aea <_printf_float+0x392>
 8006926:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800692a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800692e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006932:	d133      	bne.n	800699c <_printf_float+0x244>
 8006934:	4a38      	ldr	r2, [pc, #224]	; (8006a18 <_printf_float+0x2c0>)
 8006936:	2301      	movs	r3, #1
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	f43f af58 	beq.w	80067f4 <_printf_float+0x9c>
 8006944:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006948:	429a      	cmp	r2, r3
 800694a:	db02      	blt.n	8006952 <_printf_float+0x1fa>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	07d8      	lsls	r0, r3, #31
 8006950:	d50f      	bpl.n	8006972 <_printf_float+0x21a>
 8006952:	4653      	mov	r3, sl
 8006954:	465a      	mov	r2, fp
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f af49 	beq.w	80067f4 <_printf_float+0x9c>
 8006962:	f04f 0800 	mov.w	r8, #0
 8006966:	f104 091a 	add.w	r9, r4, #26
 800696a:	9b08      	ldr	r3, [sp, #32]
 800696c:	3b01      	subs	r3, #1
 800696e:	4543      	cmp	r3, r8
 8006970:	dc09      	bgt.n	8006986 <_printf_float+0x22e>
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	079b      	lsls	r3, r3, #30
 8006976:	f100 8108 	bmi.w	8006b8a <_printf_float+0x432>
 800697a:	68e0      	ldr	r0, [r4, #12]
 800697c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697e:	4298      	cmp	r0, r3
 8006980:	bfb8      	it	lt
 8006982:	4618      	movlt	r0, r3
 8006984:	e738      	b.n	80067f8 <_printf_float+0xa0>
 8006986:	2301      	movs	r3, #1
 8006988:	464a      	mov	r2, r9
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f af2f 	beq.w	80067f4 <_printf_float+0x9c>
 8006996:	f108 0801 	add.w	r8, r8, #1
 800699a:	e7e6      	b.n	800696a <_printf_float+0x212>
 800699c:	9b07      	ldr	r3, [sp, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	dc3c      	bgt.n	8006a1c <_printf_float+0x2c4>
 80069a2:	4a1d      	ldr	r2, [pc, #116]	; (8006a18 <_printf_float+0x2c0>)
 80069a4:	2301      	movs	r3, #1
 80069a6:	4631      	mov	r1, r6
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b8      	blx	r7
 80069ac:	3001      	adds	r0, #1
 80069ae:	f43f af21 	beq.w	80067f4 <_printf_float+0x9c>
 80069b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	d102      	bne.n	80069c0 <_printf_float+0x268>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	07d9      	lsls	r1, r3, #31
 80069be:	d5d8      	bpl.n	8006972 <_printf_float+0x21a>
 80069c0:	4653      	mov	r3, sl
 80069c2:	465a      	mov	r2, fp
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f af12 	beq.w	80067f4 <_printf_float+0x9c>
 80069d0:	f04f 0900 	mov.w	r9, #0
 80069d4:	f104 0a1a 	add.w	sl, r4, #26
 80069d8:	9b07      	ldr	r3, [sp, #28]
 80069da:	425b      	negs	r3, r3
 80069dc:	454b      	cmp	r3, r9
 80069de:	dc01      	bgt.n	80069e4 <_printf_float+0x28c>
 80069e0:	9b08      	ldr	r3, [sp, #32]
 80069e2:	e795      	b.n	8006910 <_printf_float+0x1b8>
 80069e4:	2301      	movs	r3, #1
 80069e6:	4652      	mov	r2, sl
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b8      	blx	r7
 80069ee:	3001      	adds	r0, #1
 80069f0:	f43f af00 	beq.w	80067f4 <_printf_float+0x9c>
 80069f4:	f109 0901 	add.w	r9, r9, #1
 80069f8:	e7ee      	b.n	80069d8 <_printf_float+0x280>
 80069fa:	bf00      	nop
 80069fc:	f3af 8000 	nop.w
 8006a00:	ffffffff 	.word	0xffffffff
 8006a04:	7fefffff 	.word	0x7fefffff
 8006a08:	080090c0 	.word	0x080090c0
 8006a0c:	080090c4 	.word	0x080090c4
 8006a10:	080090cc 	.word	0x080090cc
 8006a14:	080090c8 	.word	0x080090c8
 8006a18:	080090d0 	.word	0x080090d0
 8006a1c:	9a08      	ldr	r2, [sp, #32]
 8006a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a20:	429a      	cmp	r2, r3
 8006a22:	bfa8      	it	ge
 8006a24:	461a      	movge	r2, r3
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	4691      	mov	r9, r2
 8006a2a:	dc38      	bgt.n	8006a9e <_printf_float+0x346>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9305      	str	r3, [sp, #20]
 8006a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a34:	f104 021a 	add.w	r2, r4, #26
 8006a38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a3a:	9905      	ldr	r1, [sp, #20]
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	eba3 0309 	sub.w	r3, r3, r9
 8006a42:	428b      	cmp	r3, r1
 8006a44:	dc33      	bgt.n	8006aae <_printf_float+0x356>
 8006a46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	db3c      	blt.n	8006ac8 <_printf_float+0x370>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	07da      	lsls	r2, r3, #31
 8006a52:	d439      	bmi.n	8006ac8 <_printf_float+0x370>
 8006a54:	9b08      	ldr	r3, [sp, #32]
 8006a56:	9a04      	ldr	r2, [sp, #16]
 8006a58:	9907      	ldr	r1, [sp, #28]
 8006a5a:	1a9a      	subs	r2, r3, r2
 8006a5c:	eba3 0901 	sub.w	r9, r3, r1
 8006a60:	4591      	cmp	r9, r2
 8006a62:	bfa8      	it	ge
 8006a64:	4691      	movge	r9, r2
 8006a66:	f1b9 0f00 	cmp.w	r9, #0
 8006a6a:	dc35      	bgt.n	8006ad8 <_printf_float+0x380>
 8006a6c:	f04f 0800 	mov.w	r8, #0
 8006a70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a74:	f104 0a1a 	add.w	sl, r4, #26
 8006a78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	eba3 0309 	sub.w	r3, r3, r9
 8006a82:	4543      	cmp	r3, r8
 8006a84:	f77f af75 	ble.w	8006972 <_printf_float+0x21a>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	4652      	mov	r2, sl
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f aeae 	beq.w	80067f4 <_printf_float+0x9c>
 8006a98:	f108 0801 	add.w	r8, r8, #1
 8006a9c:	e7ec      	b.n	8006a78 <_printf_float+0x320>
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4642      	mov	r2, r8
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d1bf      	bne.n	8006a2c <_printf_float+0x2d4>
 8006aac:	e6a2      	b.n	80067f4 <_printf_float+0x9c>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	9204      	str	r2, [sp, #16]
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f43f ae9b 	beq.w	80067f4 <_printf_float+0x9c>
 8006abe:	9b05      	ldr	r3, [sp, #20]
 8006ac0:	9a04      	ldr	r2, [sp, #16]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	9305      	str	r3, [sp, #20]
 8006ac6:	e7b7      	b.n	8006a38 <_printf_float+0x2e0>
 8006ac8:	4653      	mov	r3, sl
 8006aca:	465a      	mov	r2, fp
 8006acc:	4631      	mov	r1, r6
 8006ace:	4628      	mov	r0, r5
 8006ad0:	47b8      	blx	r7
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	d1be      	bne.n	8006a54 <_printf_float+0x2fc>
 8006ad6:	e68d      	b.n	80067f4 <_printf_float+0x9c>
 8006ad8:	9a04      	ldr	r2, [sp, #16]
 8006ada:	464b      	mov	r3, r9
 8006adc:	4442      	add	r2, r8
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b8      	blx	r7
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d1c1      	bne.n	8006a6c <_printf_float+0x314>
 8006ae8:	e684      	b.n	80067f4 <_printf_float+0x9c>
 8006aea:	9a08      	ldr	r2, [sp, #32]
 8006aec:	2a01      	cmp	r2, #1
 8006aee:	dc01      	bgt.n	8006af4 <_printf_float+0x39c>
 8006af0:	07db      	lsls	r3, r3, #31
 8006af2:	d537      	bpl.n	8006b64 <_printf_float+0x40c>
 8006af4:	2301      	movs	r3, #1
 8006af6:	4642      	mov	r2, r8
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	f43f ae78 	beq.w	80067f4 <_printf_float+0x9c>
 8006b04:	4653      	mov	r3, sl
 8006b06:	465a      	mov	r2, fp
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f43f ae70 	beq.w	80067f4 <_printf_float+0x9c>
 8006b14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006b18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b20:	d01b      	beq.n	8006b5a <_printf_float+0x402>
 8006b22:	9b08      	ldr	r3, [sp, #32]
 8006b24:	f108 0201 	add.w	r2, r8, #1
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	d10e      	bne.n	8006b52 <_printf_float+0x3fa>
 8006b34:	e65e      	b.n	80067f4 <_printf_float+0x9c>
 8006b36:	2301      	movs	r3, #1
 8006b38:	464a      	mov	r2, r9
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	47b8      	blx	r7
 8006b40:	3001      	adds	r0, #1
 8006b42:	f43f ae57 	beq.w	80067f4 <_printf_float+0x9c>
 8006b46:	f108 0801 	add.w	r8, r8, #1
 8006b4a:	9b08      	ldr	r3, [sp, #32]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	4543      	cmp	r3, r8
 8006b50:	dcf1      	bgt.n	8006b36 <_printf_float+0x3de>
 8006b52:	9b04      	ldr	r3, [sp, #16]
 8006b54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b58:	e6db      	b.n	8006912 <_printf_float+0x1ba>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	f104 091a 	add.w	r9, r4, #26
 8006b62:	e7f2      	b.n	8006b4a <_printf_float+0x3f2>
 8006b64:	2301      	movs	r3, #1
 8006b66:	4642      	mov	r2, r8
 8006b68:	e7df      	b.n	8006b2a <_printf_float+0x3d2>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	464a      	mov	r2, r9
 8006b6e:	4631      	mov	r1, r6
 8006b70:	4628      	mov	r0, r5
 8006b72:	47b8      	blx	r7
 8006b74:	3001      	adds	r0, #1
 8006b76:	f43f ae3d 	beq.w	80067f4 <_printf_float+0x9c>
 8006b7a:	f108 0801 	add.w	r8, r8, #1
 8006b7e:	68e3      	ldr	r3, [r4, #12]
 8006b80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b82:	1a5b      	subs	r3, r3, r1
 8006b84:	4543      	cmp	r3, r8
 8006b86:	dcf0      	bgt.n	8006b6a <_printf_float+0x412>
 8006b88:	e6f7      	b.n	800697a <_printf_float+0x222>
 8006b8a:	f04f 0800 	mov.w	r8, #0
 8006b8e:	f104 0919 	add.w	r9, r4, #25
 8006b92:	e7f4      	b.n	8006b7e <_printf_float+0x426>

08006b94 <_printf_common>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	4616      	mov	r6, r2
 8006b9a:	4699      	mov	r9, r3
 8006b9c:	688a      	ldr	r2, [r1, #8]
 8006b9e:	690b      	ldr	r3, [r1, #16]
 8006ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	bfb8      	it	lt
 8006ba8:	4613      	movlt	r3, r2
 8006baa:	6033      	str	r3, [r6, #0]
 8006bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	b10a      	cbz	r2, 8006bba <_printf_common+0x26>
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	6033      	str	r3, [r6, #0]
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	0699      	lsls	r1, r3, #26
 8006bbe:	bf42      	ittt	mi
 8006bc0:	6833      	ldrmi	r3, [r6, #0]
 8006bc2:	3302      	addmi	r3, #2
 8006bc4:	6033      	strmi	r3, [r6, #0]
 8006bc6:	6825      	ldr	r5, [r4, #0]
 8006bc8:	f015 0506 	ands.w	r5, r5, #6
 8006bcc:	d106      	bne.n	8006bdc <_printf_common+0x48>
 8006bce:	f104 0a19 	add.w	sl, r4, #25
 8006bd2:	68e3      	ldr	r3, [r4, #12]
 8006bd4:	6832      	ldr	r2, [r6, #0]
 8006bd6:	1a9b      	subs	r3, r3, r2
 8006bd8:	42ab      	cmp	r3, r5
 8006bda:	dc26      	bgt.n	8006c2a <_printf_common+0x96>
 8006bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006be0:	1e13      	subs	r3, r2, #0
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	bf18      	it	ne
 8006be6:	2301      	movne	r3, #1
 8006be8:	0692      	lsls	r2, r2, #26
 8006bea:	d42b      	bmi.n	8006c44 <_printf_common+0xb0>
 8006bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	47c0      	blx	r8
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d01e      	beq.n	8006c38 <_printf_common+0xa4>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	68e5      	ldr	r5, [r4, #12]
 8006bfe:	6832      	ldr	r2, [r6, #0]
 8006c00:	f003 0306 	and.w	r3, r3, #6
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	bf08      	it	eq
 8006c08:	1aad      	subeq	r5, r5, r2
 8006c0a:	68a3      	ldr	r3, [r4, #8]
 8006c0c:	6922      	ldr	r2, [r4, #16]
 8006c0e:	bf0c      	ite	eq
 8006c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c14:	2500      	movne	r5, #0
 8006c16:	4293      	cmp	r3, r2
 8006c18:	bfc4      	itt	gt
 8006c1a:	1a9b      	subgt	r3, r3, r2
 8006c1c:	18ed      	addgt	r5, r5, r3
 8006c1e:	2600      	movs	r6, #0
 8006c20:	341a      	adds	r4, #26
 8006c22:	42b5      	cmp	r5, r6
 8006c24:	d11a      	bne.n	8006c5c <_printf_common+0xc8>
 8006c26:	2000      	movs	r0, #0
 8006c28:	e008      	b.n	8006c3c <_printf_common+0xa8>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4652      	mov	r2, sl
 8006c2e:	4649      	mov	r1, r9
 8006c30:	4638      	mov	r0, r7
 8006c32:	47c0      	blx	r8
 8006c34:	3001      	adds	r0, #1
 8006c36:	d103      	bne.n	8006c40 <_printf_common+0xac>
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c40:	3501      	adds	r5, #1
 8006c42:	e7c6      	b.n	8006bd2 <_printf_common+0x3e>
 8006c44:	18e1      	adds	r1, r4, r3
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	2030      	movs	r0, #48	; 0x30
 8006c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c4e:	4422      	add	r2, r4
 8006c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c58:	3302      	adds	r3, #2
 8006c5a:	e7c7      	b.n	8006bec <_printf_common+0x58>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4622      	mov	r2, r4
 8006c60:	4649      	mov	r1, r9
 8006c62:	4638      	mov	r0, r7
 8006c64:	47c0      	blx	r8
 8006c66:	3001      	adds	r0, #1
 8006c68:	d0e6      	beq.n	8006c38 <_printf_common+0xa4>
 8006c6a:	3601      	adds	r6, #1
 8006c6c:	e7d9      	b.n	8006c22 <_printf_common+0x8e>
	...

08006c70 <_printf_i>:
 8006c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c74:	7e0f      	ldrb	r7, [r1, #24]
 8006c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c78:	2f78      	cmp	r7, #120	; 0x78
 8006c7a:	4691      	mov	r9, r2
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	469a      	mov	sl, r3
 8006c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c86:	d807      	bhi.n	8006c98 <_printf_i+0x28>
 8006c88:	2f62      	cmp	r7, #98	; 0x62
 8006c8a:	d80a      	bhi.n	8006ca2 <_printf_i+0x32>
 8006c8c:	2f00      	cmp	r7, #0
 8006c8e:	f000 80d8 	beq.w	8006e42 <_printf_i+0x1d2>
 8006c92:	2f58      	cmp	r7, #88	; 0x58
 8006c94:	f000 80a3 	beq.w	8006dde <_printf_i+0x16e>
 8006c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ca0:	e03a      	b.n	8006d18 <_printf_i+0xa8>
 8006ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ca6:	2b15      	cmp	r3, #21
 8006ca8:	d8f6      	bhi.n	8006c98 <_printf_i+0x28>
 8006caa:	a101      	add	r1, pc, #4	; (adr r1, 8006cb0 <_printf_i+0x40>)
 8006cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cb0:	08006d09 	.word	0x08006d09
 8006cb4:	08006d1d 	.word	0x08006d1d
 8006cb8:	08006c99 	.word	0x08006c99
 8006cbc:	08006c99 	.word	0x08006c99
 8006cc0:	08006c99 	.word	0x08006c99
 8006cc4:	08006c99 	.word	0x08006c99
 8006cc8:	08006d1d 	.word	0x08006d1d
 8006ccc:	08006c99 	.word	0x08006c99
 8006cd0:	08006c99 	.word	0x08006c99
 8006cd4:	08006c99 	.word	0x08006c99
 8006cd8:	08006c99 	.word	0x08006c99
 8006cdc:	08006e29 	.word	0x08006e29
 8006ce0:	08006d4d 	.word	0x08006d4d
 8006ce4:	08006e0b 	.word	0x08006e0b
 8006ce8:	08006c99 	.word	0x08006c99
 8006cec:	08006c99 	.word	0x08006c99
 8006cf0:	08006e4b 	.word	0x08006e4b
 8006cf4:	08006c99 	.word	0x08006c99
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006c99 	.word	0x08006c99
 8006d00:	08006c99 	.word	0x08006c99
 8006d04:	08006e13 	.word	0x08006e13
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	602a      	str	r2, [r5, #0]
 8006d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0a3      	b.n	8006e64 <_printf_i+0x1f4>
 8006d1c:	6820      	ldr	r0, [r4, #0]
 8006d1e:	6829      	ldr	r1, [r5, #0]
 8006d20:	0606      	lsls	r6, r0, #24
 8006d22:	f101 0304 	add.w	r3, r1, #4
 8006d26:	d50a      	bpl.n	8006d3e <_printf_i+0xce>
 8006d28:	680e      	ldr	r6, [r1, #0]
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	2e00      	cmp	r6, #0
 8006d2e:	da03      	bge.n	8006d38 <_printf_i+0xc8>
 8006d30:	232d      	movs	r3, #45	; 0x2d
 8006d32:	4276      	negs	r6, r6
 8006d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d38:	485e      	ldr	r0, [pc, #376]	; (8006eb4 <_printf_i+0x244>)
 8006d3a:	230a      	movs	r3, #10
 8006d3c:	e019      	b.n	8006d72 <_printf_i+0x102>
 8006d3e:	680e      	ldr	r6, [r1, #0]
 8006d40:	602b      	str	r3, [r5, #0]
 8006d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d46:	bf18      	it	ne
 8006d48:	b236      	sxthne	r6, r6
 8006d4a:	e7ef      	b.n	8006d2c <_printf_i+0xbc>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	6820      	ldr	r0, [r4, #0]
 8006d50:	1d19      	adds	r1, r3, #4
 8006d52:	6029      	str	r1, [r5, #0]
 8006d54:	0601      	lsls	r1, r0, #24
 8006d56:	d501      	bpl.n	8006d5c <_printf_i+0xec>
 8006d58:	681e      	ldr	r6, [r3, #0]
 8006d5a:	e002      	b.n	8006d62 <_printf_i+0xf2>
 8006d5c:	0646      	lsls	r6, r0, #25
 8006d5e:	d5fb      	bpl.n	8006d58 <_printf_i+0xe8>
 8006d60:	881e      	ldrh	r6, [r3, #0]
 8006d62:	4854      	ldr	r0, [pc, #336]	; (8006eb4 <_printf_i+0x244>)
 8006d64:	2f6f      	cmp	r7, #111	; 0x6f
 8006d66:	bf0c      	ite	eq
 8006d68:	2308      	moveq	r3, #8
 8006d6a:	230a      	movne	r3, #10
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d72:	6865      	ldr	r5, [r4, #4]
 8006d74:	60a5      	str	r5, [r4, #8]
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	bfa2      	ittt	ge
 8006d7a:	6821      	ldrge	r1, [r4, #0]
 8006d7c:	f021 0104 	bicge.w	r1, r1, #4
 8006d80:	6021      	strge	r1, [r4, #0]
 8006d82:	b90e      	cbnz	r6, 8006d88 <_printf_i+0x118>
 8006d84:	2d00      	cmp	r5, #0
 8006d86:	d04d      	beq.n	8006e24 <_printf_i+0x1b4>
 8006d88:	4615      	mov	r5, r2
 8006d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d92:	5dc7      	ldrb	r7, [r0, r7]
 8006d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d98:	4637      	mov	r7, r6
 8006d9a:	42bb      	cmp	r3, r7
 8006d9c:	460e      	mov	r6, r1
 8006d9e:	d9f4      	bls.n	8006d8a <_printf_i+0x11a>
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d10b      	bne.n	8006dbc <_printf_i+0x14c>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	07de      	lsls	r6, r3, #31
 8006da8:	d508      	bpl.n	8006dbc <_printf_i+0x14c>
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	6861      	ldr	r1, [r4, #4]
 8006dae:	4299      	cmp	r1, r3
 8006db0:	bfde      	ittt	le
 8006db2:	2330      	movle	r3, #48	; 0x30
 8006db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dbc:	1b52      	subs	r2, r2, r5
 8006dbe:	6122      	str	r2, [r4, #16]
 8006dc0:	f8cd a000 	str.w	sl, [sp]
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	aa03      	add	r2, sp, #12
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4640      	mov	r0, r8
 8006dcc:	f7ff fee2 	bl	8006b94 <_printf_common>
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d14c      	bne.n	8006e6e <_printf_i+0x1fe>
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	b004      	add	sp, #16
 8006dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dde:	4835      	ldr	r0, [pc, #212]	; (8006eb4 <_printf_i+0x244>)
 8006de0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006de4:	6829      	ldr	r1, [r5, #0]
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dec:	6029      	str	r1, [r5, #0]
 8006dee:	061d      	lsls	r5, r3, #24
 8006df0:	d514      	bpl.n	8006e1c <_printf_i+0x1ac>
 8006df2:	07df      	lsls	r7, r3, #31
 8006df4:	bf44      	itt	mi
 8006df6:	f043 0320 	orrmi.w	r3, r3, #32
 8006dfa:	6023      	strmi	r3, [r4, #0]
 8006dfc:	b91e      	cbnz	r6, 8006e06 <_printf_i+0x196>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	f023 0320 	bic.w	r3, r3, #32
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	2310      	movs	r3, #16
 8006e08:	e7b0      	b.n	8006d6c <_printf_i+0xfc>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	f043 0320 	orr.w	r3, r3, #32
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	2378      	movs	r3, #120	; 0x78
 8006e14:	4828      	ldr	r0, [pc, #160]	; (8006eb8 <_printf_i+0x248>)
 8006e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e1a:	e7e3      	b.n	8006de4 <_printf_i+0x174>
 8006e1c:	0659      	lsls	r1, r3, #25
 8006e1e:	bf48      	it	mi
 8006e20:	b2b6      	uxthmi	r6, r6
 8006e22:	e7e6      	b.n	8006df2 <_printf_i+0x182>
 8006e24:	4615      	mov	r5, r2
 8006e26:	e7bb      	b.n	8006da0 <_printf_i+0x130>
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	6826      	ldr	r6, [r4, #0]
 8006e2c:	6961      	ldr	r1, [r4, #20]
 8006e2e:	1d18      	adds	r0, r3, #4
 8006e30:	6028      	str	r0, [r5, #0]
 8006e32:	0635      	lsls	r5, r6, #24
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	d501      	bpl.n	8006e3c <_printf_i+0x1cc>
 8006e38:	6019      	str	r1, [r3, #0]
 8006e3a:	e002      	b.n	8006e42 <_printf_i+0x1d2>
 8006e3c:	0670      	lsls	r0, r6, #25
 8006e3e:	d5fb      	bpl.n	8006e38 <_printf_i+0x1c8>
 8006e40:	8019      	strh	r1, [r3, #0]
 8006e42:	2300      	movs	r3, #0
 8006e44:	6123      	str	r3, [r4, #16]
 8006e46:	4615      	mov	r5, r2
 8006e48:	e7ba      	b.n	8006dc0 <_printf_i+0x150>
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	1d1a      	adds	r2, r3, #4
 8006e4e:	602a      	str	r2, [r5, #0]
 8006e50:	681d      	ldr	r5, [r3, #0]
 8006e52:	6862      	ldr	r2, [r4, #4]
 8006e54:	2100      	movs	r1, #0
 8006e56:	4628      	mov	r0, r5
 8006e58:	f7f9 fa4a 	bl	80002f0 <memchr>
 8006e5c:	b108      	cbz	r0, 8006e62 <_printf_i+0x1f2>
 8006e5e:	1b40      	subs	r0, r0, r5
 8006e60:	6060      	str	r0, [r4, #4]
 8006e62:	6863      	ldr	r3, [r4, #4]
 8006e64:	6123      	str	r3, [r4, #16]
 8006e66:	2300      	movs	r3, #0
 8006e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6c:	e7a8      	b.n	8006dc0 <_printf_i+0x150>
 8006e6e:	6923      	ldr	r3, [r4, #16]
 8006e70:	462a      	mov	r2, r5
 8006e72:	4649      	mov	r1, r9
 8006e74:	4640      	mov	r0, r8
 8006e76:	47d0      	blx	sl
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d0ab      	beq.n	8006dd4 <_printf_i+0x164>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	079b      	lsls	r3, r3, #30
 8006e80:	d413      	bmi.n	8006eaa <_printf_i+0x23a>
 8006e82:	68e0      	ldr	r0, [r4, #12]
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	4298      	cmp	r0, r3
 8006e88:	bfb8      	it	lt
 8006e8a:	4618      	movlt	r0, r3
 8006e8c:	e7a4      	b.n	8006dd8 <_printf_i+0x168>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4632      	mov	r2, r6
 8006e92:	4649      	mov	r1, r9
 8006e94:	4640      	mov	r0, r8
 8006e96:	47d0      	blx	sl
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d09b      	beq.n	8006dd4 <_printf_i+0x164>
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	68e3      	ldr	r3, [r4, #12]
 8006ea0:	9903      	ldr	r1, [sp, #12]
 8006ea2:	1a5b      	subs	r3, r3, r1
 8006ea4:	42ab      	cmp	r3, r5
 8006ea6:	dcf2      	bgt.n	8006e8e <_printf_i+0x21e>
 8006ea8:	e7eb      	b.n	8006e82 <_printf_i+0x212>
 8006eaa:	2500      	movs	r5, #0
 8006eac:	f104 0619 	add.w	r6, r4, #25
 8006eb0:	e7f5      	b.n	8006e9e <_printf_i+0x22e>
 8006eb2:	bf00      	nop
 8006eb4:	080090d2 	.word	0x080090d2
 8006eb8:	080090e3 	.word	0x080090e3

08006ebc <iprintf>:
 8006ebc:	b40f      	push	{r0, r1, r2, r3}
 8006ebe:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <iprintf+0x2c>)
 8006ec0:	b513      	push	{r0, r1, r4, lr}
 8006ec2:	681c      	ldr	r4, [r3, #0]
 8006ec4:	b124      	cbz	r4, 8006ed0 <iprintf+0x14>
 8006ec6:	69a3      	ldr	r3, [r4, #24]
 8006ec8:	b913      	cbnz	r3, 8006ed0 <iprintf+0x14>
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f001 f858 	bl	8007f80 <__sinit>
 8006ed0:	ab05      	add	r3, sp, #20
 8006ed2:	9a04      	ldr	r2, [sp, #16]
 8006ed4:	68a1      	ldr	r1, [r4, #8]
 8006ed6:	9301      	str	r3, [sp, #4]
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f001 fe15 	bl	8008b08 <_vfiprintf_r>
 8006ede:	b002      	add	sp, #8
 8006ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee4:	b004      	add	sp, #16
 8006ee6:	4770      	bx	lr
 8006ee8:	24000010 	.word	0x24000010

08006eec <_puts_r>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	460e      	mov	r6, r1
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b118      	cbz	r0, 8006efc <_puts_r+0x10>
 8006ef4:	6983      	ldr	r3, [r0, #24]
 8006ef6:	b90b      	cbnz	r3, 8006efc <_puts_r+0x10>
 8006ef8:	f001 f842 	bl	8007f80 <__sinit>
 8006efc:	69ab      	ldr	r3, [r5, #24]
 8006efe:	68ac      	ldr	r4, [r5, #8]
 8006f00:	b913      	cbnz	r3, 8006f08 <_puts_r+0x1c>
 8006f02:	4628      	mov	r0, r5
 8006f04:	f001 f83c 	bl	8007f80 <__sinit>
 8006f08:	4b2c      	ldr	r3, [pc, #176]	; (8006fbc <_puts_r+0xd0>)
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d120      	bne.n	8006f50 <_puts_r+0x64>
 8006f0e:	686c      	ldr	r4, [r5, #4]
 8006f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f12:	07db      	lsls	r3, r3, #31
 8006f14:	d405      	bmi.n	8006f22 <_puts_r+0x36>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	0598      	lsls	r0, r3, #22
 8006f1a:	d402      	bmi.n	8006f22 <_puts_r+0x36>
 8006f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f1e:	f001 f8d2 	bl	80080c6 <__retarget_lock_acquire_recursive>
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	0719      	lsls	r1, r3, #28
 8006f26:	d51d      	bpl.n	8006f64 <_puts_r+0x78>
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	b1db      	cbz	r3, 8006f64 <_puts_r+0x78>
 8006f2c:	3e01      	subs	r6, #1
 8006f2e:	68a3      	ldr	r3, [r4, #8]
 8006f30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f34:	3b01      	subs	r3, #1
 8006f36:	60a3      	str	r3, [r4, #8]
 8006f38:	bb39      	cbnz	r1, 8006f8a <_puts_r+0x9e>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	da38      	bge.n	8006fb0 <_puts_r+0xc4>
 8006f3e:	4622      	mov	r2, r4
 8006f40:	210a      	movs	r1, #10
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 f848 	bl	8006fd8 <__swbuf_r>
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d011      	beq.n	8006f70 <_puts_r+0x84>
 8006f4c:	250a      	movs	r5, #10
 8006f4e:	e011      	b.n	8006f74 <_puts_r+0x88>
 8006f50:	4b1b      	ldr	r3, [pc, #108]	; (8006fc0 <_puts_r+0xd4>)
 8006f52:	429c      	cmp	r4, r3
 8006f54:	d101      	bne.n	8006f5a <_puts_r+0x6e>
 8006f56:	68ac      	ldr	r4, [r5, #8]
 8006f58:	e7da      	b.n	8006f10 <_puts_r+0x24>
 8006f5a:	4b1a      	ldr	r3, [pc, #104]	; (8006fc4 <_puts_r+0xd8>)
 8006f5c:	429c      	cmp	r4, r3
 8006f5e:	bf08      	it	eq
 8006f60:	68ec      	ldreq	r4, [r5, #12]
 8006f62:	e7d5      	b.n	8006f10 <_puts_r+0x24>
 8006f64:	4621      	mov	r1, r4
 8006f66:	4628      	mov	r0, r5
 8006f68:	f000 f888 	bl	800707c <__swsetup_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d0dd      	beq.n	8006f2c <_puts_r+0x40>
 8006f70:	f04f 35ff 	mov.w	r5, #4294967295
 8006f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f76:	07da      	lsls	r2, r3, #31
 8006f78:	d405      	bmi.n	8006f86 <_puts_r+0x9a>
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	059b      	lsls	r3, r3, #22
 8006f7e:	d402      	bmi.n	8006f86 <_puts_r+0x9a>
 8006f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f82:	f001 f8a1 	bl	80080c8 <__retarget_lock_release_recursive>
 8006f86:	4628      	mov	r0, r5
 8006f88:	bd70      	pop	{r4, r5, r6, pc}
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	da04      	bge.n	8006f98 <_puts_r+0xac>
 8006f8e:	69a2      	ldr	r2, [r4, #24]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	dc06      	bgt.n	8006fa2 <_puts_r+0xb6>
 8006f94:	290a      	cmp	r1, #10
 8006f96:	d004      	beq.n	8006fa2 <_puts_r+0xb6>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	6022      	str	r2, [r4, #0]
 8006f9e:	7019      	strb	r1, [r3, #0]
 8006fa0:	e7c5      	b.n	8006f2e <_puts_r+0x42>
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f000 f817 	bl	8006fd8 <__swbuf_r>
 8006faa:	3001      	adds	r0, #1
 8006fac:	d1bf      	bne.n	8006f2e <_puts_r+0x42>
 8006fae:	e7df      	b.n	8006f70 <_puts_r+0x84>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	250a      	movs	r5, #10
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	6022      	str	r2, [r4, #0]
 8006fb8:	701d      	strb	r5, [r3, #0]
 8006fba:	e7db      	b.n	8006f74 <_puts_r+0x88>
 8006fbc:	080091a4 	.word	0x080091a4
 8006fc0:	080091c4 	.word	0x080091c4
 8006fc4:	08009184 	.word	0x08009184

08006fc8 <puts>:
 8006fc8:	4b02      	ldr	r3, [pc, #8]	; (8006fd4 <puts+0xc>)
 8006fca:	4601      	mov	r1, r0
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	f7ff bf8d 	b.w	8006eec <_puts_r>
 8006fd2:	bf00      	nop
 8006fd4:	24000010 	.word	0x24000010

08006fd8 <__swbuf_r>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	460e      	mov	r6, r1
 8006fdc:	4614      	mov	r4, r2
 8006fde:	4605      	mov	r5, r0
 8006fe0:	b118      	cbz	r0, 8006fea <__swbuf_r+0x12>
 8006fe2:	6983      	ldr	r3, [r0, #24]
 8006fe4:	b90b      	cbnz	r3, 8006fea <__swbuf_r+0x12>
 8006fe6:	f000 ffcb 	bl	8007f80 <__sinit>
 8006fea:	4b21      	ldr	r3, [pc, #132]	; (8007070 <__swbuf_r+0x98>)
 8006fec:	429c      	cmp	r4, r3
 8006fee:	d12b      	bne.n	8007048 <__swbuf_r+0x70>
 8006ff0:	686c      	ldr	r4, [r5, #4]
 8006ff2:	69a3      	ldr	r3, [r4, #24]
 8006ff4:	60a3      	str	r3, [r4, #8]
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	071a      	lsls	r2, r3, #28
 8006ffa:	d52f      	bpl.n	800705c <__swbuf_r+0x84>
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	b36b      	cbz	r3, 800705c <__swbuf_r+0x84>
 8007000:	6923      	ldr	r3, [r4, #16]
 8007002:	6820      	ldr	r0, [r4, #0]
 8007004:	1ac0      	subs	r0, r0, r3
 8007006:	6963      	ldr	r3, [r4, #20]
 8007008:	b2f6      	uxtb	r6, r6
 800700a:	4283      	cmp	r3, r0
 800700c:	4637      	mov	r7, r6
 800700e:	dc04      	bgt.n	800701a <__swbuf_r+0x42>
 8007010:	4621      	mov	r1, r4
 8007012:	4628      	mov	r0, r5
 8007014:	f000 ff20 	bl	8007e58 <_fflush_r>
 8007018:	bb30      	cbnz	r0, 8007068 <__swbuf_r+0x90>
 800701a:	68a3      	ldr	r3, [r4, #8]
 800701c:	3b01      	subs	r3, #1
 800701e:	60a3      	str	r3, [r4, #8]
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	6022      	str	r2, [r4, #0]
 8007026:	701e      	strb	r6, [r3, #0]
 8007028:	6963      	ldr	r3, [r4, #20]
 800702a:	3001      	adds	r0, #1
 800702c:	4283      	cmp	r3, r0
 800702e:	d004      	beq.n	800703a <__swbuf_r+0x62>
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	07db      	lsls	r3, r3, #31
 8007034:	d506      	bpl.n	8007044 <__swbuf_r+0x6c>
 8007036:	2e0a      	cmp	r6, #10
 8007038:	d104      	bne.n	8007044 <__swbuf_r+0x6c>
 800703a:	4621      	mov	r1, r4
 800703c:	4628      	mov	r0, r5
 800703e:	f000 ff0b 	bl	8007e58 <_fflush_r>
 8007042:	b988      	cbnz	r0, 8007068 <__swbuf_r+0x90>
 8007044:	4638      	mov	r0, r7
 8007046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <__swbuf_r+0x9c>)
 800704a:	429c      	cmp	r4, r3
 800704c:	d101      	bne.n	8007052 <__swbuf_r+0x7a>
 800704e:	68ac      	ldr	r4, [r5, #8]
 8007050:	e7cf      	b.n	8006ff2 <__swbuf_r+0x1a>
 8007052:	4b09      	ldr	r3, [pc, #36]	; (8007078 <__swbuf_r+0xa0>)
 8007054:	429c      	cmp	r4, r3
 8007056:	bf08      	it	eq
 8007058:	68ec      	ldreq	r4, [r5, #12]
 800705a:	e7ca      	b.n	8006ff2 <__swbuf_r+0x1a>
 800705c:	4621      	mov	r1, r4
 800705e:	4628      	mov	r0, r5
 8007060:	f000 f80c 	bl	800707c <__swsetup_r>
 8007064:	2800      	cmp	r0, #0
 8007066:	d0cb      	beq.n	8007000 <__swbuf_r+0x28>
 8007068:	f04f 37ff 	mov.w	r7, #4294967295
 800706c:	e7ea      	b.n	8007044 <__swbuf_r+0x6c>
 800706e:	bf00      	nop
 8007070:	080091a4 	.word	0x080091a4
 8007074:	080091c4 	.word	0x080091c4
 8007078:	08009184 	.word	0x08009184

0800707c <__swsetup_r>:
 800707c:	4b32      	ldr	r3, [pc, #200]	; (8007148 <__swsetup_r+0xcc>)
 800707e:	b570      	push	{r4, r5, r6, lr}
 8007080:	681d      	ldr	r5, [r3, #0]
 8007082:	4606      	mov	r6, r0
 8007084:	460c      	mov	r4, r1
 8007086:	b125      	cbz	r5, 8007092 <__swsetup_r+0x16>
 8007088:	69ab      	ldr	r3, [r5, #24]
 800708a:	b913      	cbnz	r3, 8007092 <__swsetup_r+0x16>
 800708c:	4628      	mov	r0, r5
 800708e:	f000 ff77 	bl	8007f80 <__sinit>
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <__swsetup_r+0xd0>)
 8007094:	429c      	cmp	r4, r3
 8007096:	d10f      	bne.n	80070b8 <__swsetup_r+0x3c>
 8007098:	686c      	ldr	r4, [r5, #4]
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070a0:	0719      	lsls	r1, r3, #28
 80070a2:	d42c      	bmi.n	80070fe <__swsetup_r+0x82>
 80070a4:	06dd      	lsls	r5, r3, #27
 80070a6:	d411      	bmi.n	80070cc <__swsetup_r+0x50>
 80070a8:	2309      	movs	r3, #9
 80070aa:	6033      	str	r3, [r6, #0]
 80070ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	f04f 30ff 	mov.w	r0, #4294967295
 80070b6:	e03e      	b.n	8007136 <__swsetup_r+0xba>
 80070b8:	4b25      	ldr	r3, [pc, #148]	; (8007150 <__swsetup_r+0xd4>)
 80070ba:	429c      	cmp	r4, r3
 80070bc:	d101      	bne.n	80070c2 <__swsetup_r+0x46>
 80070be:	68ac      	ldr	r4, [r5, #8]
 80070c0:	e7eb      	b.n	800709a <__swsetup_r+0x1e>
 80070c2:	4b24      	ldr	r3, [pc, #144]	; (8007154 <__swsetup_r+0xd8>)
 80070c4:	429c      	cmp	r4, r3
 80070c6:	bf08      	it	eq
 80070c8:	68ec      	ldreq	r4, [r5, #12]
 80070ca:	e7e6      	b.n	800709a <__swsetup_r+0x1e>
 80070cc:	0758      	lsls	r0, r3, #29
 80070ce:	d512      	bpl.n	80070f6 <__swsetup_r+0x7a>
 80070d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070d2:	b141      	cbz	r1, 80070e6 <__swsetup_r+0x6a>
 80070d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070d8:	4299      	cmp	r1, r3
 80070da:	d002      	beq.n	80070e2 <__swsetup_r+0x66>
 80070dc:	4630      	mov	r0, r6
 80070de:	f001 fc09 	bl	80088f4 <_free_r>
 80070e2:	2300      	movs	r3, #0
 80070e4:	6363      	str	r3, [r4, #52]	; 0x34
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	2300      	movs	r3, #0
 80070f0:	6063      	str	r3, [r4, #4]
 80070f2:	6923      	ldr	r3, [r4, #16]
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	89a3      	ldrh	r3, [r4, #12]
 80070f8:	f043 0308 	orr.w	r3, r3, #8
 80070fc:	81a3      	strh	r3, [r4, #12]
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	b94b      	cbnz	r3, 8007116 <__swsetup_r+0x9a>
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800710c:	d003      	beq.n	8007116 <__swsetup_r+0x9a>
 800710e:	4621      	mov	r1, r4
 8007110:	4630      	mov	r0, r6
 8007112:	f000 ffff 	bl	8008114 <__smakebuf_r>
 8007116:	89a0      	ldrh	r0, [r4, #12]
 8007118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800711c:	f010 0301 	ands.w	r3, r0, #1
 8007120:	d00a      	beq.n	8007138 <__swsetup_r+0xbc>
 8007122:	2300      	movs	r3, #0
 8007124:	60a3      	str	r3, [r4, #8]
 8007126:	6963      	ldr	r3, [r4, #20]
 8007128:	425b      	negs	r3, r3
 800712a:	61a3      	str	r3, [r4, #24]
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	b943      	cbnz	r3, 8007142 <__swsetup_r+0xc6>
 8007130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007134:	d1ba      	bne.n	80070ac <__swsetup_r+0x30>
 8007136:	bd70      	pop	{r4, r5, r6, pc}
 8007138:	0781      	lsls	r1, r0, #30
 800713a:	bf58      	it	pl
 800713c:	6963      	ldrpl	r3, [r4, #20]
 800713e:	60a3      	str	r3, [r4, #8]
 8007140:	e7f4      	b.n	800712c <__swsetup_r+0xb0>
 8007142:	2000      	movs	r0, #0
 8007144:	e7f7      	b.n	8007136 <__swsetup_r+0xba>
 8007146:	bf00      	nop
 8007148:	24000010 	.word	0x24000010
 800714c:	080091a4 	.word	0x080091a4
 8007150:	080091c4 	.word	0x080091c4
 8007154:	08009184 	.word	0x08009184

08007158 <quorem>:
 8007158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	6903      	ldr	r3, [r0, #16]
 800715e:	690c      	ldr	r4, [r1, #16]
 8007160:	42a3      	cmp	r3, r4
 8007162:	4607      	mov	r7, r0
 8007164:	f2c0 8081 	blt.w	800726a <quorem+0x112>
 8007168:	3c01      	subs	r4, #1
 800716a:	f101 0814 	add.w	r8, r1, #20
 800716e:	f100 0514 	add.w	r5, r0, #20
 8007172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007176:	9301      	str	r3, [sp, #4]
 8007178:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800717c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007180:	3301      	adds	r3, #1
 8007182:	429a      	cmp	r2, r3
 8007184:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007188:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800718c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007190:	d331      	bcc.n	80071f6 <quorem+0x9e>
 8007192:	f04f 0e00 	mov.w	lr, #0
 8007196:	4640      	mov	r0, r8
 8007198:	46ac      	mov	ip, r5
 800719a:	46f2      	mov	sl, lr
 800719c:	f850 2b04 	ldr.w	r2, [r0], #4
 80071a0:	b293      	uxth	r3, r2
 80071a2:	fb06 e303 	mla	r3, r6, r3, lr
 80071a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	ebaa 0303 	sub.w	r3, sl, r3
 80071b0:	f8dc a000 	ldr.w	sl, [ip]
 80071b4:	0c12      	lsrs	r2, r2, #16
 80071b6:	fa13 f38a 	uxtah	r3, r3, sl
 80071ba:	fb06 e202 	mla	r2, r6, r2, lr
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	9b00      	ldr	r3, [sp, #0]
 80071c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071c6:	b292      	uxth	r2, r2
 80071c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80071d4:	4581      	cmp	r9, r0
 80071d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071da:	f84c 3b04 	str.w	r3, [ip], #4
 80071de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071e2:	d2db      	bcs.n	800719c <quorem+0x44>
 80071e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80071e8:	b92b      	cbnz	r3, 80071f6 <quorem+0x9e>
 80071ea:	9b01      	ldr	r3, [sp, #4]
 80071ec:	3b04      	subs	r3, #4
 80071ee:	429d      	cmp	r5, r3
 80071f0:	461a      	mov	r2, r3
 80071f2:	d32e      	bcc.n	8007252 <quorem+0xfa>
 80071f4:	613c      	str	r4, [r7, #16]
 80071f6:	4638      	mov	r0, r7
 80071f8:	f001 fa64 	bl	80086c4 <__mcmp>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	db24      	blt.n	800724a <quorem+0xf2>
 8007200:	3601      	adds	r6, #1
 8007202:	4628      	mov	r0, r5
 8007204:	f04f 0c00 	mov.w	ip, #0
 8007208:	f858 2b04 	ldr.w	r2, [r8], #4
 800720c:	f8d0 e000 	ldr.w	lr, [r0]
 8007210:	b293      	uxth	r3, r2
 8007212:	ebac 0303 	sub.w	r3, ip, r3
 8007216:	0c12      	lsrs	r2, r2, #16
 8007218:	fa13 f38e 	uxtah	r3, r3, lr
 800721c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007224:	b29b      	uxth	r3, r3
 8007226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800722a:	45c1      	cmp	r9, r8
 800722c:	f840 3b04 	str.w	r3, [r0], #4
 8007230:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007234:	d2e8      	bcs.n	8007208 <quorem+0xb0>
 8007236:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800723a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800723e:	b922      	cbnz	r2, 800724a <quorem+0xf2>
 8007240:	3b04      	subs	r3, #4
 8007242:	429d      	cmp	r5, r3
 8007244:	461a      	mov	r2, r3
 8007246:	d30a      	bcc.n	800725e <quorem+0x106>
 8007248:	613c      	str	r4, [r7, #16]
 800724a:	4630      	mov	r0, r6
 800724c:	b003      	add	sp, #12
 800724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007252:	6812      	ldr	r2, [r2, #0]
 8007254:	3b04      	subs	r3, #4
 8007256:	2a00      	cmp	r2, #0
 8007258:	d1cc      	bne.n	80071f4 <quorem+0x9c>
 800725a:	3c01      	subs	r4, #1
 800725c:	e7c7      	b.n	80071ee <quorem+0x96>
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	3b04      	subs	r3, #4
 8007262:	2a00      	cmp	r2, #0
 8007264:	d1f0      	bne.n	8007248 <quorem+0xf0>
 8007266:	3c01      	subs	r4, #1
 8007268:	e7eb      	b.n	8007242 <quorem+0xea>
 800726a:	2000      	movs	r0, #0
 800726c:	e7ee      	b.n	800724c <quorem+0xf4>
	...

08007270 <_dtoa_r>:
 8007270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	ed2d 8b02 	vpush	{d8}
 8007278:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800727a:	b091      	sub	sp, #68	; 0x44
 800727c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007280:	ec59 8b10 	vmov	r8, r9, d0
 8007284:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007286:	9106      	str	r1, [sp, #24]
 8007288:	4606      	mov	r6, r0
 800728a:	9208      	str	r2, [sp, #32]
 800728c:	930c      	str	r3, [sp, #48]	; 0x30
 800728e:	b975      	cbnz	r5, 80072ae <_dtoa_r+0x3e>
 8007290:	2010      	movs	r0, #16
 8007292:	f000 ff7f 	bl	8008194 <malloc>
 8007296:	4602      	mov	r2, r0
 8007298:	6270      	str	r0, [r6, #36]	; 0x24
 800729a:	b920      	cbnz	r0, 80072a6 <_dtoa_r+0x36>
 800729c:	4baa      	ldr	r3, [pc, #680]	; (8007548 <_dtoa_r+0x2d8>)
 800729e:	21ea      	movs	r1, #234	; 0xea
 80072a0:	48aa      	ldr	r0, [pc, #680]	; (800754c <_dtoa_r+0x2dc>)
 80072a2:	f001 fdc7 	bl	8008e34 <__assert_func>
 80072a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072aa:	6005      	str	r5, [r0, #0]
 80072ac:	60c5      	str	r5, [r0, #12]
 80072ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80072b0:	6819      	ldr	r1, [r3, #0]
 80072b2:	b151      	cbz	r1, 80072ca <_dtoa_r+0x5a>
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	604a      	str	r2, [r1, #4]
 80072b8:	2301      	movs	r3, #1
 80072ba:	4093      	lsls	r3, r2
 80072bc:	608b      	str	r3, [r1, #8]
 80072be:	4630      	mov	r0, r6
 80072c0:	f000 ffbe 	bl	8008240 <_Bfree>
 80072c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	f1b9 0300 	subs.w	r3, r9, #0
 80072ce:	bfbb      	ittet	lt
 80072d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072d4:	9303      	strlt	r3, [sp, #12]
 80072d6:	2300      	movge	r3, #0
 80072d8:	2201      	movlt	r2, #1
 80072da:	bfac      	ite	ge
 80072dc:	6023      	strge	r3, [r4, #0]
 80072de:	6022      	strlt	r2, [r4, #0]
 80072e0:	4b9b      	ldr	r3, [pc, #620]	; (8007550 <_dtoa_r+0x2e0>)
 80072e2:	9c03      	ldr	r4, [sp, #12]
 80072e4:	43a3      	bics	r3, r4
 80072e6:	d11c      	bne.n	8007322 <_dtoa_r+0xb2>
 80072e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80072f4:	ea53 0308 	orrs.w	r3, r3, r8
 80072f8:	f000 84fd 	beq.w	8007cf6 <_dtoa_r+0xa86>
 80072fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072fe:	b963      	cbnz	r3, 800731a <_dtoa_r+0xaa>
 8007300:	4b94      	ldr	r3, [pc, #592]	; (8007554 <_dtoa_r+0x2e4>)
 8007302:	e01f      	b.n	8007344 <_dtoa_r+0xd4>
 8007304:	4b94      	ldr	r3, [pc, #592]	; (8007558 <_dtoa_r+0x2e8>)
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	3308      	adds	r3, #8
 800730a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	9801      	ldr	r0, [sp, #4]
 8007310:	b011      	add	sp, #68	; 0x44
 8007312:	ecbd 8b02 	vpop	{d8}
 8007316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731a:	4b8e      	ldr	r3, [pc, #568]	; (8007554 <_dtoa_r+0x2e4>)
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	3303      	adds	r3, #3
 8007320:	e7f3      	b.n	800730a <_dtoa_r+0x9a>
 8007322:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007326:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	d10b      	bne.n	8007348 <_dtoa_r+0xd8>
 8007330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007332:	2301      	movs	r3, #1
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 84d9 	beq.w	8007cf0 <_dtoa_r+0xa80>
 800733e:	4887      	ldr	r0, [pc, #540]	; (800755c <_dtoa_r+0x2ec>)
 8007340:	6018      	str	r0, [r3, #0]
 8007342:	1e43      	subs	r3, r0, #1
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	e7e2      	b.n	800730e <_dtoa_r+0x9e>
 8007348:	a90f      	add	r1, sp, #60	; 0x3c
 800734a:	aa0e      	add	r2, sp, #56	; 0x38
 800734c:	4630      	mov	r0, r6
 800734e:	eeb0 0b48 	vmov.f64	d0, d8
 8007352:	f001 fa5d 	bl	8008810 <__d2b>
 8007356:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800735a:	4605      	mov	r5, r0
 800735c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800735e:	2900      	cmp	r1, #0
 8007360:	d046      	beq.n	80073f0 <_dtoa_r+0x180>
 8007362:	ee18 4a90 	vmov	r4, s17
 8007366:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800736a:	ec53 2b18 	vmov	r2, r3, d8
 800736e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007372:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007376:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800737a:	2400      	movs	r4, #0
 800737c:	ec43 2b16 	vmov	d6, r2, r3
 8007380:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007384:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007530 <_dtoa_r+0x2c0>
 8007388:	ee36 7b47 	vsub.f64	d7, d6, d7
 800738c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007538 <_dtoa_r+0x2c8>
 8007390:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007394:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007540 <_dtoa_r+0x2d0>
 8007398:	ee07 1a90 	vmov	s15, r1
 800739c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80073a0:	eeb0 7b46 	vmov.f64	d7, d6
 80073a4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80073a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80073ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80073b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b4:	ee16 ba90 	vmov	fp, s13
 80073b8:	940a      	str	r4, [sp, #40]	; 0x28
 80073ba:	d508      	bpl.n	80073ce <_dtoa_r+0x15e>
 80073bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80073c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80073c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c8:	bf18      	it	ne
 80073ca:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80073ce:	f1bb 0f16 	cmp.w	fp, #22
 80073d2:	d82f      	bhi.n	8007434 <_dtoa_r+0x1c4>
 80073d4:	4b62      	ldr	r3, [pc, #392]	; (8007560 <_dtoa_r+0x2f0>)
 80073d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073da:	ed93 7b00 	vldr	d7, [r3]
 80073de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80073e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e6:	d501      	bpl.n	80073ec <_dtoa_r+0x17c>
 80073e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073ec:	2300      	movs	r3, #0
 80073ee:	e022      	b.n	8007436 <_dtoa_r+0x1c6>
 80073f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073f2:	4401      	add	r1, r0
 80073f4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	bfc1      	itttt	gt
 80073fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007400:	fa04 f303 	lslgt.w	r3, r4, r3
 8007404:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007408:	fa28 f804 	lsrgt.w	r8, r8, r4
 800740c:	bfd6      	itet	le
 800740e:	f1c3 0320 	rsble	r3, r3, #32
 8007412:	ea43 0808 	orrgt.w	r8, r3, r8
 8007416:	fa08 f803 	lslle.w	r8, r8, r3
 800741a:	ee07 8a90 	vmov	s15, r8
 800741e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007422:	3901      	subs	r1, #1
 8007424:	ee17 4a90 	vmov	r4, s15
 8007428:	ec53 2b17 	vmov	r2, r3, d7
 800742c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007430:	2401      	movs	r4, #1
 8007432:	e7a3      	b.n	800737c <_dtoa_r+0x10c>
 8007434:	2301      	movs	r3, #1
 8007436:	930b      	str	r3, [sp, #44]	; 0x2c
 8007438:	1a43      	subs	r3, r0, r1
 800743a:	1e5a      	subs	r2, r3, #1
 800743c:	bf45      	ittet	mi
 800743e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007442:	9304      	strmi	r3, [sp, #16]
 8007444:	2300      	movpl	r3, #0
 8007446:	2300      	movmi	r3, #0
 8007448:	9205      	str	r2, [sp, #20]
 800744a:	bf54      	ite	pl
 800744c:	9304      	strpl	r3, [sp, #16]
 800744e:	9305      	strmi	r3, [sp, #20]
 8007450:	f1bb 0f00 	cmp.w	fp, #0
 8007454:	db18      	blt.n	8007488 <_dtoa_r+0x218>
 8007456:	9b05      	ldr	r3, [sp, #20]
 8007458:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800745c:	445b      	add	r3, fp
 800745e:	9305      	str	r3, [sp, #20]
 8007460:	2300      	movs	r3, #0
 8007462:	9a06      	ldr	r2, [sp, #24]
 8007464:	2a09      	cmp	r2, #9
 8007466:	d849      	bhi.n	80074fc <_dtoa_r+0x28c>
 8007468:	2a05      	cmp	r2, #5
 800746a:	bfc4      	itt	gt
 800746c:	3a04      	subgt	r2, #4
 800746e:	9206      	strgt	r2, [sp, #24]
 8007470:	9a06      	ldr	r2, [sp, #24]
 8007472:	f1a2 0202 	sub.w	r2, r2, #2
 8007476:	bfcc      	ite	gt
 8007478:	2400      	movgt	r4, #0
 800747a:	2401      	movle	r4, #1
 800747c:	2a03      	cmp	r2, #3
 800747e:	d848      	bhi.n	8007512 <_dtoa_r+0x2a2>
 8007480:	e8df f002 	tbb	[pc, r2]
 8007484:	3a2c2e0b 	.word	0x3a2c2e0b
 8007488:	9b04      	ldr	r3, [sp, #16]
 800748a:	2200      	movs	r2, #0
 800748c:	eba3 030b 	sub.w	r3, r3, fp
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	9209      	str	r2, [sp, #36]	; 0x24
 8007494:	f1cb 0300 	rsb	r3, fp, #0
 8007498:	e7e3      	b.n	8007462 <_dtoa_r+0x1f2>
 800749a:	2200      	movs	r2, #0
 800749c:	9207      	str	r2, [sp, #28]
 800749e:	9a08      	ldr	r2, [sp, #32]
 80074a0:	2a00      	cmp	r2, #0
 80074a2:	dc39      	bgt.n	8007518 <_dtoa_r+0x2a8>
 80074a4:	f04f 0a01 	mov.w	sl, #1
 80074a8:	46d1      	mov	r9, sl
 80074aa:	4652      	mov	r2, sl
 80074ac:	f8cd a020 	str.w	sl, [sp, #32]
 80074b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80074b2:	2100      	movs	r1, #0
 80074b4:	6079      	str	r1, [r7, #4]
 80074b6:	2004      	movs	r0, #4
 80074b8:	f100 0c14 	add.w	ip, r0, #20
 80074bc:	4594      	cmp	ip, r2
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	d92f      	bls.n	8007522 <_dtoa_r+0x2b2>
 80074c2:	4630      	mov	r0, r6
 80074c4:	930d      	str	r3, [sp, #52]	; 0x34
 80074c6:	f000 fe7b 	bl	80081c0 <_Balloc>
 80074ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074cc:	9001      	str	r0, [sp, #4]
 80074ce:	4602      	mov	r2, r0
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d149      	bne.n	8007568 <_dtoa_r+0x2f8>
 80074d4:	4b23      	ldr	r3, [pc, #140]	; (8007564 <_dtoa_r+0x2f4>)
 80074d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074da:	e6e1      	b.n	80072a0 <_dtoa_r+0x30>
 80074dc:	2201      	movs	r2, #1
 80074de:	e7dd      	b.n	800749c <_dtoa_r+0x22c>
 80074e0:	2200      	movs	r2, #0
 80074e2:	9207      	str	r2, [sp, #28]
 80074e4:	9a08      	ldr	r2, [sp, #32]
 80074e6:	eb0b 0a02 	add.w	sl, fp, r2
 80074ea:	f10a 0901 	add.w	r9, sl, #1
 80074ee:	464a      	mov	r2, r9
 80074f0:	2a01      	cmp	r2, #1
 80074f2:	bfb8      	it	lt
 80074f4:	2201      	movlt	r2, #1
 80074f6:	e7db      	b.n	80074b0 <_dtoa_r+0x240>
 80074f8:	2201      	movs	r2, #1
 80074fa:	e7f2      	b.n	80074e2 <_dtoa_r+0x272>
 80074fc:	2401      	movs	r4, #1
 80074fe:	2200      	movs	r2, #0
 8007500:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007504:	f04f 3aff 	mov.w	sl, #4294967295
 8007508:	2100      	movs	r1, #0
 800750a:	46d1      	mov	r9, sl
 800750c:	2212      	movs	r2, #18
 800750e:	9108      	str	r1, [sp, #32]
 8007510:	e7ce      	b.n	80074b0 <_dtoa_r+0x240>
 8007512:	2201      	movs	r2, #1
 8007514:	9207      	str	r2, [sp, #28]
 8007516:	e7f5      	b.n	8007504 <_dtoa_r+0x294>
 8007518:	f8dd a020 	ldr.w	sl, [sp, #32]
 800751c:	46d1      	mov	r9, sl
 800751e:	4652      	mov	r2, sl
 8007520:	e7c6      	b.n	80074b0 <_dtoa_r+0x240>
 8007522:	3101      	adds	r1, #1
 8007524:	6079      	str	r1, [r7, #4]
 8007526:	0040      	lsls	r0, r0, #1
 8007528:	e7c6      	b.n	80074b8 <_dtoa_r+0x248>
 800752a:	bf00      	nop
 800752c:	f3af 8000 	nop.w
 8007530:	636f4361 	.word	0x636f4361
 8007534:	3fd287a7 	.word	0x3fd287a7
 8007538:	8b60c8b3 	.word	0x8b60c8b3
 800753c:	3fc68a28 	.word	0x3fc68a28
 8007540:	509f79fb 	.word	0x509f79fb
 8007544:	3fd34413 	.word	0x3fd34413
 8007548:	08009101 	.word	0x08009101
 800754c:	08009118 	.word	0x08009118
 8007550:	7ff00000 	.word	0x7ff00000
 8007554:	080090fd 	.word	0x080090fd
 8007558:	080090f4 	.word	0x080090f4
 800755c:	080090d1 	.word	0x080090d1
 8007560:	08009268 	.word	0x08009268
 8007564:	08009173 	.word	0x08009173
 8007568:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800756a:	9901      	ldr	r1, [sp, #4]
 800756c:	6011      	str	r1, [r2, #0]
 800756e:	f1b9 0f0e 	cmp.w	r9, #14
 8007572:	d86c      	bhi.n	800764e <_dtoa_r+0x3de>
 8007574:	2c00      	cmp	r4, #0
 8007576:	d06a      	beq.n	800764e <_dtoa_r+0x3de>
 8007578:	f1bb 0f00 	cmp.w	fp, #0
 800757c:	f340 80a0 	ble.w	80076c0 <_dtoa_r+0x450>
 8007580:	49c1      	ldr	r1, [pc, #772]	; (8007888 <_dtoa_r+0x618>)
 8007582:	f00b 020f 	and.w	r2, fp, #15
 8007586:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800758a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800758e:	ed92 7b00 	vldr	d7, [r2]
 8007592:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007596:	f000 8087 	beq.w	80076a8 <_dtoa_r+0x438>
 800759a:	4abc      	ldr	r2, [pc, #752]	; (800788c <_dtoa_r+0x61c>)
 800759c:	ed92 6b08 	vldr	d6, [r2, #32]
 80075a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80075a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80075a8:	f001 010f 	and.w	r1, r1, #15
 80075ac:	2203      	movs	r2, #3
 80075ae:	48b7      	ldr	r0, [pc, #732]	; (800788c <_dtoa_r+0x61c>)
 80075b0:	2900      	cmp	r1, #0
 80075b2:	d17b      	bne.n	80076ac <_dtoa_r+0x43c>
 80075b4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80075b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80075bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80075c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075c2:	2900      	cmp	r1, #0
 80075c4:	f000 80a2 	beq.w	800770c <_dtoa_r+0x49c>
 80075c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80075cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80075d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d8:	f140 8098 	bpl.w	800770c <_dtoa_r+0x49c>
 80075dc:	f1b9 0f00 	cmp.w	r9, #0
 80075e0:	f000 8094 	beq.w	800770c <_dtoa_r+0x49c>
 80075e4:	f1ba 0f00 	cmp.w	sl, #0
 80075e8:	dd2f      	ble.n	800764a <_dtoa_r+0x3da>
 80075ea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80075ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80075f6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80075fa:	3201      	adds	r2, #1
 80075fc:	4650      	mov	r0, sl
 80075fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007602:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007606:	ee07 2a90 	vmov	s15, r2
 800760a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800760e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007612:	ee15 4a90 	vmov	r4, s11
 8007616:	ec52 1b15 	vmov	r1, r2, d5
 800761a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800761e:	2800      	cmp	r0, #0
 8007620:	d177      	bne.n	8007712 <_dtoa_r+0x4a2>
 8007622:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007626:	ee36 6b47 	vsub.f64	d6, d6, d7
 800762a:	ec42 1b17 	vmov	d7, r1, r2
 800762e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007636:	f300 8263 	bgt.w	8007b00 <_dtoa_r+0x890>
 800763a:	eeb1 7b47 	vneg.f64	d7, d7
 800763e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007646:	f100 8258 	bmi.w	8007afa <_dtoa_r+0x88a>
 800764a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800764e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007650:	2a00      	cmp	r2, #0
 8007652:	f2c0 811d 	blt.w	8007890 <_dtoa_r+0x620>
 8007656:	f1bb 0f0e 	cmp.w	fp, #14
 800765a:	f300 8119 	bgt.w	8007890 <_dtoa_r+0x620>
 800765e:	4b8a      	ldr	r3, [pc, #552]	; (8007888 <_dtoa_r+0x618>)
 8007660:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007664:	ed93 6b00 	vldr	d6, [r3]
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f280 80b7 	bge.w	80077de <_dtoa_r+0x56e>
 8007670:	f1b9 0f00 	cmp.w	r9, #0
 8007674:	f300 80b3 	bgt.w	80077de <_dtoa_r+0x56e>
 8007678:	f040 823f 	bne.w	8007afa <_dtoa_r+0x88a>
 800767c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007680:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007684:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007688:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800768c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007690:	464c      	mov	r4, r9
 8007692:	464f      	mov	r7, r9
 8007694:	f280 8215 	bge.w	8007ac2 <_dtoa_r+0x852>
 8007698:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800769c:	2331      	movs	r3, #49	; 0x31
 800769e:	f808 3b01 	strb.w	r3, [r8], #1
 80076a2:	f10b 0b01 	add.w	fp, fp, #1
 80076a6:	e211      	b.n	8007acc <_dtoa_r+0x85c>
 80076a8:	2202      	movs	r2, #2
 80076aa:	e780      	b.n	80075ae <_dtoa_r+0x33e>
 80076ac:	07cc      	lsls	r4, r1, #31
 80076ae:	d504      	bpl.n	80076ba <_dtoa_r+0x44a>
 80076b0:	ed90 6b00 	vldr	d6, [r0]
 80076b4:	3201      	adds	r2, #1
 80076b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076ba:	1049      	asrs	r1, r1, #1
 80076bc:	3008      	adds	r0, #8
 80076be:	e777      	b.n	80075b0 <_dtoa_r+0x340>
 80076c0:	d022      	beq.n	8007708 <_dtoa_r+0x498>
 80076c2:	f1cb 0100 	rsb	r1, fp, #0
 80076c6:	4a70      	ldr	r2, [pc, #448]	; (8007888 <_dtoa_r+0x618>)
 80076c8:	f001 000f 	and.w	r0, r1, #15
 80076cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80076d0:	ed92 7b00 	vldr	d7, [r2]
 80076d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80076d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80076dc:	486b      	ldr	r0, [pc, #428]	; (800788c <_dtoa_r+0x61c>)
 80076de:	1109      	asrs	r1, r1, #4
 80076e0:	2400      	movs	r4, #0
 80076e2:	2202      	movs	r2, #2
 80076e4:	b929      	cbnz	r1, 80076f2 <_dtoa_r+0x482>
 80076e6:	2c00      	cmp	r4, #0
 80076e8:	f43f af6a 	beq.w	80075c0 <_dtoa_r+0x350>
 80076ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80076f0:	e766      	b.n	80075c0 <_dtoa_r+0x350>
 80076f2:	07cf      	lsls	r7, r1, #31
 80076f4:	d505      	bpl.n	8007702 <_dtoa_r+0x492>
 80076f6:	ed90 6b00 	vldr	d6, [r0]
 80076fa:	3201      	adds	r2, #1
 80076fc:	2401      	movs	r4, #1
 80076fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007702:	1049      	asrs	r1, r1, #1
 8007704:	3008      	adds	r0, #8
 8007706:	e7ed      	b.n	80076e4 <_dtoa_r+0x474>
 8007708:	2202      	movs	r2, #2
 800770a:	e759      	b.n	80075c0 <_dtoa_r+0x350>
 800770c:	465f      	mov	r7, fp
 800770e:	4648      	mov	r0, r9
 8007710:	e775      	b.n	80075fe <_dtoa_r+0x38e>
 8007712:	ec42 1b17 	vmov	d7, r1, r2
 8007716:	4a5c      	ldr	r2, [pc, #368]	; (8007888 <_dtoa_r+0x618>)
 8007718:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800771c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007720:	9a01      	ldr	r2, [sp, #4]
 8007722:	1814      	adds	r4, r2, r0
 8007724:	9a07      	ldr	r2, [sp, #28]
 8007726:	b352      	cbz	r2, 800777e <_dtoa_r+0x50e>
 8007728:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800772c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007730:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007734:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007738:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800773c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007740:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007744:	ee14 2a90 	vmov	r2, s9
 8007748:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800774c:	3230      	adds	r2, #48	; 0x30
 800774e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007752:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775a:	f808 2b01 	strb.w	r2, [r8], #1
 800775e:	d439      	bmi.n	80077d4 <_dtoa_r+0x564>
 8007760:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007764:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776c:	d472      	bmi.n	8007854 <_dtoa_r+0x5e4>
 800776e:	45a0      	cmp	r8, r4
 8007770:	f43f af6b 	beq.w	800764a <_dtoa_r+0x3da>
 8007774:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007778:	ee26 6b03 	vmul.f64	d6, d6, d3
 800777c:	e7e0      	b.n	8007740 <_dtoa_r+0x4d0>
 800777e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007782:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007786:	4621      	mov	r1, r4
 8007788:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800778c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007790:	ee14 2a90 	vmov	r2, s9
 8007794:	3230      	adds	r2, #48	; 0x30
 8007796:	f808 2b01 	strb.w	r2, [r8], #1
 800779a:	45a0      	cmp	r8, r4
 800779c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80077a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80077a4:	d118      	bne.n	80077d8 <_dtoa_r+0x568>
 80077a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80077aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80077ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	dc4d      	bgt.n	8007854 <_dtoa_r+0x5e4>
 80077b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80077bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c4:	f57f af41 	bpl.w	800764a <_dtoa_r+0x3da>
 80077c8:	4688      	mov	r8, r1
 80077ca:	3901      	subs	r1, #1
 80077cc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80077d0:	2b30      	cmp	r3, #48	; 0x30
 80077d2:	d0f9      	beq.n	80077c8 <_dtoa_r+0x558>
 80077d4:	46bb      	mov	fp, r7
 80077d6:	e02a      	b.n	800782e <_dtoa_r+0x5be>
 80077d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80077dc:	e7d6      	b.n	800778c <_dtoa_r+0x51c>
 80077de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80077e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80077ea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80077ee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80077f2:	ee15 3a10 	vmov	r3, s10
 80077f6:	3330      	adds	r3, #48	; 0x30
 80077f8:	f808 3b01 	strb.w	r3, [r8], #1
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	eba8 0303 	sub.w	r3, r8, r3
 8007802:	4599      	cmp	r9, r3
 8007804:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007808:	eea3 7b46 	vfms.f64	d7, d3, d6
 800780c:	d133      	bne.n	8007876 <_dtoa_r+0x606>
 800780e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007812:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781a:	dc1a      	bgt.n	8007852 <_dtoa_r+0x5e2>
 800781c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007824:	d103      	bne.n	800782e <_dtoa_r+0x5be>
 8007826:	ee15 3a10 	vmov	r3, s10
 800782a:	07d9      	lsls	r1, r3, #31
 800782c:	d411      	bmi.n	8007852 <_dtoa_r+0x5e2>
 800782e:	4629      	mov	r1, r5
 8007830:	4630      	mov	r0, r6
 8007832:	f000 fd05 	bl	8008240 <_Bfree>
 8007836:	2300      	movs	r3, #0
 8007838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800783a:	f888 3000 	strb.w	r3, [r8]
 800783e:	f10b 0301 	add.w	r3, fp, #1
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007846:	2b00      	cmp	r3, #0
 8007848:	f43f ad61 	beq.w	800730e <_dtoa_r+0x9e>
 800784c:	f8c3 8000 	str.w	r8, [r3]
 8007850:	e55d      	b.n	800730e <_dtoa_r+0x9e>
 8007852:	465f      	mov	r7, fp
 8007854:	4643      	mov	r3, r8
 8007856:	4698      	mov	r8, r3
 8007858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800785c:	2a39      	cmp	r2, #57	; 0x39
 800785e:	d106      	bne.n	800786e <_dtoa_r+0x5fe>
 8007860:	9a01      	ldr	r2, [sp, #4]
 8007862:	429a      	cmp	r2, r3
 8007864:	d1f7      	bne.n	8007856 <_dtoa_r+0x5e6>
 8007866:	9901      	ldr	r1, [sp, #4]
 8007868:	2230      	movs	r2, #48	; 0x30
 800786a:	3701      	adds	r7, #1
 800786c:	700a      	strb	r2, [r1, #0]
 800786e:	781a      	ldrb	r2, [r3, #0]
 8007870:	3201      	adds	r2, #1
 8007872:	701a      	strb	r2, [r3, #0]
 8007874:	e7ae      	b.n	80077d4 <_dtoa_r+0x564>
 8007876:	ee27 7b04 	vmul.f64	d7, d7, d4
 800787a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800787e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007882:	d1b2      	bne.n	80077ea <_dtoa_r+0x57a>
 8007884:	e7d3      	b.n	800782e <_dtoa_r+0x5be>
 8007886:	bf00      	nop
 8007888:	08009268 	.word	0x08009268
 800788c:	08009240 	.word	0x08009240
 8007890:	9907      	ldr	r1, [sp, #28]
 8007892:	2900      	cmp	r1, #0
 8007894:	f000 80d0 	beq.w	8007a38 <_dtoa_r+0x7c8>
 8007898:	9906      	ldr	r1, [sp, #24]
 800789a:	2901      	cmp	r1, #1
 800789c:	f300 80b4 	bgt.w	8007a08 <_dtoa_r+0x798>
 80078a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078a2:	2900      	cmp	r1, #0
 80078a4:	f000 80ac 	beq.w	8007a00 <_dtoa_r+0x790>
 80078a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80078ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80078b0:	461c      	mov	r4, r3
 80078b2:	930a      	str	r3, [sp, #40]	; 0x28
 80078b4:	9b04      	ldr	r3, [sp, #16]
 80078b6:	4413      	add	r3, r2
 80078b8:	9304      	str	r3, [sp, #16]
 80078ba:	9b05      	ldr	r3, [sp, #20]
 80078bc:	2101      	movs	r1, #1
 80078be:	4413      	add	r3, r2
 80078c0:	4630      	mov	r0, r6
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	f000 fd74 	bl	80083b0 <__i2b>
 80078c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ca:	4607      	mov	r7, r0
 80078cc:	f1b8 0f00 	cmp.w	r8, #0
 80078d0:	dd0d      	ble.n	80078ee <_dtoa_r+0x67e>
 80078d2:	9a05      	ldr	r2, [sp, #20]
 80078d4:	2a00      	cmp	r2, #0
 80078d6:	dd0a      	ble.n	80078ee <_dtoa_r+0x67e>
 80078d8:	4542      	cmp	r2, r8
 80078da:	9904      	ldr	r1, [sp, #16]
 80078dc:	bfa8      	it	ge
 80078de:	4642      	movge	r2, r8
 80078e0:	1a89      	subs	r1, r1, r2
 80078e2:	9104      	str	r1, [sp, #16]
 80078e4:	9905      	ldr	r1, [sp, #20]
 80078e6:	eba8 0802 	sub.w	r8, r8, r2
 80078ea:	1a8a      	subs	r2, r1, r2
 80078ec:	9205      	str	r2, [sp, #20]
 80078ee:	b303      	cbz	r3, 8007932 <_dtoa_r+0x6c2>
 80078f0:	9a07      	ldr	r2, [sp, #28]
 80078f2:	2a00      	cmp	r2, #0
 80078f4:	f000 80a5 	beq.w	8007a42 <_dtoa_r+0x7d2>
 80078f8:	2c00      	cmp	r4, #0
 80078fa:	dd13      	ble.n	8007924 <_dtoa_r+0x6b4>
 80078fc:	4639      	mov	r1, r7
 80078fe:	4622      	mov	r2, r4
 8007900:	4630      	mov	r0, r6
 8007902:	930d      	str	r3, [sp, #52]	; 0x34
 8007904:	f000 fe14 	bl	8008530 <__pow5mult>
 8007908:	462a      	mov	r2, r5
 800790a:	4601      	mov	r1, r0
 800790c:	4607      	mov	r7, r0
 800790e:	4630      	mov	r0, r6
 8007910:	f000 fd64 	bl	80083dc <__multiply>
 8007914:	4629      	mov	r1, r5
 8007916:	900a      	str	r0, [sp, #40]	; 0x28
 8007918:	4630      	mov	r0, r6
 800791a:	f000 fc91 	bl	8008240 <_Bfree>
 800791e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007922:	4615      	mov	r5, r2
 8007924:	1b1a      	subs	r2, r3, r4
 8007926:	d004      	beq.n	8007932 <_dtoa_r+0x6c2>
 8007928:	4629      	mov	r1, r5
 800792a:	4630      	mov	r0, r6
 800792c:	f000 fe00 	bl	8008530 <__pow5mult>
 8007930:	4605      	mov	r5, r0
 8007932:	2101      	movs	r1, #1
 8007934:	4630      	mov	r0, r6
 8007936:	f000 fd3b 	bl	80083b0 <__i2b>
 800793a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	4604      	mov	r4, r0
 8007940:	f340 8081 	ble.w	8007a46 <_dtoa_r+0x7d6>
 8007944:	461a      	mov	r2, r3
 8007946:	4601      	mov	r1, r0
 8007948:	4630      	mov	r0, r6
 800794a:	f000 fdf1 	bl	8008530 <__pow5mult>
 800794e:	9b06      	ldr	r3, [sp, #24]
 8007950:	2b01      	cmp	r3, #1
 8007952:	4604      	mov	r4, r0
 8007954:	dd7a      	ble.n	8007a4c <_dtoa_r+0x7dc>
 8007956:	2300      	movs	r3, #0
 8007958:	930a      	str	r3, [sp, #40]	; 0x28
 800795a:	6922      	ldr	r2, [r4, #16]
 800795c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007960:	6910      	ldr	r0, [r2, #16]
 8007962:	f000 fcd5 	bl	8008310 <__hi0bits>
 8007966:	f1c0 0020 	rsb	r0, r0, #32
 800796a:	9b05      	ldr	r3, [sp, #20]
 800796c:	4418      	add	r0, r3
 800796e:	f010 001f 	ands.w	r0, r0, #31
 8007972:	f000 808c 	beq.w	8007a8e <_dtoa_r+0x81e>
 8007976:	f1c0 0220 	rsb	r2, r0, #32
 800797a:	2a04      	cmp	r2, #4
 800797c:	f340 8085 	ble.w	8007a8a <_dtoa_r+0x81a>
 8007980:	f1c0 001c 	rsb	r0, r0, #28
 8007984:	9b04      	ldr	r3, [sp, #16]
 8007986:	4403      	add	r3, r0
 8007988:	9304      	str	r3, [sp, #16]
 800798a:	9b05      	ldr	r3, [sp, #20]
 800798c:	4403      	add	r3, r0
 800798e:	4480      	add	r8, r0
 8007990:	9305      	str	r3, [sp, #20]
 8007992:	9b04      	ldr	r3, [sp, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	dd05      	ble.n	80079a4 <_dtoa_r+0x734>
 8007998:	4629      	mov	r1, r5
 800799a:	461a      	mov	r2, r3
 800799c:	4630      	mov	r0, r6
 800799e:	f000 fe21 	bl	80085e4 <__lshift>
 80079a2:	4605      	mov	r5, r0
 80079a4:	9b05      	ldr	r3, [sp, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	dd05      	ble.n	80079b6 <_dtoa_r+0x746>
 80079aa:	4621      	mov	r1, r4
 80079ac:	461a      	mov	r2, r3
 80079ae:	4630      	mov	r0, r6
 80079b0:	f000 fe18 	bl	80085e4 <__lshift>
 80079b4:	4604      	mov	r4, r0
 80079b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d06a      	beq.n	8007a92 <_dtoa_r+0x822>
 80079bc:	4621      	mov	r1, r4
 80079be:	4628      	mov	r0, r5
 80079c0:	f000 fe80 	bl	80086c4 <__mcmp>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	da64      	bge.n	8007a92 <_dtoa_r+0x822>
 80079c8:	2300      	movs	r3, #0
 80079ca:	4629      	mov	r1, r5
 80079cc:	220a      	movs	r2, #10
 80079ce:	4630      	mov	r0, r6
 80079d0:	f000 fc58 	bl	8008284 <__multadd>
 80079d4:	9b07      	ldr	r3, [sp, #28]
 80079d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079da:	4605      	mov	r5, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8191 	beq.w	8007d04 <_dtoa_r+0xa94>
 80079e2:	4639      	mov	r1, r7
 80079e4:	2300      	movs	r3, #0
 80079e6:	220a      	movs	r2, #10
 80079e8:	4630      	mov	r0, r6
 80079ea:	f000 fc4b 	bl	8008284 <__multadd>
 80079ee:	f1ba 0f00 	cmp.w	sl, #0
 80079f2:	4607      	mov	r7, r0
 80079f4:	f300 808d 	bgt.w	8007b12 <_dtoa_r+0x8a2>
 80079f8:	9b06      	ldr	r3, [sp, #24]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	dc50      	bgt.n	8007aa0 <_dtoa_r+0x830>
 80079fe:	e088      	b.n	8007b12 <_dtoa_r+0x8a2>
 8007a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a02:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a06:	e751      	b.n	80078ac <_dtoa_r+0x63c>
 8007a08:	f109 34ff 	add.w	r4, r9, #4294967295
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	bfbf      	itttt	lt
 8007a10:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007a12:	1ae3      	sublt	r3, r4, r3
 8007a14:	18d2      	addlt	r2, r2, r3
 8007a16:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007a18:	bfb6      	itet	lt
 8007a1a:	4623      	movlt	r3, r4
 8007a1c:	1b1c      	subge	r4, r3, r4
 8007a1e:	2400      	movlt	r4, #0
 8007a20:	f1b9 0f00 	cmp.w	r9, #0
 8007a24:	bfb5      	itete	lt
 8007a26:	9a04      	ldrlt	r2, [sp, #16]
 8007a28:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007a2c:	eba2 0809 	sublt.w	r8, r2, r9
 8007a30:	464a      	movge	r2, r9
 8007a32:	bfb8      	it	lt
 8007a34:	2200      	movlt	r2, #0
 8007a36:	e73c      	b.n	80078b2 <_dtoa_r+0x642>
 8007a38:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007a3c:	9f07      	ldr	r7, [sp, #28]
 8007a3e:	461c      	mov	r4, r3
 8007a40:	e744      	b.n	80078cc <_dtoa_r+0x65c>
 8007a42:	461a      	mov	r2, r3
 8007a44:	e770      	b.n	8007928 <_dtoa_r+0x6b8>
 8007a46:	9b06      	ldr	r3, [sp, #24]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	dc18      	bgt.n	8007a7e <_dtoa_r+0x80e>
 8007a4c:	9b02      	ldr	r3, [sp, #8]
 8007a4e:	b9b3      	cbnz	r3, 8007a7e <_dtoa_r+0x80e>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007a56:	b9a2      	cbnz	r2, 8007a82 <_dtoa_r+0x812>
 8007a58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a5c:	0d12      	lsrs	r2, r2, #20
 8007a5e:	0512      	lsls	r2, r2, #20
 8007a60:	b18a      	cbz	r2, 8007a86 <_dtoa_r+0x816>
 8007a62:	9b04      	ldr	r3, [sp, #16]
 8007a64:	3301      	adds	r3, #1
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	9b05      	ldr	r3, [sp, #20]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	9305      	str	r3, [sp, #20]
 8007a6e:	2301      	movs	r3, #1
 8007a70:	930a      	str	r3, [sp, #40]	; 0x28
 8007a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f47f af70 	bne.w	800795a <_dtoa_r+0x6ea>
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e775      	b.n	800796a <_dtoa_r+0x6fa>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e7f6      	b.n	8007a70 <_dtoa_r+0x800>
 8007a82:	9b02      	ldr	r3, [sp, #8]
 8007a84:	e7f4      	b.n	8007a70 <_dtoa_r+0x800>
 8007a86:	920a      	str	r2, [sp, #40]	; 0x28
 8007a88:	e7f3      	b.n	8007a72 <_dtoa_r+0x802>
 8007a8a:	d082      	beq.n	8007992 <_dtoa_r+0x722>
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	301c      	adds	r0, #28
 8007a90:	e778      	b.n	8007984 <_dtoa_r+0x714>
 8007a92:	f1b9 0f00 	cmp.w	r9, #0
 8007a96:	dc37      	bgt.n	8007b08 <_dtoa_r+0x898>
 8007a98:	9b06      	ldr	r3, [sp, #24]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	dd34      	ble.n	8007b08 <_dtoa_r+0x898>
 8007a9e:	46ca      	mov	sl, r9
 8007aa0:	f1ba 0f00 	cmp.w	sl, #0
 8007aa4:	d10d      	bne.n	8007ac2 <_dtoa_r+0x852>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4653      	mov	r3, sl
 8007aaa:	2205      	movs	r2, #5
 8007aac:	4630      	mov	r0, r6
 8007aae:	f000 fbe9 	bl	8008284 <__multadd>
 8007ab2:	4601      	mov	r1, r0
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f000 fe04 	bl	80086c4 <__mcmp>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f73f adeb 	bgt.w	8007698 <_dtoa_r+0x428>
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ac8:	ea6f 0b03 	mvn.w	fp, r3
 8007acc:	f04f 0900 	mov.w	r9, #0
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f000 fbb4 	bl	8008240 <_Bfree>
 8007ad8:	2f00      	cmp	r7, #0
 8007ada:	f43f aea8 	beq.w	800782e <_dtoa_r+0x5be>
 8007ade:	f1b9 0f00 	cmp.w	r9, #0
 8007ae2:	d005      	beq.n	8007af0 <_dtoa_r+0x880>
 8007ae4:	45b9      	cmp	r9, r7
 8007ae6:	d003      	beq.n	8007af0 <_dtoa_r+0x880>
 8007ae8:	4649      	mov	r1, r9
 8007aea:	4630      	mov	r0, r6
 8007aec:	f000 fba8 	bl	8008240 <_Bfree>
 8007af0:	4639      	mov	r1, r7
 8007af2:	4630      	mov	r0, r6
 8007af4:	f000 fba4 	bl	8008240 <_Bfree>
 8007af8:	e699      	b.n	800782e <_dtoa_r+0x5be>
 8007afa:	2400      	movs	r4, #0
 8007afc:	4627      	mov	r7, r4
 8007afe:	e7e0      	b.n	8007ac2 <_dtoa_r+0x852>
 8007b00:	46bb      	mov	fp, r7
 8007b02:	4604      	mov	r4, r0
 8007b04:	4607      	mov	r7, r0
 8007b06:	e5c7      	b.n	8007698 <_dtoa_r+0x428>
 8007b08:	9b07      	ldr	r3, [sp, #28]
 8007b0a:	46ca      	mov	sl, r9
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8100 	beq.w	8007d12 <_dtoa_r+0xaa2>
 8007b12:	f1b8 0f00 	cmp.w	r8, #0
 8007b16:	dd05      	ble.n	8007b24 <_dtoa_r+0x8b4>
 8007b18:	4639      	mov	r1, r7
 8007b1a:	4642      	mov	r2, r8
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f000 fd61 	bl	80085e4 <__lshift>
 8007b22:	4607      	mov	r7, r0
 8007b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d05d      	beq.n	8007be6 <_dtoa_r+0x976>
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f000 fb47 	bl	80081c0 <_Balloc>
 8007b32:	4680      	mov	r8, r0
 8007b34:	b928      	cbnz	r0, 8007b42 <_dtoa_r+0x8d2>
 8007b36:	4b82      	ldr	r3, [pc, #520]	; (8007d40 <_dtoa_r+0xad0>)
 8007b38:	4602      	mov	r2, r0
 8007b3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b3e:	f7ff bbaf 	b.w	80072a0 <_dtoa_r+0x30>
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	3202      	adds	r2, #2
 8007b46:	0092      	lsls	r2, r2, #2
 8007b48:	f107 010c 	add.w	r1, r7, #12
 8007b4c:	300c      	adds	r0, #12
 8007b4e:	f000 fb29 	bl	80081a4 <memcpy>
 8007b52:	2201      	movs	r2, #1
 8007b54:	4641      	mov	r1, r8
 8007b56:	4630      	mov	r0, r6
 8007b58:	f000 fd44 	bl	80085e4 <__lshift>
 8007b5c:	9b01      	ldr	r3, [sp, #4]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	9b01      	ldr	r3, [sp, #4]
 8007b64:	4453      	add	r3, sl
 8007b66:	9308      	str	r3, [sp, #32]
 8007b68:	9b02      	ldr	r3, [sp, #8]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	46b9      	mov	r9, r7
 8007b70:	9307      	str	r3, [sp, #28]
 8007b72:	4607      	mov	r7, r0
 8007b74:	9b04      	ldr	r3, [sp, #16]
 8007b76:	4621      	mov	r1, r4
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	9302      	str	r3, [sp, #8]
 8007b7e:	f7ff faeb 	bl	8007158 <quorem>
 8007b82:	4603      	mov	r3, r0
 8007b84:	3330      	adds	r3, #48	; 0x30
 8007b86:	9005      	str	r0, [sp, #20]
 8007b88:	4649      	mov	r1, r9
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8e:	f000 fd99 	bl	80086c4 <__mcmp>
 8007b92:	463a      	mov	r2, r7
 8007b94:	4682      	mov	sl, r0
 8007b96:	4621      	mov	r1, r4
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f000 fdaf 	bl	80086fc <__mdiff>
 8007b9e:	68c2      	ldr	r2, [r0, #12]
 8007ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba2:	4680      	mov	r8, r0
 8007ba4:	bb0a      	cbnz	r2, 8007bea <_dtoa_r+0x97a>
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 fd8b 	bl	80086c4 <__mcmp>
 8007bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	4641      	mov	r1, r8
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007bba:	f000 fb41 	bl	8008240 <_Bfree>
 8007bbe:	9b06      	ldr	r3, [sp, #24]
 8007bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bc2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007bc6:	ea43 0102 	orr.w	r1, r3, r2
 8007bca:	9b07      	ldr	r3, [sp, #28]
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd0:	d10d      	bne.n	8007bee <_dtoa_r+0x97e>
 8007bd2:	2b39      	cmp	r3, #57	; 0x39
 8007bd4:	d029      	beq.n	8007c2a <_dtoa_r+0x9ba>
 8007bd6:	f1ba 0f00 	cmp.w	sl, #0
 8007bda:	dd01      	ble.n	8007be0 <_dtoa_r+0x970>
 8007bdc:	9b05      	ldr	r3, [sp, #20]
 8007bde:	3331      	adds	r3, #49	; 0x31
 8007be0:	9a02      	ldr	r2, [sp, #8]
 8007be2:	7013      	strb	r3, [r2, #0]
 8007be4:	e774      	b.n	8007ad0 <_dtoa_r+0x860>
 8007be6:	4638      	mov	r0, r7
 8007be8:	e7b8      	b.n	8007b5c <_dtoa_r+0x8ec>
 8007bea:	2201      	movs	r2, #1
 8007bec:	e7e1      	b.n	8007bb2 <_dtoa_r+0x942>
 8007bee:	f1ba 0f00 	cmp.w	sl, #0
 8007bf2:	db06      	blt.n	8007c02 <_dtoa_r+0x992>
 8007bf4:	9906      	ldr	r1, [sp, #24]
 8007bf6:	ea41 0a0a 	orr.w	sl, r1, sl
 8007bfa:	9907      	ldr	r1, [sp, #28]
 8007bfc:	ea5a 0101 	orrs.w	r1, sl, r1
 8007c00:	d120      	bne.n	8007c44 <_dtoa_r+0x9d4>
 8007c02:	2a00      	cmp	r2, #0
 8007c04:	ddec      	ble.n	8007be0 <_dtoa_r+0x970>
 8007c06:	4629      	mov	r1, r5
 8007c08:	2201      	movs	r2, #1
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	9304      	str	r3, [sp, #16]
 8007c0e:	f000 fce9 	bl	80085e4 <__lshift>
 8007c12:	4621      	mov	r1, r4
 8007c14:	4605      	mov	r5, r0
 8007c16:	f000 fd55 	bl	80086c4 <__mcmp>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	9b04      	ldr	r3, [sp, #16]
 8007c1e:	dc02      	bgt.n	8007c26 <_dtoa_r+0x9b6>
 8007c20:	d1de      	bne.n	8007be0 <_dtoa_r+0x970>
 8007c22:	07da      	lsls	r2, r3, #31
 8007c24:	d5dc      	bpl.n	8007be0 <_dtoa_r+0x970>
 8007c26:	2b39      	cmp	r3, #57	; 0x39
 8007c28:	d1d8      	bne.n	8007bdc <_dtoa_r+0x96c>
 8007c2a:	9a02      	ldr	r2, [sp, #8]
 8007c2c:	2339      	movs	r3, #57	; 0x39
 8007c2e:	7013      	strb	r3, [r2, #0]
 8007c30:	4643      	mov	r3, r8
 8007c32:	4698      	mov	r8, r3
 8007c34:	3b01      	subs	r3, #1
 8007c36:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007c3a:	2a39      	cmp	r2, #57	; 0x39
 8007c3c:	d051      	beq.n	8007ce2 <_dtoa_r+0xa72>
 8007c3e:	3201      	adds	r2, #1
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	e745      	b.n	8007ad0 <_dtoa_r+0x860>
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	dd03      	ble.n	8007c50 <_dtoa_r+0x9e0>
 8007c48:	2b39      	cmp	r3, #57	; 0x39
 8007c4a:	d0ee      	beq.n	8007c2a <_dtoa_r+0x9ba>
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	e7c7      	b.n	8007be0 <_dtoa_r+0x970>
 8007c50:	9a04      	ldr	r2, [sp, #16]
 8007c52:	9908      	ldr	r1, [sp, #32]
 8007c54:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c58:	428a      	cmp	r2, r1
 8007c5a:	d02b      	beq.n	8007cb4 <_dtoa_r+0xa44>
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	2300      	movs	r3, #0
 8007c60:	220a      	movs	r2, #10
 8007c62:	4630      	mov	r0, r6
 8007c64:	f000 fb0e 	bl	8008284 <__multadd>
 8007c68:	45b9      	cmp	r9, r7
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	f04f 020a 	mov.w	r2, #10
 8007c74:	4649      	mov	r1, r9
 8007c76:	4630      	mov	r0, r6
 8007c78:	d107      	bne.n	8007c8a <_dtoa_r+0xa1a>
 8007c7a:	f000 fb03 	bl	8008284 <__multadd>
 8007c7e:	4681      	mov	r9, r0
 8007c80:	4607      	mov	r7, r0
 8007c82:	9b04      	ldr	r3, [sp, #16]
 8007c84:	3301      	adds	r3, #1
 8007c86:	9304      	str	r3, [sp, #16]
 8007c88:	e774      	b.n	8007b74 <_dtoa_r+0x904>
 8007c8a:	f000 fafb 	bl	8008284 <__multadd>
 8007c8e:	4639      	mov	r1, r7
 8007c90:	4681      	mov	r9, r0
 8007c92:	2300      	movs	r3, #0
 8007c94:	220a      	movs	r2, #10
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 faf4 	bl	8008284 <__multadd>
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	e7f0      	b.n	8007c82 <_dtoa_r+0xa12>
 8007ca0:	f1ba 0f00 	cmp.w	sl, #0
 8007ca4:	9a01      	ldr	r2, [sp, #4]
 8007ca6:	bfcc      	ite	gt
 8007ca8:	46d0      	movgt	r8, sl
 8007caa:	f04f 0801 	movle.w	r8, #1
 8007cae:	4490      	add	r8, r2
 8007cb0:	f04f 0900 	mov.w	r9, #0
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	4630      	mov	r0, r6
 8007cba:	9302      	str	r3, [sp, #8]
 8007cbc:	f000 fc92 	bl	80085e4 <__lshift>
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	f000 fcfe 	bl	80086c4 <__mcmp>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	dcb1      	bgt.n	8007c30 <_dtoa_r+0x9c0>
 8007ccc:	d102      	bne.n	8007cd4 <_dtoa_r+0xa64>
 8007cce:	9b02      	ldr	r3, [sp, #8]
 8007cd0:	07db      	lsls	r3, r3, #31
 8007cd2:	d4ad      	bmi.n	8007c30 <_dtoa_r+0x9c0>
 8007cd4:	4643      	mov	r3, r8
 8007cd6:	4698      	mov	r8, r3
 8007cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cdc:	2a30      	cmp	r2, #48	; 0x30
 8007cde:	d0fa      	beq.n	8007cd6 <_dtoa_r+0xa66>
 8007ce0:	e6f6      	b.n	8007ad0 <_dtoa_r+0x860>
 8007ce2:	9a01      	ldr	r2, [sp, #4]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d1a4      	bne.n	8007c32 <_dtoa_r+0x9c2>
 8007ce8:	f10b 0b01 	add.w	fp, fp, #1
 8007cec:	2331      	movs	r3, #49	; 0x31
 8007cee:	e778      	b.n	8007be2 <_dtoa_r+0x972>
 8007cf0:	4b14      	ldr	r3, [pc, #80]	; (8007d44 <_dtoa_r+0xad4>)
 8007cf2:	f7ff bb27 	b.w	8007344 <_dtoa_r+0xd4>
 8007cf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f47f ab03 	bne.w	8007304 <_dtoa_r+0x94>
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <_dtoa_r+0xad8>)
 8007d00:	f7ff bb20 	b.w	8007344 <_dtoa_r+0xd4>
 8007d04:	f1ba 0f00 	cmp.w	sl, #0
 8007d08:	dc03      	bgt.n	8007d12 <_dtoa_r+0xaa2>
 8007d0a:	9b06      	ldr	r3, [sp, #24]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	f73f aec7 	bgt.w	8007aa0 <_dtoa_r+0x830>
 8007d12:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d16:	4621      	mov	r1, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f7ff fa1d 	bl	8007158 <quorem>
 8007d1e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007d22:	f808 3b01 	strb.w	r3, [r8], #1
 8007d26:	9a01      	ldr	r2, [sp, #4]
 8007d28:	eba8 0202 	sub.w	r2, r8, r2
 8007d2c:	4592      	cmp	sl, r2
 8007d2e:	ddb7      	ble.n	8007ca0 <_dtoa_r+0xa30>
 8007d30:	4629      	mov	r1, r5
 8007d32:	2300      	movs	r3, #0
 8007d34:	220a      	movs	r2, #10
 8007d36:	4630      	mov	r0, r6
 8007d38:	f000 faa4 	bl	8008284 <__multadd>
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	e7ea      	b.n	8007d16 <_dtoa_r+0xaa6>
 8007d40:	08009173 	.word	0x08009173
 8007d44:	080090d0 	.word	0x080090d0
 8007d48:	080090f4 	.word	0x080090f4

08007d4c <__sflush_r>:
 8007d4c:	898a      	ldrh	r2, [r1, #12]
 8007d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d52:	4605      	mov	r5, r0
 8007d54:	0710      	lsls	r0, r2, #28
 8007d56:	460c      	mov	r4, r1
 8007d58:	d458      	bmi.n	8007e0c <__sflush_r+0xc0>
 8007d5a:	684b      	ldr	r3, [r1, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dc05      	bgt.n	8007d6c <__sflush_r+0x20>
 8007d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dc02      	bgt.n	8007d6c <__sflush_r+0x20>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d6e:	2e00      	cmp	r6, #0
 8007d70:	d0f9      	beq.n	8007d66 <__sflush_r+0x1a>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d78:	682f      	ldr	r7, [r5, #0]
 8007d7a:	602b      	str	r3, [r5, #0]
 8007d7c:	d032      	beq.n	8007de4 <__sflush_r+0x98>
 8007d7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d80:	89a3      	ldrh	r3, [r4, #12]
 8007d82:	075a      	lsls	r2, r3, #29
 8007d84:	d505      	bpl.n	8007d92 <__sflush_r+0x46>
 8007d86:	6863      	ldr	r3, [r4, #4]
 8007d88:	1ac0      	subs	r0, r0, r3
 8007d8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d8c:	b10b      	cbz	r3, 8007d92 <__sflush_r+0x46>
 8007d8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d90:	1ac0      	subs	r0, r0, r3
 8007d92:	2300      	movs	r3, #0
 8007d94:	4602      	mov	r2, r0
 8007d96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d98:	6a21      	ldr	r1, [r4, #32]
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	47b0      	blx	r6
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	d106      	bne.n	8007db2 <__sflush_r+0x66>
 8007da4:	6829      	ldr	r1, [r5, #0]
 8007da6:	291d      	cmp	r1, #29
 8007da8:	d82c      	bhi.n	8007e04 <__sflush_r+0xb8>
 8007daa:	4a2a      	ldr	r2, [pc, #168]	; (8007e54 <__sflush_r+0x108>)
 8007dac:	40ca      	lsrs	r2, r1
 8007dae:	07d6      	lsls	r6, r2, #31
 8007db0:	d528      	bpl.n	8007e04 <__sflush_r+0xb8>
 8007db2:	2200      	movs	r2, #0
 8007db4:	6062      	str	r2, [r4, #4]
 8007db6:	04d9      	lsls	r1, r3, #19
 8007db8:	6922      	ldr	r2, [r4, #16]
 8007dba:	6022      	str	r2, [r4, #0]
 8007dbc:	d504      	bpl.n	8007dc8 <__sflush_r+0x7c>
 8007dbe:	1c42      	adds	r2, r0, #1
 8007dc0:	d101      	bne.n	8007dc6 <__sflush_r+0x7a>
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	b903      	cbnz	r3, 8007dc8 <__sflush_r+0x7c>
 8007dc6:	6560      	str	r0, [r4, #84]	; 0x54
 8007dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dca:	602f      	str	r7, [r5, #0]
 8007dcc:	2900      	cmp	r1, #0
 8007dce:	d0ca      	beq.n	8007d66 <__sflush_r+0x1a>
 8007dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd4:	4299      	cmp	r1, r3
 8007dd6:	d002      	beq.n	8007dde <__sflush_r+0x92>
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 fd8b 	bl	80088f4 <_free_r>
 8007dde:	2000      	movs	r0, #0
 8007de0:	6360      	str	r0, [r4, #52]	; 0x34
 8007de2:	e7c1      	b.n	8007d68 <__sflush_r+0x1c>
 8007de4:	6a21      	ldr	r1, [r4, #32]
 8007de6:	2301      	movs	r3, #1
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b0      	blx	r6
 8007dec:	1c41      	adds	r1, r0, #1
 8007dee:	d1c7      	bne.n	8007d80 <__sflush_r+0x34>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0c4      	beq.n	8007d80 <__sflush_r+0x34>
 8007df6:	2b1d      	cmp	r3, #29
 8007df8:	d001      	beq.n	8007dfe <__sflush_r+0xb2>
 8007dfa:	2b16      	cmp	r3, #22
 8007dfc:	d101      	bne.n	8007e02 <__sflush_r+0xb6>
 8007dfe:	602f      	str	r7, [r5, #0]
 8007e00:	e7b1      	b.n	8007d66 <__sflush_r+0x1a>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e08:	81a3      	strh	r3, [r4, #12]
 8007e0a:	e7ad      	b.n	8007d68 <__sflush_r+0x1c>
 8007e0c:	690f      	ldr	r7, [r1, #16]
 8007e0e:	2f00      	cmp	r7, #0
 8007e10:	d0a9      	beq.n	8007d66 <__sflush_r+0x1a>
 8007e12:	0793      	lsls	r3, r2, #30
 8007e14:	680e      	ldr	r6, [r1, #0]
 8007e16:	bf08      	it	eq
 8007e18:	694b      	ldreq	r3, [r1, #20]
 8007e1a:	600f      	str	r7, [r1, #0]
 8007e1c:	bf18      	it	ne
 8007e1e:	2300      	movne	r3, #0
 8007e20:	eba6 0807 	sub.w	r8, r6, r7
 8007e24:	608b      	str	r3, [r1, #8]
 8007e26:	f1b8 0f00 	cmp.w	r8, #0
 8007e2a:	dd9c      	ble.n	8007d66 <__sflush_r+0x1a>
 8007e2c:	6a21      	ldr	r1, [r4, #32]
 8007e2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e30:	4643      	mov	r3, r8
 8007e32:	463a      	mov	r2, r7
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b0      	blx	r6
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	dc06      	bgt.n	8007e4a <__sflush_r+0xfe>
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e42:	81a3      	strh	r3, [r4, #12]
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295
 8007e48:	e78e      	b.n	8007d68 <__sflush_r+0x1c>
 8007e4a:	4407      	add	r7, r0
 8007e4c:	eba8 0800 	sub.w	r8, r8, r0
 8007e50:	e7e9      	b.n	8007e26 <__sflush_r+0xda>
 8007e52:	bf00      	nop
 8007e54:	20400001 	.word	0x20400001

08007e58 <_fflush_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	690b      	ldr	r3, [r1, #16]
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	b913      	cbnz	r3, 8007e68 <_fflush_r+0x10>
 8007e62:	2500      	movs	r5, #0
 8007e64:	4628      	mov	r0, r5
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	b118      	cbz	r0, 8007e72 <_fflush_r+0x1a>
 8007e6a:	6983      	ldr	r3, [r0, #24]
 8007e6c:	b90b      	cbnz	r3, 8007e72 <_fflush_r+0x1a>
 8007e6e:	f000 f887 	bl	8007f80 <__sinit>
 8007e72:	4b14      	ldr	r3, [pc, #80]	; (8007ec4 <_fflush_r+0x6c>)
 8007e74:	429c      	cmp	r4, r3
 8007e76:	d11b      	bne.n	8007eb0 <_fflush_r+0x58>
 8007e78:	686c      	ldr	r4, [r5, #4]
 8007e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0ef      	beq.n	8007e62 <_fflush_r+0xa>
 8007e82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e84:	07d0      	lsls	r0, r2, #31
 8007e86:	d404      	bmi.n	8007e92 <_fflush_r+0x3a>
 8007e88:	0599      	lsls	r1, r3, #22
 8007e8a:	d402      	bmi.n	8007e92 <_fflush_r+0x3a>
 8007e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e8e:	f000 f91a 	bl	80080c6 <__retarget_lock_acquire_recursive>
 8007e92:	4628      	mov	r0, r5
 8007e94:	4621      	mov	r1, r4
 8007e96:	f7ff ff59 	bl	8007d4c <__sflush_r>
 8007e9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e9c:	07da      	lsls	r2, r3, #31
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	d4e0      	bmi.n	8007e64 <_fflush_r+0xc>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	059b      	lsls	r3, r3, #22
 8007ea6:	d4dd      	bmi.n	8007e64 <_fflush_r+0xc>
 8007ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eaa:	f000 f90d 	bl	80080c8 <__retarget_lock_release_recursive>
 8007eae:	e7d9      	b.n	8007e64 <_fflush_r+0xc>
 8007eb0:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <_fflush_r+0x70>)
 8007eb2:	429c      	cmp	r4, r3
 8007eb4:	d101      	bne.n	8007eba <_fflush_r+0x62>
 8007eb6:	68ac      	ldr	r4, [r5, #8]
 8007eb8:	e7df      	b.n	8007e7a <_fflush_r+0x22>
 8007eba:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <_fflush_r+0x74>)
 8007ebc:	429c      	cmp	r4, r3
 8007ebe:	bf08      	it	eq
 8007ec0:	68ec      	ldreq	r4, [r5, #12]
 8007ec2:	e7da      	b.n	8007e7a <_fflush_r+0x22>
 8007ec4:	080091a4 	.word	0x080091a4
 8007ec8:	080091c4 	.word	0x080091c4
 8007ecc:	08009184 	.word	0x08009184

08007ed0 <std>:
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8007eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ede:	6083      	str	r3, [r0, #8]
 8007ee0:	8181      	strh	r1, [r0, #12]
 8007ee2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ee4:	81c2      	strh	r2, [r0, #14]
 8007ee6:	6183      	str	r3, [r0, #24]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	2208      	movs	r2, #8
 8007eec:	305c      	adds	r0, #92	; 0x5c
 8007eee:	f7fe fb9b 	bl	8006628 <memset>
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <std+0x38>)
 8007ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ef6:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <std+0x3c>)
 8007ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007efa:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <std+0x40>)
 8007efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <std+0x44>)
 8007f00:	6224      	str	r4, [r4, #32]
 8007f02:	6323      	str	r3, [r4, #48]	; 0x30
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	bf00      	nop
 8007f08:	08008d89 	.word	0x08008d89
 8007f0c:	08008dab 	.word	0x08008dab
 8007f10:	08008de3 	.word	0x08008de3
 8007f14:	08008e07 	.word	0x08008e07

08007f18 <_cleanup_r>:
 8007f18:	4901      	ldr	r1, [pc, #4]	; (8007f20 <_cleanup_r+0x8>)
 8007f1a:	f000 b8af 	b.w	800807c <_fwalk_reent>
 8007f1e:	bf00      	nop
 8007f20:	08007e59 	.word	0x08007e59

08007f24 <__sfmoreglue>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	2268      	movs	r2, #104	; 0x68
 8007f28:	1e4d      	subs	r5, r1, #1
 8007f2a:	4355      	muls	r5, r2
 8007f2c:	460e      	mov	r6, r1
 8007f2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f32:	f000 fd4b 	bl	80089cc <_malloc_r>
 8007f36:	4604      	mov	r4, r0
 8007f38:	b140      	cbz	r0, 8007f4c <__sfmoreglue+0x28>
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	e9c0 1600 	strd	r1, r6, [r0]
 8007f40:	300c      	adds	r0, #12
 8007f42:	60a0      	str	r0, [r4, #8]
 8007f44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f48:	f7fe fb6e 	bl	8006628 <memset>
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}

08007f50 <__sfp_lock_acquire>:
 8007f50:	4801      	ldr	r0, [pc, #4]	; (8007f58 <__sfp_lock_acquire+0x8>)
 8007f52:	f000 b8b8 	b.w	80080c6 <__retarget_lock_acquire_recursive>
 8007f56:	bf00      	nop
 8007f58:	24000951 	.word	0x24000951

08007f5c <__sfp_lock_release>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	; (8007f64 <__sfp_lock_release+0x8>)
 8007f5e:	f000 b8b3 	b.w	80080c8 <__retarget_lock_release_recursive>
 8007f62:	bf00      	nop
 8007f64:	24000951 	.word	0x24000951

08007f68 <__sinit_lock_acquire>:
 8007f68:	4801      	ldr	r0, [pc, #4]	; (8007f70 <__sinit_lock_acquire+0x8>)
 8007f6a:	f000 b8ac 	b.w	80080c6 <__retarget_lock_acquire_recursive>
 8007f6e:	bf00      	nop
 8007f70:	24000952 	.word	0x24000952

08007f74 <__sinit_lock_release>:
 8007f74:	4801      	ldr	r0, [pc, #4]	; (8007f7c <__sinit_lock_release+0x8>)
 8007f76:	f000 b8a7 	b.w	80080c8 <__retarget_lock_release_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	24000952 	.word	0x24000952

08007f80 <__sinit>:
 8007f80:	b510      	push	{r4, lr}
 8007f82:	4604      	mov	r4, r0
 8007f84:	f7ff fff0 	bl	8007f68 <__sinit_lock_acquire>
 8007f88:	69a3      	ldr	r3, [r4, #24]
 8007f8a:	b11b      	cbz	r3, 8007f94 <__sinit+0x14>
 8007f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f90:	f7ff bff0 	b.w	8007f74 <__sinit_lock_release>
 8007f94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f98:	6523      	str	r3, [r4, #80]	; 0x50
 8007f9a:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <__sinit+0x68>)
 8007f9c:	4a13      	ldr	r2, [pc, #76]	; (8007fec <__sinit+0x6c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	bf04      	itt	eq
 8007fa6:	2301      	moveq	r3, #1
 8007fa8:	61a3      	streq	r3, [r4, #24]
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f820 	bl	8007ff0 <__sfp>
 8007fb0:	6060      	str	r0, [r4, #4]
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 f81c 	bl	8007ff0 <__sfp>
 8007fb8:	60a0      	str	r0, [r4, #8]
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 f818 	bl	8007ff0 <__sfp>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	60e0      	str	r0, [r4, #12]
 8007fc4:	2104      	movs	r1, #4
 8007fc6:	6860      	ldr	r0, [r4, #4]
 8007fc8:	f7ff ff82 	bl	8007ed0 <std>
 8007fcc:	68a0      	ldr	r0, [r4, #8]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	2109      	movs	r1, #9
 8007fd2:	f7ff ff7d 	bl	8007ed0 <std>
 8007fd6:	68e0      	ldr	r0, [r4, #12]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	2112      	movs	r1, #18
 8007fdc:	f7ff ff78 	bl	8007ed0 <std>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	61a3      	str	r3, [r4, #24]
 8007fe4:	e7d2      	b.n	8007f8c <__sinit+0xc>
 8007fe6:	bf00      	nop
 8007fe8:	080090bc 	.word	0x080090bc
 8007fec:	08007f19 	.word	0x08007f19

08007ff0 <__sfp>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	4607      	mov	r7, r0
 8007ff4:	f7ff ffac 	bl	8007f50 <__sfp_lock_acquire>
 8007ff8:	4b1e      	ldr	r3, [pc, #120]	; (8008074 <__sfp+0x84>)
 8007ffa:	681e      	ldr	r6, [r3, #0]
 8007ffc:	69b3      	ldr	r3, [r6, #24]
 8007ffe:	b913      	cbnz	r3, 8008006 <__sfp+0x16>
 8008000:	4630      	mov	r0, r6
 8008002:	f7ff ffbd 	bl	8007f80 <__sinit>
 8008006:	3648      	adds	r6, #72	; 0x48
 8008008:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800800c:	3b01      	subs	r3, #1
 800800e:	d503      	bpl.n	8008018 <__sfp+0x28>
 8008010:	6833      	ldr	r3, [r6, #0]
 8008012:	b30b      	cbz	r3, 8008058 <__sfp+0x68>
 8008014:	6836      	ldr	r6, [r6, #0]
 8008016:	e7f7      	b.n	8008008 <__sfp+0x18>
 8008018:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800801c:	b9d5      	cbnz	r5, 8008054 <__sfp+0x64>
 800801e:	4b16      	ldr	r3, [pc, #88]	; (8008078 <__sfp+0x88>)
 8008020:	60e3      	str	r3, [r4, #12]
 8008022:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008026:	6665      	str	r5, [r4, #100]	; 0x64
 8008028:	f000 f84c 	bl	80080c4 <__retarget_lock_init_recursive>
 800802c:	f7ff ff96 	bl	8007f5c <__sfp_lock_release>
 8008030:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008034:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008038:	6025      	str	r5, [r4, #0]
 800803a:	61a5      	str	r5, [r4, #24]
 800803c:	2208      	movs	r2, #8
 800803e:	4629      	mov	r1, r5
 8008040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008044:	f7fe faf0 	bl	8006628 <memset>
 8008048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800804c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008050:	4620      	mov	r0, r4
 8008052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008054:	3468      	adds	r4, #104	; 0x68
 8008056:	e7d9      	b.n	800800c <__sfp+0x1c>
 8008058:	2104      	movs	r1, #4
 800805a:	4638      	mov	r0, r7
 800805c:	f7ff ff62 	bl	8007f24 <__sfmoreglue>
 8008060:	4604      	mov	r4, r0
 8008062:	6030      	str	r0, [r6, #0]
 8008064:	2800      	cmp	r0, #0
 8008066:	d1d5      	bne.n	8008014 <__sfp+0x24>
 8008068:	f7ff ff78 	bl	8007f5c <__sfp_lock_release>
 800806c:	230c      	movs	r3, #12
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	e7ee      	b.n	8008050 <__sfp+0x60>
 8008072:	bf00      	nop
 8008074:	080090bc 	.word	0x080090bc
 8008078:	ffff0001 	.word	0xffff0001

0800807c <_fwalk_reent>:
 800807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008080:	4606      	mov	r6, r0
 8008082:	4688      	mov	r8, r1
 8008084:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008088:	2700      	movs	r7, #0
 800808a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800808e:	f1b9 0901 	subs.w	r9, r9, #1
 8008092:	d505      	bpl.n	80080a0 <_fwalk_reent+0x24>
 8008094:	6824      	ldr	r4, [r4, #0]
 8008096:	2c00      	cmp	r4, #0
 8008098:	d1f7      	bne.n	800808a <_fwalk_reent+0xe>
 800809a:	4638      	mov	r0, r7
 800809c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080a0:	89ab      	ldrh	r3, [r5, #12]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d907      	bls.n	80080b6 <_fwalk_reent+0x3a>
 80080a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080aa:	3301      	adds	r3, #1
 80080ac:	d003      	beq.n	80080b6 <_fwalk_reent+0x3a>
 80080ae:	4629      	mov	r1, r5
 80080b0:	4630      	mov	r0, r6
 80080b2:	47c0      	blx	r8
 80080b4:	4307      	orrs	r7, r0
 80080b6:	3568      	adds	r5, #104	; 0x68
 80080b8:	e7e9      	b.n	800808e <_fwalk_reent+0x12>
	...

080080bc <_localeconv_r>:
 80080bc:	4800      	ldr	r0, [pc, #0]	; (80080c0 <_localeconv_r+0x4>)
 80080be:	4770      	bx	lr
 80080c0:	24000164 	.word	0x24000164

080080c4 <__retarget_lock_init_recursive>:
 80080c4:	4770      	bx	lr

080080c6 <__retarget_lock_acquire_recursive>:
 80080c6:	4770      	bx	lr

080080c8 <__retarget_lock_release_recursive>:
 80080c8:	4770      	bx	lr

080080ca <__swhatbuf_r>:
 80080ca:	b570      	push	{r4, r5, r6, lr}
 80080cc:	460e      	mov	r6, r1
 80080ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d2:	2900      	cmp	r1, #0
 80080d4:	b096      	sub	sp, #88	; 0x58
 80080d6:	4614      	mov	r4, r2
 80080d8:	461d      	mov	r5, r3
 80080da:	da08      	bge.n	80080ee <__swhatbuf_r+0x24>
 80080dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	602a      	str	r2, [r5, #0]
 80080e4:	061a      	lsls	r2, r3, #24
 80080e6:	d410      	bmi.n	800810a <__swhatbuf_r+0x40>
 80080e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ec:	e00e      	b.n	800810c <__swhatbuf_r+0x42>
 80080ee:	466a      	mov	r2, sp
 80080f0:	f000 fee0 	bl	8008eb4 <_fstat_r>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	dbf1      	blt.n	80080dc <__swhatbuf_r+0x12>
 80080f8:	9a01      	ldr	r2, [sp, #4]
 80080fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008102:	425a      	negs	r2, r3
 8008104:	415a      	adcs	r2, r3
 8008106:	602a      	str	r2, [r5, #0]
 8008108:	e7ee      	b.n	80080e8 <__swhatbuf_r+0x1e>
 800810a:	2340      	movs	r3, #64	; 0x40
 800810c:	2000      	movs	r0, #0
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	b016      	add	sp, #88	; 0x58
 8008112:	bd70      	pop	{r4, r5, r6, pc}

08008114 <__smakebuf_r>:
 8008114:	898b      	ldrh	r3, [r1, #12]
 8008116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008118:	079d      	lsls	r5, r3, #30
 800811a:	4606      	mov	r6, r0
 800811c:	460c      	mov	r4, r1
 800811e:	d507      	bpl.n	8008130 <__smakebuf_r+0x1c>
 8008120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	2301      	movs	r3, #1
 800812a:	6163      	str	r3, [r4, #20]
 800812c:	b002      	add	sp, #8
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	ab01      	add	r3, sp, #4
 8008132:	466a      	mov	r2, sp
 8008134:	f7ff ffc9 	bl	80080ca <__swhatbuf_r>
 8008138:	9900      	ldr	r1, [sp, #0]
 800813a:	4605      	mov	r5, r0
 800813c:	4630      	mov	r0, r6
 800813e:	f000 fc45 	bl	80089cc <_malloc_r>
 8008142:	b948      	cbnz	r0, 8008158 <__smakebuf_r+0x44>
 8008144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008148:	059a      	lsls	r2, r3, #22
 800814a:	d4ef      	bmi.n	800812c <__smakebuf_r+0x18>
 800814c:	f023 0303 	bic.w	r3, r3, #3
 8008150:	f043 0302 	orr.w	r3, r3, #2
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	e7e3      	b.n	8008120 <__smakebuf_r+0xc>
 8008158:	4b0d      	ldr	r3, [pc, #52]	; (8008190 <__smakebuf_r+0x7c>)
 800815a:	62b3      	str	r3, [r6, #40]	; 0x28
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	6020      	str	r0, [r4, #0]
 8008160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	9b00      	ldr	r3, [sp, #0]
 8008168:	6163      	str	r3, [r4, #20]
 800816a:	9b01      	ldr	r3, [sp, #4]
 800816c:	6120      	str	r0, [r4, #16]
 800816e:	b15b      	cbz	r3, 8008188 <__smakebuf_r+0x74>
 8008170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008174:	4630      	mov	r0, r6
 8008176:	f000 feaf 	bl	8008ed8 <_isatty_r>
 800817a:	b128      	cbz	r0, 8008188 <__smakebuf_r+0x74>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f023 0303 	bic.w	r3, r3, #3
 8008182:	f043 0301 	orr.w	r3, r3, #1
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	89a0      	ldrh	r0, [r4, #12]
 800818a:	4305      	orrs	r5, r0
 800818c:	81a5      	strh	r5, [r4, #12]
 800818e:	e7cd      	b.n	800812c <__smakebuf_r+0x18>
 8008190:	08007f19 	.word	0x08007f19

08008194 <malloc>:
 8008194:	4b02      	ldr	r3, [pc, #8]	; (80081a0 <malloc+0xc>)
 8008196:	4601      	mov	r1, r0
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	f000 bc17 	b.w	80089cc <_malloc_r>
 800819e:	bf00      	nop
 80081a0:	24000010 	.word	0x24000010

080081a4 <memcpy>:
 80081a4:	440a      	add	r2, r1
 80081a6:	4291      	cmp	r1, r2
 80081a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081ac:	d100      	bne.n	80081b0 <memcpy+0xc>
 80081ae:	4770      	bx	lr
 80081b0:	b510      	push	{r4, lr}
 80081b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ba:	4291      	cmp	r1, r2
 80081bc:	d1f9      	bne.n	80081b2 <memcpy+0xe>
 80081be:	bd10      	pop	{r4, pc}

080081c0 <_Balloc>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081c4:	4604      	mov	r4, r0
 80081c6:	460d      	mov	r5, r1
 80081c8:	b976      	cbnz	r6, 80081e8 <_Balloc+0x28>
 80081ca:	2010      	movs	r0, #16
 80081cc:	f7ff ffe2 	bl	8008194 <malloc>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6260      	str	r0, [r4, #36]	; 0x24
 80081d4:	b920      	cbnz	r0, 80081e0 <_Balloc+0x20>
 80081d6:	4b18      	ldr	r3, [pc, #96]	; (8008238 <_Balloc+0x78>)
 80081d8:	4818      	ldr	r0, [pc, #96]	; (800823c <_Balloc+0x7c>)
 80081da:	2166      	movs	r1, #102	; 0x66
 80081dc:	f000 fe2a 	bl	8008e34 <__assert_func>
 80081e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081e4:	6006      	str	r6, [r0, #0]
 80081e6:	60c6      	str	r6, [r0, #12]
 80081e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081ea:	68f3      	ldr	r3, [r6, #12]
 80081ec:	b183      	cbz	r3, 8008210 <_Balloc+0x50>
 80081ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081f6:	b9b8      	cbnz	r0, 8008228 <_Balloc+0x68>
 80081f8:	2101      	movs	r1, #1
 80081fa:	fa01 f605 	lsl.w	r6, r1, r5
 80081fe:	1d72      	adds	r2, r6, #5
 8008200:	0092      	lsls	r2, r2, #2
 8008202:	4620      	mov	r0, r4
 8008204:	f000 fb60 	bl	80088c8 <_calloc_r>
 8008208:	b160      	cbz	r0, 8008224 <_Balloc+0x64>
 800820a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800820e:	e00e      	b.n	800822e <_Balloc+0x6e>
 8008210:	2221      	movs	r2, #33	; 0x21
 8008212:	2104      	movs	r1, #4
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fb57 	bl	80088c8 <_calloc_r>
 800821a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800821c:	60f0      	str	r0, [r6, #12]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e4      	bne.n	80081ee <_Balloc+0x2e>
 8008224:	2000      	movs	r0, #0
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	6802      	ldr	r2, [r0, #0]
 800822a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800822e:	2300      	movs	r3, #0
 8008230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008234:	e7f7      	b.n	8008226 <_Balloc+0x66>
 8008236:	bf00      	nop
 8008238:	08009101 	.word	0x08009101
 800823c:	080091e4 	.word	0x080091e4

08008240 <_Bfree>:
 8008240:	b570      	push	{r4, r5, r6, lr}
 8008242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008244:	4605      	mov	r5, r0
 8008246:	460c      	mov	r4, r1
 8008248:	b976      	cbnz	r6, 8008268 <_Bfree+0x28>
 800824a:	2010      	movs	r0, #16
 800824c:	f7ff ffa2 	bl	8008194 <malloc>
 8008250:	4602      	mov	r2, r0
 8008252:	6268      	str	r0, [r5, #36]	; 0x24
 8008254:	b920      	cbnz	r0, 8008260 <_Bfree+0x20>
 8008256:	4b09      	ldr	r3, [pc, #36]	; (800827c <_Bfree+0x3c>)
 8008258:	4809      	ldr	r0, [pc, #36]	; (8008280 <_Bfree+0x40>)
 800825a:	218a      	movs	r1, #138	; 0x8a
 800825c:	f000 fdea 	bl	8008e34 <__assert_func>
 8008260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008264:	6006      	str	r6, [r0, #0]
 8008266:	60c6      	str	r6, [r0, #12]
 8008268:	b13c      	cbz	r4, 800827a <_Bfree+0x3a>
 800826a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800826c:	6862      	ldr	r2, [r4, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008274:	6021      	str	r1, [r4, #0]
 8008276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	08009101 	.word	0x08009101
 8008280:	080091e4 	.word	0x080091e4

08008284 <__multadd>:
 8008284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008288:	690d      	ldr	r5, [r1, #16]
 800828a:	4607      	mov	r7, r0
 800828c:	460c      	mov	r4, r1
 800828e:	461e      	mov	r6, r3
 8008290:	f101 0c14 	add.w	ip, r1, #20
 8008294:	2000      	movs	r0, #0
 8008296:	f8dc 3000 	ldr.w	r3, [ip]
 800829a:	b299      	uxth	r1, r3
 800829c:	fb02 6101 	mla	r1, r2, r1, r6
 80082a0:	0c1e      	lsrs	r6, r3, #16
 80082a2:	0c0b      	lsrs	r3, r1, #16
 80082a4:	fb02 3306 	mla	r3, r2, r6, r3
 80082a8:	b289      	uxth	r1, r1
 80082aa:	3001      	adds	r0, #1
 80082ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082b0:	4285      	cmp	r5, r0
 80082b2:	f84c 1b04 	str.w	r1, [ip], #4
 80082b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082ba:	dcec      	bgt.n	8008296 <__multadd+0x12>
 80082bc:	b30e      	cbz	r6, 8008302 <__multadd+0x7e>
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	42ab      	cmp	r3, r5
 80082c2:	dc19      	bgt.n	80082f8 <__multadd+0x74>
 80082c4:	6861      	ldr	r1, [r4, #4]
 80082c6:	4638      	mov	r0, r7
 80082c8:	3101      	adds	r1, #1
 80082ca:	f7ff ff79 	bl	80081c0 <_Balloc>
 80082ce:	4680      	mov	r8, r0
 80082d0:	b928      	cbnz	r0, 80082de <__multadd+0x5a>
 80082d2:	4602      	mov	r2, r0
 80082d4:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <__multadd+0x84>)
 80082d6:	480d      	ldr	r0, [pc, #52]	; (800830c <__multadd+0x88>)
 80082d8:	21b5      	movs	r1, #181	; 0xb5
 80082da:	f000 fdab 	bl	8008e34 <__assert_func>
 80082de:	6922      	ldr	r2, [r4, #16]
 80082e0:	3202      	adds	r2, #2
 80082e2:	f104 010c 	add.w	r1, r4, #12
 80082e6:	0092      	lsls	r2, r2, #2
 80082e8:	300c      	adds	r0, #12
 80082ea:	f7ff ff5b 	bl	80081a4 <memcpy>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7ff ffa5 	bl	8008240 <_Bfree>
 80082f6:	4644      	mov	r4, r8
 80082f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082fc:	3501      	adds	r5, #1
 80082fe:	615e      	str	r6, [r3, #20]
 8008300:	6125      	str	r5, [r4, #16]
 8008302:	4620      	mov	r0, r4
 8008304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008308:	08009173 	.word	0x08009173
 800830c:	080091e4 	.word	0x080091e4

08008310 <__hi0bits>:
 8008310:	0c03      	lsrs	r3, r0, #16
 8008312:	041b      	lsls	r3, r3, #16
 8008314:	b9d3      	cbnz	r3, 800834c <__hi0bits+0x3c>
 8008316:	0400      	lsls	r0, r0, #16
 8008318:	2310      	movs	r3, #16
 800831a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800831e:	bf04      	itt	eq
 8008320:	0200      	lsleq	r0, r0, #8
 8008322:	3308      	addeq	r3, #8
 8008324:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008328:	bf04      	itt	eq
 800832a:	0100      	lsleq	r0, r0, #4
 800832c:	3304      	addeq	r3, #4
 800832e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008332:	bf04      	itt	eq
 8008334:	0080      	lsleq	r0, r0, #2
 8008336:	3302      	addeq	r3, #2
 8008338:	2800      	cmp	r0, #0
 800833a:	db05      	blt.n	8008348 <__hi0bits+0x38>
 800833c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008340:	f103 0301 	add.w	r3, r3, #1
 8008344:	bf08      	it	eq
 8008346:	2320      	moveq	r3, #32
 8008348:	4618      	mov	r0, r3
 800834a:	4770      	bx	lr
 800834c:	2300      	movs	r3, #0
 800834e:	e7e4      	b.n	800831a <__hi0bits+0xa>

08008350 <__lo0bits>:
 8008350:	6803      	ldr	r3, [r0, #0]
 8008352:	f013 0207 	ands.w	r2, r3, #7
 8008356:	4601      	mov	r1, r0
 8008358:	d00b      	beq.n	8008372 <__lo0bits+0x22>
 800835a:	07da      	lsls	r2, r3, #31
 800835c:	d423      	bmi.n	80083a6 <__lo0bits+0x56>
 800835e:	0798      	lsls	r0, r3, #30
 8008360:	bf49      	itett	mi
 8008362:	085b      	lsrmi	r3, r3, #1
 8008364:	089b      	lsrpl	r3, r3, #2
 8008366:	2001      	movmi	r0, #1
 8008368:	600b      	strmi	r3, [r1, #0]
 800836a:	bf5c      	itt	pl
 800836c:	600b      	strpl	r3, [r1, #0]
 800836e:	2002      	movpl	r0, #2
 8008370:	4770      	bx	lr
 8008372:	b298      	uxth	r0, r3
 8008374:	b9a8      	cbnz	r0, 80083a2 <__lo0bits+0x52>
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	2010      	movs	r0, #16
 800837a:	b2da      	uxtb	r2, r3
 800837c:	b90a      	cbnz	r2, 8008382 <__lo0bits+0x32>
 800837e:	3008      	adds	r0, #8
 8008380:	0a1b      	lsrs	r3, r3, #8
 8008382:	071a      	lsls	r2, r3, #28
 8008384:	bf04      	itt	eq
 8008386:	091b      	lsreq	r3, r3, #4
 8008388:	3004      	addeq	r0, #4
 800838a:	079a      	lsls	r2, r3, #30
 800838c:	bf04      	itt	eq
 800838e:	089b      	lsreq	r3, r3, #2
 8008390:	3002      	addeq	r0, #2
 8008392:	07da      	lsls	r2, r3, #31
 8008394:	d403      	bmi.n	800839e <__lo0bits+0x4e>
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	f100 0001 	add.w	r0, r0, #1
 800839c:	d005      	beq.n	80083aa <__lo0bits+0x5a>
 800839e:	600b      	str	r3, [r1, #0]
 80083a0:	4770      	bx	lr
 80083a2:	4610      	mov	r0, r2
 80083a4:	e7e9      	b.n	800837a <__lo0bits+0x2a>
 80083a6:	2000      	movs	r0, #0
 80083a8:	4770      	bx	lr
 80083aa:	2020      	movs	r0, #32
 80083ac:	4770      	bx	lr
	...

080083b0 <__i2b>:
 80083b0:	b510      	push	{r4, lr}
 80083b2:	460c      	mov	r4, r1
 80083b4:	2101      	movs	r1, #1
 80083b6:	f7ff ff03 	bl	80081c0 <_Balloc>
 80083ba:	4602      	mov	r2, r0
 80083bc:	b928      	cbnz	r0, 80083ca <__i2b+0x1a>
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <__i2b+0x24>)
 80083c0:	4805      	ldr	r0, [pc, #20]	; (80083d8 <__i2b+0x28>)
 80083c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083c6:	f000 fd35 	bl	8008e34 <__assert_func>
 80083ca:	2301      	movs	r3, #1
 80083cc:	6144      	str	r4, [r0, #20]
 80083ce:	6103      	str	r3, [r0, #16]
 80083d0:	bd10      	pop	{r4, pc}
 80083d2:	bf00      	nop
 80083d4:	08009173 	.word	0x08009173
 80083d8:	080091e4 	.word	0x080091e4

080083dc <__multiply>:
 80083dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e0:	4691      	mov	r9, r2
 80083e2:	690a      	ldr	r2, [r1, #16]
 80083e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	bfb8      	it	lt
 80083ec:	460b      	movlt	r3, r1
 80083ee:	460c      	mov	r4, r1
 80083f0:	bfbc      	itt	lt
 80083f2:	464c      	movlt	r4, r9
 80083f4:	4699      	movlt	r9, r3
 80083f6:	6927      	ldr	r7, [r4, #16]
 80083f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083fc:	68a3      	ldr	r3, [r4, #8]
 80083fe:	6861      	ldr	r1, [r4, #4]
 8008400:	eb07 060a 	add.w	r6, r7, sl
 8008404:	42b3      	cmp	r3, r6
 8008406:	b085      	sub	sp, #20
 8008408:	bfb8      	it	lt
 800840a:	3101      	addlt	r1, #1
 800840c:	f7ff fed8 	bl	80081c0 <_Balloc>
 8008410:	b930      	cbnz	r0, 8008420 <__multiply+0x44>
 8008412:	4602      	mov	r2, r0
 8008414:	4b44      	ldr	r3, [pc, #272]	; (8008528 <__multiply+0x14c>)
 8008416:	4845      	ldr	r0, [pc, #276]	; (800852c <__multiply+0x150>)
 8008418:	f240 115d 	movw	r1, #349	; 0x15d
 800841c:	f000 fd0a 	bl	8008e34 <__assert_func>
 8008420:	f100 0514 	add.w	r5, r0, #20
 8008424:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008428:	462b      	mov	r3, r5
 800842a:	2200      	movs	r2, #0
 800842c:	4543      	cmp	r3, r8
 800842e:	d321      	bcc.n	8008474 <__multiply+0x98>
 8008430:	f104 0314 	add.w	r3, r4, #20
 8008434:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008438:	f109 0314 	add.w	r3, r9, #20
 800843c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008440:	9202      	str	r2, [sp, #8]
 8008442:	1b3a      	subs	r2, r7, r4
 8008444:	3a15      	subs	r2, #21
 8008446:	f022 0203 	bic.w	r2, r2, #3
 800844a:	3204      	adds	r2, #4
 800844c:	f104 0115 	add.w	r1, r4, #21
 8008450:	428f      	cmp	r7, r1
 8008452:	bf38      	it	cc
 8008454:	2204      	movcc	r2, #4
 8008456:	9201      	str	r2, [sp, #4]
 8008458:	9a02      	ldr	r2, [sp, #8]
 800845a:	9303      	str	r3, [sp, #12]
 800845c:	429a      	cmp	r2, r3
 800845e:	d80c      	bhi.n	800847a <__multiply+0x9e>
 8008460:	2e00      	cmp	r6, #0
 8008462:	dd03      	ble.n	800846c <__multiply+0x90>
 8008464:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008468:	2b00      	cmp	r3, #0
 800846a:	d05a      	beq.n	8008522 <__multiply+0x146>
 800846c:	6106      	str	r6, [r0, #16]
 800846e:	b005      	add	sp, #20
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008474:	f843 2b04 	str.w	r2, [r3], #4
 8008478:	e7d8      	b.n	800842c <__multiply+0x50>
 800847a:	f8b3 a000 	ldrh.w	sl, [r3]
 800847e:	f1ba 0f00 	cmp.w	sl, #0
 8008482:	d024      	beq.n	80084ce <__multiply+0xf2>
 8008484:	f104 0e14 	add.w	lr, r4, #20
 8008488:	46a9      	mov	r9, r5
 800848a:	f04f 0c00 	mov.w	ip, #0
 800848e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008492:	f8d9 1000 	ldr.w	r1, [r9]
 8008496:	fa1f fb82 	uxth.w	fp, r2
 800849a:	b289      	uxth	r1, r1
 800849c:	fb0a 110b 	mla	r1, sl, fp, r1
 80084a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084a4:	f8d9 2000 	ldr.w	r2, [r9]
 80084a8:	4461      	add	r1, ip
 80084aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80084b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084b6:	b289      	uxth	r1, r1
 80084b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084bc:	4577      	cmp	r7, lr
 80084be:	f849 1b04 	str.w	r1, [r9], #4
 80084c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084c6:	d8e2      	bhi.n	800848e <__multiply+0xb2>
 80084c8:	9a01      	ldr	r2, [sp, #4]
 80084ca:	f845 c002 	str.w	ip, [r5, r2]
 80084ce:	9a03      	ldr	r2, [sp, #12]
 80084d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084d4:	3304      	adds	r3, #4
 80084d6:	f1b9 0f00 	cmp.w	r9, #0
 80084da:	d020      	beq.n	800851e <__multiply+0x142>
 80084dc:	6829      	ldr	r1, [r5, #0]
 80084de:	f104 0c14 	add.w	ip, r4, #20
 80084e2:	46ae      	mov	lr, r5
 80084e4:	f04f 0a00 	mov.w	sl, #0
 80084e8:	f8bc b000 	ldrh.w	fp, [ip]
 80084ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084f0:	fb09 220b 	mla	r2, r9, fp, r2
 80084f4:	4492      	add	sl, r2
 80084f6:	b289      	uxth	r1, r1
 80084f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084fc:	f84e 1b04 	str.w	r1, [lr], #4
 8008500:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008504:	f8be 1000 	ldrh.w	r1, [lr]
 8008508:	0c12      	lsrs	r2, r2, #16
 800850a:	fb09 1102 	mla	r1, r9, r2, r1
 800850e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008512:	4567      	cmp	r7, ip
 8008514:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008518:	d8e6      	bhi.n	80084e8 <__multiply+0x10c>
 800851a:	9a01      	ldr	r2, [sp, #4]
 800851c:	50a9      	str	r1, [r5, r2]
 800851e:	3504      	adds	r5, #4
 8008520:	e79a      	b.n	8008458 <__multiply+0x7c>
 8008522:	3e01      	subs	r6, #1
 8008524:	e79c      	b.n	8008460 <__multiply+0x84>
 8008526:	bf00      	nop
 8008528:	08009173 	.word	0x08009173
 800852c:	080091e4 	.word	0x080091e4

08008530 <__pow5mult>:
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4615      	mov	r5, r2
 8008536:	f012 0203 	ands.w	r2, r2, #3
 800853a:	4606      	mov	r6, r0
 800853c:	460f      	mov	r7, r1
 800853e:	d007      	beq.n	8008550 <__pow5mult+0x20>
 8008540:	4c25      	ldr	r4, [pc, #148]	; (80085d8 <__pow5mult+0xa8>)
 8008542:	3a01      	subs	r2, #1
 8008544:	2300      	movs	r3, #0
 8008546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800854a:	f7ff fe9b 	bl	8008284 <__multadd>
 800854e:	4607      	mov	r7, r0
 8008550:	10ad      	asrs	r5, r5, #2
 8008552:	d03d      	beq.n	80085d0 <__pow5mult+0xa0>
 8008554:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008556:	b97c      	cbnz	r4, 8008578 <__pow5mult+0x48>
 8008558:	2010      	movs	r0, #16
 800855a:	f7ff fe1b 	bl	8008194 <malloc>
 800855e:	4602      	mov	r2, r0
 8008560:	6270      	str	r0, [r6, #36]	; 0x24
 8008562:	b928      	cbnz	r0, 8008570 <__pow5mult+0x40>
 8008564:	4b1d      	ldr	r3, [pc, #116]	; (80085dc <__pow5mult+0xac>)
 8008566:	481e      	ldr	r0, [pc, #120]	; (80085e0 <__pow5mult+0xb0>)
 8008568:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800856c:	f000 fc62 	bl	8008e34 <__assert_func>
 8008570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008574:	6004      	str	r4, [r0, #0]
 8008576:	60c4      	str	r4, [r0, #12]
 8008578:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800857c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008580:	b94c      	cbnz	r4, 8008596 <__pow5mult+0x66>
 8008582:	f240 2171 	movw	r1, #625	; 0x271
 8008586:	4630      	mov	r0, r6
 8008588:	f7ff ff12 	bl	80083b0 <__i2b>
 800858c:	2300      	movs	r3, #0
 800858e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008592:	4604      	mov	r4, r0
 8008594:	6003      	str	r3, [r0, #0]
 8008596:	f04f 0900 	mov.w	r9, #0
 800859a:	07eb      	lsls	r3, r5, #31
 800859c:	d50a      	bpl.n	80085b4 <__pow5mult+0x84>
 800859e:	4639      	mov	r1, r7
 80085a0:	4622      	mov	r2, r4
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7ff ff1a 	bl	80083dc <__multiply>
 80085a8:	4639      	mov	r1, r7
 80085aa:	4680      	mov	r8, r0
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff fe47 	bl	8008240 <_Bfree>
 80085b2:	4647      	mov	r7, r8
 80085b4:	106d      	asrs	r5, r5, #1
 80085b6:	d00b      	beq.n	80085d0 <__pow5mult+0xa0>
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	b938      	cbnz	r0, 80085cc <__pow5mult+0x9c>
 80085bc:	4622      	mov	r2, r4
 80085be:	4621      	mov	r1, r4
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff ff0b 	bl	80083dc <__multiply>
 80085c6:	6020      	str	r0, [r4, #0]
 80085c8:	f8c0 9000 	str.w	r9, [r0]
 80085cc:	4604      	mov	r4, r0
 80085ce:	e7e4      	b.n	800859a <__pow5mult+0x6a>
 80085d0:	4638      	mov	r0, r7
 80085d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d6:	bf00      	nop
 80085d8:	08009330 	.word	0x08009330
 80085dc:	08009101 	.word	0x08009101
 80085e0:	080091e4 	.word	0x080091e4

080085e4 <__lshift>:
 80085e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e8:	460c      	mov	r4, r1
 80085ea:	6849      	ldr	r1, [r1, #4]
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085f2:	68a3      	ldr	r3, [r4, #8]
 80085f4:	4607      	mov	r7, r0
 80085f6:	4691      	mov	r9, r2
 80085f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085fc:	f108 0601 	add.w	r6, r8, #1
 8008600:	42b3      	cmp	r3, r6
 8008602:	db0b      	blt.n	800861c <__lshift+0x38>
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff fddb 	bl	80081c0 <_Balloc>
 800860a:	4605      	mov	r5, r0
 800860c:	b948      	cbnz	r0, 8008622 <__lshift+0x3e>
 800860e:	4602      	mov	r2, r0
 8008610:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <__lshift+0xd8>)
 8008612:	482b      	ldr	r0, [pc, #172]	; (80086c0 <__lshift+0xdc>)
 8008614:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008618:	f000 fc0c 	bl	8008e34 <__assert_func>
 800861c:	3101      	adds	r1, #1
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	e7ee      	b.n	8008600 <__lshift+0x1c>
 8008622:	2300      	movs	r3, #0
 8008624:	f100 0114 	add.w	r1, r0, #20
 8008628:	f100 0210 	add.w	r2, r0, #16
 800862c:	4618      	mov	r0, r3
 800862e:	4553      	cmp	r3, sl
 8008630:	db37      	blt.n	80086a2 <__lshift+0xbe>
 8008632:	6920      	ldr	r0, [r4, #16]
 8008634:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008638:	f104 0314 	add.w	r3, r4, #20
 800863c:	f019 091f 	ands.w	r9, r9, #31
 8008640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008644:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008648:	d02f      	beq.n	80086aa <__lshift+0xc6>
 800864a:	f1c9 0e20 	rsb	lr, r9, #32
 800864e:	468a      	mov	sl, r1
 8008650:	f04f 0c00 	mov.w	ip, #0
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	fa02 f209 	lsl.w	r2, r2, r9
 800865a:	ea42 020c 	orr.w	r2, r2, ip
 800865e:	f84a 2b04 	str.w	r2, [sl], #4
 8008662:	f853 2b04 	ldr.w	r2, [r3], #4
 8008666:	4298      	cmp	r0, r3
 8008668:	fa22 fc0e 	lsr.w	ip, r2, lr
 800866c:	d8f2      	bhi.n	8008654 <__lshift+0x70>
 800866e:	1b03      	subs	r3, r0, r4
 8008670:	3b15      	subs	r3, #21
 8008672:	f023 0303 	bic.w	r3, r3, #3
 8008676:	3304      	adds	r3, #4
 8008678:	f104 0215 	add.w	r2, r4, #21
 800867c:	4290      	cmp	r0, r2
 800867e:	bf38      	it	cc
 8008680:	2304      	movcc	r3, #4
 8008682:	f841 c003 	str.w	ip, [r1, r3]
 8008686:	f1bc 0f00 	cmp.w	ip, #0
 800868a:	d001      	beq.n	8008690 <__lshift+0xac>
 800868c:	f108 0602 	add.w	r6, r8, #2
 8008690:	3e01      	subs	r6, #1
 8008692:	4638      	mov	r0, r7
 8008694:	612e      	str	r6, [r5, #16]
 8008696:	4621      	mov	r1, r4
 8008698:	f7ff fdd2 	bl	8008240 <_Bfree>
 800869c:	4628      	mov	r0, r5
 800869e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80086a6:	3301      	adds	r3, #1
 80086a8:	e7c1      	b.n	800862e <__lshift+0x4a>
 80086aa:	3904      	subs	r1, #4
 80086ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80086b4:	4298      	cmp	r0, r3
 80086b6:	d8f9      	bhi.n	80086ac <__lshift+0xc8>
 80086b8:	e7ea      	b.n	8008690 <__lshift+0xac>
 80086ba:	bf00      	nop
 80086bc:	08009173 	.word	0x08009173
 80086c0:	080091e4 	.word	0x080091e4

080086c4 <__mcmp>:
 80086c4:	b530      	push	{r4, r5, lr}
 80086c6:	6902      	ldr	r2, [r0, #16]
 80086c8:	690c      	ldr	r4, [r1, #16]
 80086ca:	1b12      	subs	r2, r2, r4
 80086cc:	d10e      	bne.n	80086ec <__mcmp+0x28>
 80086ce:	f100 0314 	add.w	r3, r0, #20
 80086d2:	3114      	adds	r1, #20
 80086d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086e4:	42a5      	cmp	r5, r4
 80086e6:	d003      	beq.n	80086f0 <__mcmp+0x2c>
 80086e8:	d305      	bcc.n	80086f6 <__mcmp+0x32>
 80086ea:	2201      	movs	r2, #1
 80086ec:	4610      	mov	r0, r2
 80086ee:	bd30      	pop	{r4, r5, pc}
 80086f0:	4283      	cmp	r3, r0
 80086f2:	d3f3      	bcc.n	80086dc <__mcmp+0x18>
 80086f4:	e7fa      	b.n	80086ec <__mcmp+0x28>
 80086f6:	f04f 32ff 	mov.w	r2, #4294967295
 80086fa:	e7f7      	b.n	80086ec <__mcmp+0x28>

080086fc <__mdiff>:
 80086fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	460c      	mov	r4, r1
 8008702:	4606      	mov	r6, r0
 8008704:	4611      	mov	r1, r2
 8008706:	4620      	mov	r0, r4
 8008708:	4690      	mov	r8, r2
 800870a:	f7ff ffdb 	bl	80086c4 <__mcmp>
 800870e:	1e05      	subs	r5, r0, #0
 8008710:	d110      	bne.n	8008734 <__mdiff+0x38>
 8008712:	4629      	mov	r1, r5
 8008714:	4630      	mov	r0, r6
 8008716:	f7ff fd53 	bl	80081c0 <_Balloc>
 800871a:	b930      	cbnz	r0, 800872a <__mdiff+0x2e>
 800871c:	4b3a      	ldr	r3, [pc, #232]	; (8008808 <__mdiff+0x10c>)
 800871e:	4602      	mov	r2, r0
 8008720:	f240 2132 	movw	r1, #562	; 0x232
 8008724:	4839      	ldr	r0, [pc, #228]	; (800880c <__mdiff+0x110>)
 8008726:	f000 fb85 	bl	8008e34 <__assert_func>
 800872a:	2301      	movs	r3, #1
 800872c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008734:	bfa4      	itt	ge
 8008736:	4643      	movge	r3, r8
 8008738:	46a0      	movge	r8, r4
 800873a:	4630      	mov	r0, r6
 800873c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008740:	bfa6      	itte	ge
 8008742:	461c      	movge	r4, r3
 8008744:	2500      	movge	r5, #0
 8008746:	2501      	movlt	r5, #1
 8008748:	f7ff fd3a 	bl	80081c0 <_Balloc>
 800874c:	b920      	cbnz	r0, 8008758 <__mdiff+0x5c>
 800874e:	4b2e      	ldr	r3, [pc, #184]	; (8008808 <__mdiff+0x10c>)
 8008750:	4602      	mov	r2, r0
 8008752:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008756:	e7e5      	b.n	8008724 <__mdiff+0x28>
 8008758:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800875c:	6926      	ldr	r6, [r4, #16]
 800875e:	60c5      	str	r5, [r0, #12]
 8008760:	f104 0914 	add.w	r9, r4, #20
 8008764:	f108 0514 	add.w	r5, r8, #20
 8008768:	f100 0e14 	add.w	lr, r0, #20
 800876c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008770:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008774:	f108 0210 	add.w	r2, r8, #16
 8008778:	46f2      	mov	sl, lr
 800877a:	2100      	movs	r1, #0
 800877c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008780:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008784:	fa1f f883 	uxth.w	r8, r3
 8008788:	fa11 f18b 	uxtah	r1, r1, fp
 800878c:	0c1b      	lsrs	r3, r3, #16
 800878e:	eba1 0808 	sub.w	r8, r1, r8
 8008792:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008796:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800879a:	fa1f f888 	uxth.w	r8, r8
 800879e:	1419      	asrs	r1, r3, #16
 80087a0:	454e      	cmp	r6, r9
 80087a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087a6:	f84a 3b04 	str.w	r3, [sl], #4
 80087aa:	d8e7      	bhi.n	800877c <__mdiff+0x80>
 80087ac:	1b33      	subs	r3, r6, r4
 80087ae:	3b15      	subs	r3, #21
 80087b0:	f023 0303 	bic.w	r3, r3, #3
 80087b4:	3304      	adds	r3, #4
 80087b6:	3415      	adds	r4, #21
 80087b8:	42a6      	cmp	r6, r4
 80087ba:	bf38      	it	cc
 80087bc:	2304      	movcc	r3, #4
 80087be:	441d      	add	r5, r3
 80087c0:	4473      	add	r3, lr
 80087c2:	469e      	mov	lr, r3
 80087c4:	462e      	mov	r6, r5
 80087c6:	4566      	cmp	r6, ip
 80087c8:	d30e      	bcc.n	80087e8 <__mdiff+0xec>
 80087ca:	f10c 0203 	add.w	r2, ip, #3
 80087ce:	1b52      	subs	r2, r2, r5
 80087d0:	f022 0203 	bic.w	r2, r2, #3
 80087d4:	3d03      	subs	r5, #3
 80087d6:	45ac      	cmp	ip, r5
 80087d8:	bf38      	it	cc
 80087da:	2200      	movcc	r2, #0
 80087dc:	441a      	add	r2, r3
 80087de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80087e2:	b17b      	cbz	r3, 8008804 <__mdiff+0x108>
 80087e4:	6107      	str	r7, [r0, #16]
 80087e6:	e7a3      	b.n	8008730 <__mdiff+0x34>
 80087e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80087ec:	fa11 f288 	uxtah	r2, r1, r8
 80087f0:	1414      	asrs	r4, r2, #16
 80087f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087f6:	b292      	uxth	r2, r2
 80087f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087fc:	f84e 2b04 	str.w	r2, [lr], #4
 8008800:	1421      	asrs	r1, r4, #16
 8008802:	e7e0      	b.n	80087c6 <__mdiff+0xca>
 8008804:	3f01      	subs	r7, #1
 8008806:	e7ea      	b.n	80087de <__mdiff+0xe2>
 8008808:	08009173 	.word	0x08009173
 800880c:	080091e4 	.word	0x080091e4

08008810 <__d2b>:
 8008810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008814:	4689      	mov	r9, r1
 8008816:	2101      	movs	r1, #1
 8008818:	ec57 6b10 	vmov	r6, r7, d0
 800881c:	4690      	mov	r8, r2
 800881e:	f7ff fccf 	bl	80081c0 <_Balloc>
 8008822:	4604      	mov	r4, r0
 8008824:	b930      	cbnz	r0, 8008834 <__d2b+0x24>
 8008826:	4602      	mov	r2, r0
 8008828:	4b25      	ldr	r3, [pc, #148]	; (80088c0 <__d2b+0xb0>)
 800882a:	4826      	ldr	r0, [pc, #152]	; (80088c4 <__d2b+0xb4>)
 800882c:	f240 310a 	movw	r1, #778	; 0x30a
 8008830:	f000 fb00 	bl	8008e34 <__assert_func>
 8008834:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008838:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800883c:	bb35      	cbnz	r5, 800888c <__d2b+0x7c>
 800883e:	2e00      	cmp	r6, #0
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	d028      	beq.n	8008896 <__d2b+0x86>
 8008844:	4668      	mov	r0, sp
 8008846:	9600      	str	r6, [sp, #0]
 8008848:	f7ff fd82 	bl	8008350 <__lo0bits>
 800884c:	9900      	ldr	r1, [sp, #0]
 800884e:	b300      	cbz	r0, 8008892 <__d2b+0x82>
 8008850:	9a01      	ldr	r2, [sp, #4]
 8008852:	f1c0 0320 	rsb	r3, r0, #32
 8008856:	fa02 f303 	lsl.w	r3, r2, r3
 800885a:	430b      	orrs	r3, r1
 800885c:	40c2      	lsrs	r2, r0
 800885e:	6163      	str	r3, [r4, #20]
 8008860:	9201      	str	r2, [sp, #4]
 8008862:	9b01      	ldr	r3, [sp, #4]
 8008864:	61a3      	str	r3, [r4, #24]
 8008866:	2b00      	cmp	r3, #0
 8008868:	bf14      	ite	ne
 800886a:	2202      	movne	r2, #2
 800886c:	2201      	moveq	r2, #1
 800886e:	6122      	str	r2, [r4, #16]
 8008870:	b1d5      	cbz	r5, 80088a8 <__d2b+0x98>
 8008872:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008876:	4405      	add	r5, r0
 8008878:	f8c9 5000 	str.w	r5, [r9]
 800887c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008880:	f8c8 0000 	str.w	r0, [r8]
 8008884:	4620      	mov	r0, r4
 8008886:	b003      	add	sp, #12
 8008888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800888c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008890:	e7d5      	b.n	800883e <__d2b+0x2e>
 8008892:	6161      	str	r1, [r4, #20]
 8008894:	e7e5      	b.n	8008862 <__d2b+0x52>
 8008896:	a801      	add	r0, sp, #4
 8008898:	f7ff fd5a 	bl	8008350 <__lo0bits>
 800889c:	9b01      	ldr	r3, [sp, #4]
 800889e:	6163      	str	r3, [r4, #20]
 80088a0:	2201      	movs	r2, #1
 80088a2:	6122      	str	r2, [r4, #16]
 80088a4:	3020      	adds	r0, #32
 80088a6:	e7e3      	b.n	8008870 <__d2b+0x60>
 80088a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088b0:	f8c9 0000 	str.w	r0, [r9]
 80088b4:	6918      	ldr	r0, [r3, #16]
 80088b6:	f7ff fd2b 	bl	8008310 <__hi0bits>
 80088ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088be:	e7df      	b.n	8008880 <__d2b+0x70>
 80088c0:	08009173 	.word	0x08009173
 80088c4:	080091e4 	.word	0x080091e4

080088c8 <_calloc_r>:
 80088c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ca:	fba1 2402 	umull	r2, r4, r1, r2
 80088ce:	b94c      	cbnz	r4, 80088e4 <_calloc_r+0x1c>
 80088d0:	4611      	mov	r1, r2
 80088d2:	9201      	str	r2, [sp, #4]
 80088d4:	f000 f87a 	bl	80089cc <_malloc_r>
 80088d8:	9a01      	ldr	r2, [sp, #4]
 80088da:	4605      	mov	r5, r0
 80088dc:	b930      	cbnz	r0, 80088ec <_calloc_r+0x24>
 80088de:	4628      	mov	r0, r5
 80088e0:	b003      	add	sp, #12
 80088e2:	bd30      	pop	{r4, r5, pc}
 80088e4:	220c      	movs	r2, #12
 80088e6:	6002      	str	r2, [r0, #0]
 80088e8:	2500      	movs	r5, #0
 80088ea:	e7f8      	b.n	80088de <_calloc_r+0x16>
 80088ec:	4621      	mov	r1, r4
 80088ee:	f7fd fe9b 	bl	8006628 <memset>
 80088f2:	e7f4      	b.n	80088de <_calloc_r+0x16>

080088f4 <_free_r>:
 80088f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088f6:	2900      	cmp	r1, #0
 80088f8:	d044      	beq.n	8008984 <_free_r+0x90>
 80088fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088fe:	9001      	str	r0, [sp, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	f1a1 0404 	sub.w	r4, r1, #4
 8008906:	bfb8      	it	lt
 8008908:	18e4      	addlt	r4, r4, r3
 800890a:	f000 fb19 	bl	8008f40 <__malloc_lock>
 800890e:	4a1e      	ldr	r2, [pc, #120]	; (8008988 <_free_r+0x94>)
 8008910:	9801      	ldr	r0, [sp, #4]
 8008912:	6813      	ldr	r3, [r2, #0]
 8008914:	b933      	cbnz	r3, 8008924 <_free_r+0x30>
 8008916:	6063      	str	r3, [r4, #4]
 8008918:	6014      	str	r4, [r2, #0]
 800891a:	b003      	add	sp, #12
 800891c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008920:	f000 bb14 	b.w	8008f4c <__malloc_unlock>
 8008924:	42a3      	cmp	r3, r4
 8008926:	d908      	bls.n	800893a <_free_r+0x46>
 8008928:	6825      	ldr	r5, [r4, #0]
 800892a:	1961      	adds	r1, r4, r5
 800892c:	428b      	cmp	r3, r1
 800892e:	bf01      	itttt	eq
 8008930:	6819      	ldreq	r1, [r3, #0]
 8008932:	685b      	ldreq	r3, [r3, #4]
 8008934:	1949      	addeq	r1, r1, r5
 8008936:	6021      	streq	r1, [r4, #0]
 8008938:	e7ed      	b.n	8008916 <_free_r+0x22>
 800893a:	461a      	mov	r2, r3
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	b10b      	cbz	r3, 8008944 <_free_r+0x50>
 8008940:	42a3      	cmp	r3, r4
 8008942:	d9fa      	bls.n	800893a <_free_r+0x46>
 8008944:	6811      	ldr	r1, [r2, #0]
 8008946:	1855      	adds	r5, r2, r1
 8008948:	42a5      	cmp	r5, r4
 800894a:	d10b      	bne.n	8008964 <_free_r+0x70>
 800894c:	6824      	ldr	r4, [r4, #0]
 800894e:	4421      	add	r1, r4
 8008950:	1854      	adds	r4, r2, r1
 8008952:	42a3      	cmp	r3, r4
 8008954:	6011      	str	r1, [r2, #0]
 8008956:	d1e0      	bne.n	800891a <_free_r+0x26>
 8008958:	681c      	ldr	r4, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	6053      	str	r3, [r2, #4]
 800895e:	4421      	add	r1, r4
 8008960:	6011      	str	r1, [r2, #0]
 8008962:	e7da      	b.n	800891a <_free_r+0x26>
 8008964:	d902      	bls.n	800896c <_free_r+0x78>
 8008966:	230c      	movs	r3, #12
 8008968:	6003      	str	r3, [r0, #0]
 800896a:	e7d6      	b.n	800891a <_free_r+0x26>
 800896c:	6825      	ldr	r5, [r4, #0]
 800896e:	1961      	adds	r1, r4, r5
 8008970:	428b      	cmp	r3, r1
 8008972:	bf04      	itt	eq
 8008974:	6819      	ldreq	r1, [r3, #0]
 8008976:	685b      	ldreq	r3, [r3, #4]
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	bf04      	itt	eq
 800897c:	1949      	addeq	r1, r1, r5
 800897e:	6021      	streq	r1, [r4, #0]
 8008980:	6054      	str	r4, [r2, #4]
 8008982:	e7ca      	b.n	800891a <_free_r+0x26>
 8008984:	b003      	add	sp, #12
 8008986:	bd30      	pop	{r4, r5, pc}
 8008988:	24000954 	.word	0x24000954

0800898c <sbrk_aligned>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	4e0e      	ldr	r6, [pc, #56]	; (80089c8 <sbrk_aligned+0x3c>)
 8008990:	460c      	mov	r4, r1
 8008992:	6831      	ldr	r1, [r6, #0]
 8008994:	4605      	mov	r5, r0
 8008996:	b911      	cbnz	r1, 800899e <sbrk_aligned+0x12>
 8008998:	f000 f9e6 	bl	8008d68 <_sbrk_r>
 800899c:	6030      	str	r0, [r6, #0]
 800899e:	4621      	mov	r1, r4
 80089a0:	4628      	mov	r0, r5
 80089a2:	f000 f9e1 	bl	8008d68 <_sbrk_r>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	d00a      	beq.n	80089c0 <sbrk_aligned+0x34>
 80089aa:	1cc4      	adds	r4, r0, #3
 80089ac:	f024 0403 	bic.w	r4, r4, #3
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d007      	beq.n	80089c4 <sbrk_aligned+0x38>
 80089b4:	1a21      	subs	r1, r4, r0
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 f9d6 	bl	8008d68 <_sbrk_r>
 80089bc:	3001      	adds	r0, #1
 80089be:	d101      	bne.n	80089c4 <sbrk_aligned+0x38>
 80089c0:	f04f 34ff 	mov.w	r4, #4294967295
 80089c4:	4620      	mov	r0, r4
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	24000958 	.word	0x24000958

080089cc <_malloc_r>:
 80089cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d0:	1ccd      	adds	r5, r1, #3
 80089d2:	f025 0503 	bic.w	r5, r5, #3
 80089d6:	3508      	adds	r5, #8
 80089d8:	2d0c      	cmp	r5, #12
 80089da:	bf38      	it	cc
 80089dc:	250c      	movcc	r5, #12
 80089de:	2d00      	cmp	r5, #0
 80089e0:	4607      	mov	r7, r0
 80089e2:	db01      	blt.n	80089e8 <_malloc_r+0x1c>
 80089e4:	42a9      	cmp	r1, r5
 80089e6:	d905      	bls.n	80089f4 <_malloc_r+0x28>
 80089e8:	230c      	movs	r3, #12
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	2600      	movs	r6, #0
 80089ee:	4630      	mov	r0, r6
 80089f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f4:	4e2e      	ldr	r6, [pc, #184]	; (8008ab0 <_malloc_r+0xe4>)
 80089f6:	f000 faa3 	bl	8008f40 <__malloc_lock>
 80089fa:	6833      	ldr	r3, [r6, #0]
 80089fc:	461c      	mov	r4, r3
 80089fe:	bb34      	cbnz	r4, 8008a4e <_malloc_r+0x82>
 8008a00:	4629      	mov	r1, r5
 8008a02:	4638      	mov	r0, r7
 8008a04:	f7ff ffc2 	bl	800898c <sbrk_aligned>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	d14d      	bne.n	8008aaa <_malloc_r+0xde>
 8008a0e:	6834      	ldr	r4, [r6, #0]
 8008a10:	4626      	mov	r6, r4
 8008a12:	2e00      	cmp	r6, #0
 8008a14:	d140      	bne.n	8008a98 <_malloc_r+0xcc>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	eb04 0803 	add.w	r8, r4, r3
 8008a20:	f000 f9a2 	bl	8008d68 <_sbrk_r>
 8008a24:	4580      	cmp	r8, r0
 8008a26:	d13a      	bne.n	8008a9e <_malloc_r+0xd2>
 8008a28:	6821      	ldr	r1, [r4, #0]
 8008a2a:	3503      	adds	r5, #3
 8008a2c:	1a6d      	subs	r5, r5, r1
 8008a2e:	f025 0503 	bic.w	r5, r5, #3
 8008a32:	3508      	adds	r5, #8
 8008a34:	2d0c      	cmp	r5, #12
 8008a36:	bf38      	it	cc
 8008a38:	250c      	movcc	r5, #12
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff ffa5 	bl	800898c <sbrk_aligned>
 8008a42:	3001      	adds	r0, #1
 8008a44:	d02b      	beq.n	8008a9e <_malloc_r+0xd2>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	442b      	add	r3, r5
 8008a4a:	6023      	str	r3, [r4, #0]
 8008a4c:	e00e      	b.n	8008a6c <_malloc_r+0xa0>
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	1b52      	subs	r2, r2, r5
 8008a52:	d41e      	bmi.n	8008a92 <_malloc_r+0xc6>
 8008a54:	2a0b      	cmp	r2, #11
 8008a56:	d916      	bls.n	8008a86 <_malloc_r+0xba>
 8008a58:	1961      	adds	r1, r4, r5
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	6025      	str	r5, [r4, #0]
 8008a5e:	bf18      	it	ne
 8008a60:	6059      	strne	r1, [r3, #4]
 8008a62:	6863      	ldr	r3, [r4, #4]
 8008a64:	bf08      	it	eq
 8008a66:	6031      	streq	r1, [r6, #0]
 8008a68:	5162      	str	r2, [r4, r5]
 8008a6a:	604b      	str	r3, [r1, #4]
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f104 060b 	add.w	r6, r4, #11
 8008a72:	f000 fa6b 	bl	8008f4c <__malloc_unlock>
 8008a76:	f026 0607 	bic.w	r6, r6, #7
 8008a7a:	1d23      	adds	r3, r4, #4
 8008a7c:	1af2      	subs	r2, r6, r3
 8008a7e:	d0b6      	beq.n	80089ee <_malloc_r+0x22>
 8008a80:	1b9b      	subs	r3, r3, r6
 8008a82:	50a3      	str	r3, [r4, r2]
 8008a84:	e7b3      	b.n	80089ee <_malloc_r+0x22>
 8008a86:	6862      	ldr	r2, [r4, #4]
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	bf0c      	ite	eq
 8008a8c:	6032      	streq	r2, [r6, #0]
 8008a8e:	605a      	strne	r2, [r3, #4]
 8008a90:	e7ec      	b.n	8008a6c <_malloc_r+0xa0>
 8008a92:	4623      	mov	r3, r4
 8008a94:	6864      	ldr	r4, [r4, #4]
 8008a96:	e7b2      	b.n	80089fe <_malloc_r+0x32>
 8008a98:	4634      	mov	r4, r6
 8008a9a:	6876      	ldr	r6, [r6, #4]
 8008a9c:	e7b9      	b.n	8008a12 <_malloc_r+0x46>
 8008a9e:	230c      	movs	r3, #12
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f000 fa52 	bl	8008f4c <__malloc_unlock>
 8008aa8:	e7a1      	b.n	80089ee <_malloc_r+0x22>
 8008aaa:	6025      	str	r5, [r4, #0]
 8008aac:	e7de      	b.n	8008a6c <_malloc_r+0xa0>
 8008aae:	bf00      	nop
 8008ab0:	24000954 	.word	0x24000954

08008ab4 <__sfputc_r>:
 8008ab4:	6893      	ldr	r3, [r2, #8]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	b410      	push	{r4}
 8008abc:	6093      	str	r3, [r2, #8]
 8008abe:	da08      	bge.n	8008ad2 <__sfputc_r+0x1e>
 8008ac0:	6994      	ldr	r4, [r2, #24]
 8008ac2:	42a3      	cmp	r3, r4
 8008ac4:	db01      	blt.n	8008aca <__sfputc_r+0x16>
 8008ac6:	290a      	cmp	r1, #10
 8008ac8:	d103      	bne.n	8008ad2 <__sfputc_r+0x1e>
 8008aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ace:	f7fe ba83 	b.w	8006fd8 <__swbuf_r>
 8008ad2:	6813      	ldr	r3, [r2, #0]
 8008ad4:	1c58      	adds	r0, r3, #1
 8008ad6:	6010      	str	r0, [r2, #0]
 8008ad8:	7019      	strb	r1, [r3, #0]
 8008ada:	4608      	mov	r0, r1
 8008adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <__sfputs_r>:
 8008ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	4614      	mov	r4, r2
 8008aea:	18d5      	adds	r5, r2, r3
 8008aec:	42ac      	cmp	r4, r5
 8008aee:	d101      	bne.n	8008af4 <__sfputs_r+0x12>
 8008af0:	2000      	movs	r0, #0
 8008af2:	e007      	b.n	8008b04 <__sfputs_r+0x22>
 8008af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af8:	463a      	mov	r2, r7
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff ffda 	bl	8008ab4 <__sfputc_r>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d1f3      	bne.n	8008aec <__sfputs_r+0xa>
 8008b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b08 <_vfiprintf_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	b09d      	sub	sp, #116	; 0x74
 8008b10:	4614      	mov	r4, r2
 8008b12:	4698      	mov	r8, r3
 8008b14:	4606      	mov	r6, r0
 8008b16:	b118      	cbz	r0, 8008b20 <_vfiprintf_r+0x18>
 8008b18:	6983      	ldr	r3, [r0, #24]
 8008b1a:	b90b      	cbnz	r3, 8008b20 <_vfiprintf_r+0x18>
 8008b1c:	f7ff fa30 	bl	8007f80 <__sinit>
 8008b20:	4b89      	ldr	r3, [pc, #548]	; (8008d48 <_vfiprintf_r+0x240>)
 8008b22:	429d      	cmp	r5, r3
 8008b24:	d11b      	bne.n	8008b5e <_vfiprintf_r+0x56>
 8008b26:	6875      	ldr	r5, [r6, #4]
 8008b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b2a:	07d9      	lsls	r1, r3, #31
 8008b2c:	d405      	bmi.n	8008b3a <_vfiprintf_r+0x32>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	059a      	lsls	r2, r3, #22
 8008b32:	d402      	bmi.n	8008b3a <_vfiprintf_r+0x32>
 8008b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b36:	f7ff fac6 	bl	80080c6 <__retarget_lock_acquire_recursive>
 8008b3a:	89ab      	ldrh	r3, [r5, #12]
 8008b3c:	071b      	lsls	r3, r3, #28
 8008b3e:	d501      	bpl.n	8008b44 <_vfiprintf_r+0x3c>
 8008b40:	692b      	ldr	r3, [r5, #16]
 8008b42:	b9eb      	cbnz	r3, 8008b80 <_vfiprintf_r+0x78>
 8008b44:	4629      	mov	r1, r5
 8008b46:	4630      	mov	r0, r6
 8008b48:	f7fe fa98 	bl	800707c <__swsetup_r>
 8008b4c:	b1c0      	cbz	r0, 8008b80 <_vfiprintf_r+0x78>
 8008b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b50:	07dc      	lsls	r4, r3, #31
 8008b52:	d50e      	bpl.n	8008b72 <_vfiprintf_r+0x6a>
 8008b54:	f04f 30ff 	mov.w	r0, #4294967295
 8008b58:	b01d      	add	sp, #116	; 0x74
 8008b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5e:	4b7b      	ldr	r3, [pc, #492]	; (8008d4c <_vfiprintf_r+0x244>)
 8008b60:	429d      	cmp	r5, r3
 8008b62:	d101      	bne.n	8008b68 <_vfiprintf_r+0x60>
 8008b64:	68b5      	ldr	r5, [r6, #8]
 8008b66:	e7df      	b.n	8008b28 <_vfiprintf_r+0x20>
 8008b68:	4b79      	ldr	r3, [pc, #484]	; (8008d50 <_vfiprintf_r+0x248>)
 8008b6a:	429d      	cmp	r5, r3
 8008b6c:	bf08      	it	eq
 8008b6e:	68f5      	ldreq	r5, [r6, #12]
 8008b70:	e7da      	b.n	8008b28 <_vfiprintf_r+0x20>
 8008b72:	89ab      	ldrh	r3, [r5, #12]
 8008b74:	0598      	lsls	r0, r3, #22
 8008b76:	d4ed      	bmi.n	8008b54 <_vfiprintf_r+0x4c>
 8008b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b7a:	f7ff faa5 	bl	80080c8 <__retarget_lock_release_recursive>
 8008b7e:	e7e9      	b.n	8008b54 <_vfiprintf_r+0x4c>
 8008b80:	2300      	movs	r3, #0
 8008b82:	9309      	str	r3, [sp, #36]	; 0x24
 8008b84:	2320      	movs	r3, #32
 8008b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b8e:	2330      	movs	r3, #48	; 0x30
 8008b90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d54 <_vfiprintf_r+0x24c>
 8008b94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b98:	f04f 0901 	mov.w	r9, #1
 8008b9c:	4623      	mov	r3, r4
 8008b9e:	469a      	mov	sl, r3
 8008ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ba4:	b10a      	cbz	r2, 8008baa <_vfiprintf_r+0xa2>
 8008ba6:	2a25      	cmp	r2, #37	; 0x25
 8008ba8:	d1f9      	bne.n	8008b9e <_vfiprintf_r+0x96>
 8008baa:	ebba 0b04 	subs.w	fp, sl, r4
 8008bae:	d00b      	beq.n	8008bc8 <_vfiprintf_r+0xc0>
 8008bb0:	465b      	mov	r3, fp
 8008bb2:	4622      	mov	r2, r4
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f7ff ff93 	bl	8008ae2 <__sfputs_r>
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f000 80aa 	beq.w	8008d16 <_vfiprintf_r+0x20e>
 8008bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bc4:	445a      	add	r2, fp
 8008bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 80a2 	beq.w	8008d16 <_vfiprintf_r+0x20e>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bdc:	f10a 0a01 	add.w	sl, sl, #1
 8008be0:	9304      	str	r3, [sp, #16]
 8008be2:	9307      	str	r3, [sp, #28]
 8008be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008be8:	931a      	str	r3, [sp, #104]	; 0x68
 8008bea:	4654      	mov	r4, sl
 8008bec:	2205      	movs	r2, #5
 8008bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf2:	4858      	ldr	r0, [pc, #352]	; (8008d54 <_vfiprintf_r+0x24c>)
 8008bf4:	f7f7 fb7c 	bl	80002f0 <memchr>
 8008bf8:	9a04      	ldr	r2, [sp, #16]
 8008bfa:	b9d8      	cbnz	r0, 8008c34 <_vfiprintf_r+0x12c>
 8008bfc:	06d1      	lsls	r1, r2, #27
 8008bfe:	bf44      	itt	mi
 8008c00:	2320      	movmi	r3, #32
 8008c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c06:	0713      	lsls	r3, r2, #28
 8008c08:	bf44      	itt	mi
 8008c0a:	232b      	movmi	r3, #43	; 0x2b
 8008c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c10:	f89a 3000 	ldrb.w	r3, [sl]
 8008c14:	2b2a      	cmp	r3, #42	; 0x2a
 8008c16:	d015      	beq.n	8008c44 <_vfiprintf_r+0x13c>
 8008c18:	9a07      	ldr	r2, [sp, #28]
 8008c1a:	4654      	mov	r4, sl
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	f04f 0c0a 	mov.w	ip, #10
 8008c22:	4621      	mov	r1, r4
 8008c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c28:	3b30      	subs	r3, #48	; 0x30
 8008c2a:	2b09      	cmp	r3, #9
 8008c2c:	d94e      	bls.n	8008ccc <_vfiprintf_r+0x1c4>
 8008c2e:	b1b0      	cbz	r0, 8008c5e <_vfiprintf_r+0x156>
 8008c30:	9207      	str	r2, [sp, #28]
 8008c32:	e014      	b.n	8008c5e <_vfiprintf_r+0x156>
 8008c34:	eba0 0308 	sub.w	r3, r0, r8
 8008c38:	fa09 f303 	lsl.w	r3, r9, r3
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	9304      	str	r3, [sp, #16]
 8008c40:	46a2      	mov	sl, r4
 8008c42:	e7d2      	b.n	8008bea <_vfiprintf_r+0xe2>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	1d19      	adds	r1, r3, #4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	9103      	str	r1, [sp, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bfbb      	ittet	lt
 8008c50:	425b      	neglt	r3, r3
 8008c52:	f042 0202 	orrlt.w	r2, r2, #2
 8008c56:	9307      	strge	r3, [sp, #28]
 8008c58:	9307      	strlt	r3, [sp, #28]
 8008c5a:	bfb8      	it	lt
 8008c5c:	9204      	strlt	r2, [sp, #16]
 8008c5e:	7823      	ldrb	r3, [r4, #0]
 8008c60:	2b2e      	cmp	r3, #46	; 0x2e
 8008c62:	d10c      	bne.n	8008c7e <_vfiprintf_r+0x176>
 8008c64:	7863      	ldrb	r3, [r4, #1]
 8008c66:	2b2a      	cmp	r3, #42	; 0x2a
 8008c68:	d135      	bne.n	8008cd6 <_vfiprintf_r+0x1ce>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	1d1a      	adds	r2, r3, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	9203      	str	r2, [sp, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfb8      	it	lt
 8008c76:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c7a:	3402      	adds	r4, #2
 8008c7c:	9305      	str	r3, [sp, #20]
 8008c7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d64 <_vfiprintf_r+0x25c>
 8008c82:	7821      	ldrb	r1, [r4, #0]
 8008c84:	2203      	movs	r2, #3
 8008c86:	4650      	mov	r0, sl
 8008c88:	f7f7 fb32 	bl	80002f0 <memchr>
 8008c8c:	b140      	cbz	r0, 8008ca0 <_vfiprintf_r+0x198>
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	eba0 000a 	sub.w	r0, r0, sl
 8008c94:	fa03 f000 	lsl.w	r0, r3, r0
 8008c98:	9b04      	ldr	r3, [sp, #16]
 8008c9a:	4303      	orrs	r3, r0
 8008c9c:	3401      	adds	r4, #1
 8008c9e:	9304      	str	r3, [sp, #16]
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	482c      	ldr	r0, [pc, #176]	; (8008d58 <_vfiprintf_r+0x250>)
 8008ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008caa:	2206      	movs	r2, #6
 8008cac:	f7f7 fb20 	bl	80002f0 <memchr>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d03f      	beq.n	8008d34 <_vfiprintf_r+0x22c>
 8008cb4:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <_vfiprintf_r+0x254>)
 8008cb6:	bb1b      	cbnz	r3, 8008d00 <_vfiprintf_r+0x1f8>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	3307      	adds	r3, #7
 8008cbc:	f023 0307 	bic.w	r3, r3, #7
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	9303      	str	r3, [sp, #12]
 8008cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc6:	443b      	add	r3, r7
 8008cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cca:	e767      	b.n	8008b9c <_vfiprintf_r+0x94>
 8008ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	e7a5      	b.n	8008c22 <_vfiprintf_r+0x11a>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	3401      	adds	r4, #1
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f04f 0c0a 	mov.w	ip, #10
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce8:	3a30      	subs	r2, #48	; 0x30
 8008cea:	2a09      	cmp	r2, #9
 8008cec:	d903      	bls.n	8008cf6 <_vfiprintf_r+0x1ee>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0c5      	beq.n	8008c7e <_vfiprintf_r+0x176>
 8008cf2:	9105      	str	r1, [sp, #20]
 8008cf4:	e7c3      	b.n	8008c7e <_vfiprintf_r+0x176>
 8008cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e7f0      	b.n	8008ce2 <_vfiprintf_r+0x1da>
 8008d00:	ab03      	add	r3, sp, #12
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	462a      	mov	r2, r5
 8008d06:	4b16      	ldr	r3, [pc, #88]	; (8008d60 <_vfiprintf_r+0x258>)
 8008d08:	a904      	add	r1, sp, #16
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f7fd fd24 	bl	8006758 <_printf_float>
 8008d10:	4607      	mov	r7, r0
 8008d12:	1c78      	adds	r0, r7, #1
 8008d14:	d1d6      	bne.n	8008cc4 <_vfiprintf_r+0x1bc>
 8008d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d18:	07d9      	lsls	r1, r3, #31
 8008d1a:	d405      	bmi.n	8008d28 <_vfiprintf_r+0x220>
 8008d1c:	89ab      	ldrh	r3, [r5, #12]
 8008d1e:	059a      	lsls	r2, r3, #22
 8008d20:	d402      	bmi.n	8008d28 <_vfiprintf_r+0x220>
 8008d22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d24:	f7ff f9d0 	bl	80080c8 <__retarget_lock_release_recursive>
 8008d28:	89ab      	ldrh	r3, [r5, #12]
 8008d2a:	065b      	lsls	r3, r3, #25
 8008d2c:	f53f af12 	bmi.w	8008b54 <_vfiprintf_r+0x4c>
 8008d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d32:	e711      	b.n	8008b58 <_vfiprintf_r+0x50>
 8008d34:	ab03      	add	r3, sp, #12
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	462a      	mov	r2, r5
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <_vfiprintf_r+0x258>)
 8008d3c:	a904      	add	r1, sp, #16
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7fd ff96 	bl	8006c70 <_printf_i>
 8008d44:	e7e4      	b.n	8008d10 <_vfiprintf_r+0x208>
 8008d46:	bf00      	nop
 8008d48:	080091a4 	.word	0x080091a4
 8008d4c:	080091c4 	.word	0x080091c4
 8008d50:	08009184 	.word	0x08009184
 8008d54:	0800933c 	.word	0x0800933c
 8008d58:	08009346 	.word	0x08009346
 8008d5c:	08006759 	.word	0x08006759
 8008d60:	08008ae3 	.word	0x08008ae3
 8008d64:	08009342 	.word	0x08009342

08008d68 <_sbrk_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d06      	ldr	r5, [pc, #24]	; (8008d84 <_sbrk_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f8 f9aa 	bl	80010cc <_sbrk>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_sbrk_r+0x1a>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_sbrk_r+0x1a>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	2400095c 	.word	0x2400095c

08008d88 <__sread>:
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d90:	f000 f8e2 	bl	8008f58 <_read_r>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	bfab      	itete	ge
 8008d98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d9c:	181b      	addge	r3, r3, r0
 8008d9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008da2:	bfac      	ite	ge
 8008da4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008da6:	81a3      	strhlt	r3, [r4, #12]
 8008da8:	bd10      	pop	{r4, pc}

08008daa <__swrite>:
 8008daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dae:	461f      	mov	r7, r3
 8008db0:	898b      	ldrh	r3, [r1, #12]
 8008db2:	05db      	lsls	r3, r3, #23
 8008db4:	4605      	mov	r5, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	4616      	mov	r6, r2
 8008dba:	d505      	bpl.n	8008dc8 <__swrite+0x1e>
 8008dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f000 f898 	bl	8008ef8 <_lseek_r>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dd2:	81a3      	strh	r3, [r4, #12]
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	4628      	mov	r0, r5
 8008dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dde:	f000 b817 	b.w	8008e10 <_write_r>

08008de2 <__sseek>:
 8008de2:	b510      	push	{r4, lr}
 8008de4:	460c      	mov	r4, r1
 8008de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dea:	f000 f885 	bl	8008ef8 <_lseek_r>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	bf15      	itete	ne
 8008df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dfe:	81a3      	strheq	r3, [r4, #12]
 8008e00:	bf18      	it	ne
 8008e02:	81a3      	strhne	r3, [r4, #12]
 8008e04:	bd10      	pop	{r4, pc}

08008e06 <__sclose>:
 8008e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e0a:	f000 b831 	b.w	8008e70 <_close_r>
	...

08008e10 <_write_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4d07      	ldr	r5, [pc, #28]	; (8008e30 <_write_r+0x20>)
 8008e14:	4604      	mov	r4, r0
 8008e16:	4608      	mov	r0, r1
 8008e18:	4611      	mov	r1, r2
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	602a      	str	r2, [r5, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f7f8 f903 	bl	800102a <_write>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	d102      	bne.n	8008e2e <_write_r+0x1e>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	b103      	cbz	r3, 8008e2e <_write_r+0x1e>
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	2400095c 	.word	0x2400095c

08008e34 <__assert_func>:
 8008e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e36:	4614      	mov	r4, r2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <__assert_func+0x2c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4605      	mov	r5, r0
 8008e40:	68d8      	ldr	r0, [r3, #12]
 8008e42:	b14c      	cbz	r4, 8008e58 <__assert_func+0x24>
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <__assert_func+0x30>)
 8008e46:	9100      	str	r1, [sp, #0]
 8008e48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e4c:	4906      	ldr	r1, [pc, #24]	; (8008e68 <__assert_func+0x34>)
 8008e4e:	462b      	mov	r3, r5
 8008e50:	f000 f81e 	bl	8008e90 <fiprintf>
 8008e54:	f000 f89f 	bl	8008f96 <abort>
 8008e58:	4b04      	ldr	r3, [pc, #16]	; (8008e6c <__assert_func+0x38>)
 8008e5a:	461c      	mov	r4, r3
 8008e5c:	e7f3      	b.n	8008e46 <__assert_func+0x12>
 8008e5e:	bf00      	nop
 8008e60:	24000010 	.word	0x24000010
 8008e64:	0800934d 	.word	0x0800934d
 8008e68:	0800935a 	.word	0x0800935a
 8008e6c:	08009388 	.word	0x08009388

08008e70 <_close_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4d06      	ldr	r5, [pc, #24]	; (8008e8c <_close_r+0x1c>)
 8008e74:	2300      	movs	r3, #0
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	602b      	str	r3, [r5, #0]
 8008e7c:	f7f8 f8f1 	bl	8001062 <_close>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_close_r+0x1a>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_close_r+0x1a>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	2400095c 	.word	0x2400095c

08008e90 <fiprintf>:
 8008e90:	b40e      	push	{r1, r2, r3}
 8008e92:	b503      	push	{r0, r1, lr}
 8008e94:	4601      	mov	r1, r0
 8008e96:	ab03      	add	r3, sp, #12
 8008e98:	4805      	ldr	r0, [pc, #20]	; (8008eb0 <fiprintf+0x20>)
 8008e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9e:	6800      	ldr	r0, [r0, #0]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	f7ff fe31 	bl	8008b08 <_vfiprintf_r>
 8008ea6:	b002      	add	sp, #8
 8008ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eac:	b003      	add	sp, #12
 8008eae:	4770      	bx	lr
 8008eb0:	24000010 	.word	0x24000010

08008eb4 <_fstat_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d07      	ldr	r5, [pc, #28]	; (8008ed4 <_fstat_r+0x20>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	f7f8 f8da 	bl	800107a <_fstat>
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	d102      	bne.n	8008ed0 <_fstat_r+0x1c>
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	b103      	cbz	r3, 8008ed0 <_fstat_r+0x1c>
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	bd38      	pop	{r3, r4, r5, pc}
 8008ed2:	bf00      	nop
 8008ed4:	2400095c 	.word	0x2400095c

08008ed8 <_isatty_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d06      	ldr	r5, [pc, #24]	; (8008ef4 <_isatty_r+0x1c>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7f8 f8d9 	bl	800109a <_isatty>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_isatty_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_isatty_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	2400095c 	.word	0x2400095c

08008ef8 <_lseek_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d07      	ldr	r5, [pc, #28]	; (8008f18 <_lseek_r+0x20>)
 8008efc:	4604      	mov	r4, r0
 8008efe:	4608      	mov	r0, r1
 8008f00:	4611      	mov	r1, r2
 8008f02:	2200      	movs	r2, #0
 8008f04:	602a      	str	r2, [r5, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	f7f8 f8d2 	bl	80010b0 <_lseek>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_lseek_r+0x1e>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_lseek_r+0x1e>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	2400095c 	.word	0x2400095c

08008f1c <__ascii_mbtowc>:
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	b901      	cbnz	r1, 8008f22 <__ascii_mbtowc+0x6>
 8008f20:	a901      	add	r1, sp, #4
 8008f22:	b142      	cbz	r2, 8008f36 <__ascii_mbtowc+0x1a>
 8008f24:	b14b      	cbz	r3, 8008f3a <__ascii_mbtowc+0x1e>
 8008f26:	7813      	ldrb	r3, [r2, #0]
 8008f28:	600b      	str	r3, [r1, #0]
 8008f2a:	7812      	ldrb	r2, [r2, #0]
 8008f2c:	1e10      	subs	r0, r2, #0
 8008f2e:	bf18      	it	ne
 8008f30:	2001      	movne	r0, #1
 8008f32:	b002      	add	sp, #8
 8008f34:	4770      	bx	lr
 8008f36:	4610      	mov	r0, r2
 8008f38:	e7fb      	b.n	8008f32 <__ascii_mbtowc+0x16>
 8008f3a:	f06f 0001 	mvn.w	r0, #1
 8008f3e:	e7f8      	b.n	8008f32 <__ascii_mbtowc+0x16>

08008f40 <__malloc_lock>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__malloc_lock+0x8>)
 8008f42:	f7ff b8c0 	b.w	80080c6 <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	24000950 	.word	0x24000950

08008f4c <__malloc_unlock>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__malloc_unlock+0x8>)
 8008f4e:	f7ff b8bb 	b.w	80080c8 <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	24000950 	.word	0x24000950

08008f58 <_read_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4d07      	ldr	r5, [pc, #28]	; (8008f78 <_read_r+0x20>)
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	4608      	mov	r0, r1
 8008f60:	4611      	mov	r1, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	602a      	str	r2, [r5, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f7f8 f842 	bl	8000ff0 <_read>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d102      	bne.n	8008f76 <_read_r+0x1e>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	b103      	cbz	r3, 8008f76 <_read_r+0x1e>
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	2400095c 	.word	0x2400095c

08008f7c <__ascii_wctomb>:
 8008f7c:	b149      	cbz	r1, 8008f92 <__ascii_wctomb+0x16>
 8008f7e:	2aff      	cmp	r2, #255	; 0xff
 8008f80:	bf85      	ittet	hi
 8008f82:	238a      	movhi	r3, #138	; 0x8a
 8008f84:	6003      	strhi	r3, [r0, #0]
 8008f86:	700a      	strbls	r2, [r1, #0]
 8008f88:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f8c:	bf98      	it	ls
 8008f8e:	2001      	movls	r0, #1
 8008f90:	4770      	bx	lr
 8008f92:	4608      	mov	r0, r1
 8008f94:	4770      	bx	lr

08008f96 <abort>:
 8008f96:	b508      	push	{r3, lr}
 8008f98:	2006      	movs	r0, #6
 8008f9a:	f000 f82b 	bl	8008ff4 <raise>
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	f7f8 f81c 	bl	8000fdc <_exit>

08008fa4 <_raise_r>:
 8008fa4:	291f      	cmp	r1, #31
 8008fa6:	b538      	push	{r3, r4, r5, lr}
 8008fa8:	4604      	mov	r4, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	d904      	bls.n	8008fb8 <_raise_r+0x14>
 8008fae:	2316      	movs	r3, #22
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fba:	b112      	cbz	r2, 8008fc2 <_raise_r+0x1e>
 8008fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc0:	b94b      	cbnz	r3, 8008fd6 <_raise_r+0x32>
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 f830 	bl	8009028 <_getpid_r>
 8008fc8:	462a      	mov	r2, r5
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4620      	mov	r0, r4
 8008fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd2:	f000 b817 	b.w	8009004 <_kill_r>
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d00a      	beq.n	8008ff0 <_raise_r+0x4c>
 8008fda:	1c59      	adds	r1, r3, #1
 8008fdc:	d103      	bne.n	8008fe6 <_raise_r+0x42>
 8008fde:	2316      	movs	r3, #22
 8008fe0:	6003      	str	r3, [r0, #0]
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	e7e7      	b.n	8008fb6 <_raise_r+0x12>
 8008fe6:	2400      	movs	r4, #0
 8008fe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fec:	4628      	mov	r0, r5
 8008fee:	4798      	blx	r3
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e7e0      	b.n	8008fb6 <_raise_r+0x12>

08008ff4 <raise>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <raise+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f7ff bfd3 	b.w	8008fa4 <_raise_r>
 8008ffe:	bf00      	nop
 8009000:	24000010 	.word	0x24000010

08009004 <_kill_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4d07      	ldr	r5, [pc, #28]	; (8009024 <_kill_r+0x20>)
 8009008:	2300      	movs	r3, #0
 800900a:	4604      	mov	r4, r0
 800900c:	4608      	mov	r0, r1
 800900e:	4611      	mov	r1, r2
 8009010:	602b      	str	r3, [r5, #0]
 8009012:	f7f7 ffd3 	bl	8000fbc <_kill>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d102      	bne.n	8009020 <_kill_r+0x1c>
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	b103      	cbz	r3, 8009020 <_kill_r+0x1c>
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	bd38      	pop	{r3, r4, r5, pc}
 8009022:	bf00      	nop
 8009024:	2400095c 	.word	0x2400095c

08009028 <_getpid_r>:
 8009028:	f7f7 bfc0 	b.w	8000fac <_getpid>

0800902c <_init>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr

08009038 <_fini>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr
