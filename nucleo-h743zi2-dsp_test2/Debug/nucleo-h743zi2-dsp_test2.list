
nucleo-h743zi2-dsp_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009008  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  080092a8  080092a8  000192a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009768  08009768  00019768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009770  08009770  00019770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009774  08009774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08009778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e0  08009958  000201e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000240  080099b8  00020240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  240002a0  08009a18  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000960  08009a18  00020960  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cca  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbe  00000000  00000000  00039f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0003cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  0003db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e725  00000000  00000000  0003ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000707d  00000000  00000000  0004d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000c5  00000000  00000000  00054272  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000053ec  00000000  00000000  00054338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00000286  00000000  00000000  00059724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000599ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000599d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a0 	.word	0x240002a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009290 	.word	0x08009290

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a4 	.word	0x240002a4
 80002dc:	08009290 	.word	0x08009290

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000698:	b08a      	sub	sp, #40	; 0x28
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 fe8c 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f8d0 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 fa18 	bl	8000ad8 <MX_GPIO_Init>
  MX_ETH_Init();
 80006a8:	f000 f94c 	bl	8000944 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006ac:	f000 f996 	bl	80009dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b0:	f000 f9e0 	bl	8000a74 <MX_USB_OTG_FS_PCD_Init>

  /* try out ARM dot product */
  // float32_t vectorA [] = {1,2,3};
  // float32_t vectorB [] = {1,2,3};
  // uint32_t blockSize = 3;
  float32_t result = 999;
 80006b4:	4b44      	ldr	r3, [pc, #272]	; (80007c8 <main+0x134>)
 80006b6:	60fb      	str	r3, [r7, #12]

  // seed random number
  srand(time(NULL));
 80006b8:	2000      	movs	r0, #0
 80006ba:	f006 fd89 	bl	80071d0 <time>
 80006be:	4602      	mov	r2, r0
 80006c0:	460b      	mov	r3, r1
 80006c2:	4613      	mov	r3, r2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 fd17 	bl	80070f8 <srand>

  uint32_t RNG_TEST_SIZE = 50000;
 80006ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006ce:	623b      	str	r3, [r7, #32]
  float32_t vectorA [RNG_TEST_SIZE];
 80006d0:	6a39      	ldr	r1, [r7, #32]
 80006d2:	460b      	mov	r3, r1
 80006d4:	3b01      	subs	r3, #1
 80006d6:	61fb      	str	r3, [r7, #28]
 80006d8:	2300      	movs	r3, #0
 80006da:	6039      	str	r1, [r7, #0]
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	f04f 0200 	mov.w	r2, #0
 80006e2:	f04f 0300 	mov.w	r3, #0
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	0143      	lsls	r3, r0, #5
 80006ea:	6838      	ldr	r0, [r7, #0]
 80006ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80006f0:	6838      	ldr	r0, [r7, #0]
 80006f2:	0142      	lsls	r2, r0, #5
 80006f4:	2300      	movs	r3, #0
 80006f6:	468a      	mov	sl, r1
 80006f8:	469b      	mov	fp, r3
 80006fa:	f04f 0200 	mov.w	r2, #0
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000706:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800070a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800070e:	008b      	lsls	r3, r1, #2
 8000710:	3307      	adds	r3, #7
 8000712:	08db      	lsrs	r3, r3, #3
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	ebad 0d03 	sub.w	sp, sp, r3
 800071a:	466b      	mov	r3, sp
 800071c:	3303      	adds	r3, #3
 800071e:	089b      	lsrs	r3, r3, #2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	61bb      	str	r3, [r7, #24]
  float32_t vectorB [RNG_TEST_SIZE];
 8000724:	6a39      	ldr	r1, [r7, #32]
 8000726:	460b      	mov	r3, r1
 8000728:	3b01      	subs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	2300      	movs	r3, #0
 800072e:	4688      	mov	r8, r1
 8000730:	4699      	mov	r9, r3
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	f04f 0300 	mov.w	r3, #0
 800073a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800073e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000742:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000746:	2300      	movs	r3, #0
 8000748:	460c      	mov	r4, r1
 800074a:	461d      	mov	r5, r3
 800074c:	f04f 0200 	mov.w	r2, #0
 8000750:	f04f 0300 	mov.w	r3, #0
 8000754:	016b      	lsls	r3, r5, #5
 8000756:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800075a:	0162      	lsls	r2, r4, #5
 800075c:	008b      	lsls	r3, r1, #2
 800075e:	3307      	adds	r3, #7
 8000760:	08db      	lsrs	r3, r3, #3
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	ebad 0d03 	sub.w	sp, sp, r3
 8000768:	466b      	mov	r3, sp
 800076a:	3303      	adds	r3, #3
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	613b      	str	r3, [r7, #16]

  // pretty_print_float32_vector(vectorA, RNG_TEST_SIZE);
  // pretty_print_float32_vector(vectorB, RNG_TEST_SIZE);

  // uart buffer stuff
  printf("initial result: %f\n", result);
 8000772:	edd7 7a03 	vldr	s15, [r7, #12]
 8000776:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800077a:	ec53 2b17 	vmov	r2, r3, d7
 800077e:	4813      	ldr	r0, [pc, #76]	; (80007cc <main+0x138>)
 8000780:	f006 fc2c 	bl	8006fdc <iprintf>
  printf("hello world\n");
 8000784:	4812      	ldr	r0, [pc, #72]	; (80007d0 <main+0x13c>)
 8000786:	f006 fcaf 	bl	80070e8 <puts>

  uint32_t count = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // HAL_Delay(500);

	  fill_vector_with_rng(vectorA, RNG_TEST_SIZE);
 800078e:	6a39      	ldr	r1, [r7, #32]
 8000790:	69b8      	ldr	r0, [r7, #24]
 8000792:	f000 f821 	bl	80007d8 <fill_vector_with_rng>
	  fill_vector_with_rng(vectorB, RNG_TEST_SIZE);
 8000796:	6a39      	ldr	r1, [r7, #32]
 8000798:	6938      	ldr	r0, [r7, #16]
 800079a:	f000 f81d 	bl	80007d8 <fill_vector_with_rng>
	  arm_dot_prod_f32(vectorA, vectorB, RNG_TEST_SIZE, &result);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	6a3a      	ldr	r2, [r7, #32]
 80007a4:	6939      	ldr	r1, [r7, #16]
 80007a6:	69b8      	ldr	r0, [r7, #24]
 80007a8:	f005 ff46 	bl	8006638 <arm_dot_prod_f32>

	  printf("count=%3d, result: %.3f\n", count, result);
 80007ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80007b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007b4:	ec53 2b17 	vmov	r2, r3, d7
 80007b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <main+0x140>)
 80007bc:	f006 fc0e 	bl	8006fdc <iprintf>
	  count++;
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	3301      	adds	r3, #1
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
	  fill_vector_with_rng(vectorA, RNG_TEST_SIZE);
 80007c6:	e7e2      	b.n	800078e <main+0xfa>
 80007c8:	4479c000 	.word	0x4479c000
 80007cc:	080092a8 	.word	0x080092a8
 80007d0:	080092bc 	.word	0x080092bc
 80007d4:	080092c8 	.word	0x080092c8

080007d8 <fill_vector_with_rng>:
}

/**
 * fill with numbers from 0.00 to 0.99
 */
void fill_vector_with_rng (float32_t *vec, uint32_t size){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	  uint32_t i = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
	  for (i=0; i<size; i++){
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	e01d      	b.n	8000828 <fill_vector_with_rng+0x50>
		  vec[i] = (float32_t)(rand()%100) / 100; // decimals with 2 significant figures, from 0 - 0.99
 80007ec:	f006 fcb2 	bl	8007154 <rand>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <fill_vector_with_rng+0x64>)
 80007f4:	fb82 1203 	smull	r1, r2, r2, r3
 80007f8:	1151      	asrs	r1, r2, #5
 80007fa:	17da      	asrs	r2, r3, #31
 80007fc:	1a8a      	subs	r2, r1, r2
 80007fe:	2164      	movs	r1, #100	; 0x64
 8000800:	fb01 f202 	mul.w	r2, r1, r2
 8000804:	1a9a      	subs	r2, r3, r2
 8000806:	ee07 2a90 	vmov	s15, r2
 800080a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000840 <fill_vector_with_rng+0x68>
 800081a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800081e:	edc3 7a00 	vstr	s15, [r3]
	  for (i=0; i<size; i++){
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	d3dd      	bcc.n	80007ec <fill_vector_with_rng+0x14>
	  }
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	51eb851f 	.word	0x51eb851f
 8000840:	42c80000 	.word	0x42c80000

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b09c      	sub	sp, #112	; 0x70
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	224c      	movs	r2, #76	; 0x4c
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f005 ff76 	bl	8006744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2220      	movs	r2, #32
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f005 ff70 	bl	8006744 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000864:	2002      	movs	r0, #2
 8000866:	f001 fe97 	bl	8002598 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b33      	ldr	r3, [pc, #204]	; (800093c <SystemClock_Config+0xf8>)
 8000870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000872:	4a32      	ldr	r2, [pc, #200]	; (800093c <SystemClock_Config+0xf8>)
 8000874:	f023 0301 	bic.w	r3, r3, #1
 8000878:	62d3      	str	r3, [r2, #44]	; 0x2c
 800087a:	4b30      	ldr	r3, [pc, #192]	; (800093c <SystemClock_Config+0xf8>)
 800087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <SystemClock_Config+0xfc>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800088c:	4a2c      	ldr	r2, [pc, #176]	; (8000940 <SystemClock_Config+0xfc>)
 800088e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <SystemClock_Config+0xfc>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a0:	bf00      	nop
 80008a2:	4b27      	ldr	r3, [pc, #156]	; (8000940 <SystemClock_Config+0xfc>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ae:	d1f8      	bne.n	80008a2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008b0:	2303      	movs	r3, #3
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	2302      	movs	r3, #2
 80008c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008ce:	2318      	movs	r3, #24
 80008d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d6:	2304      	movs	r3, #4
 80008d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008de:	230c      	movs	r3, #12
 80008e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fe9c 	bl	800262c <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008fa:	f000 f9ed 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	233f      	movs	r3, #63	; 0x3f
 8000900:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2101      	movs	r1, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fab0 	bl	8002e88 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800092e:	f000 f9d3 	bl	8000cd8 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3770      	adds	r7, #112	; 0x70
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	58000400 	.word	0x58000400
 8000940:	58024800 	.word	0x58024800

08000944 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_ETH_Init+0x80>)
 800094a:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <MX_ETH_Init+0x84>)
 800094c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_ETH_Init+0x88>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_ETH_Init+0x88>)
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_ETH_Init+0x88>)
 800095c:	22e1      	movs	r2, #225	; 0xe1
 800095e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_ETH_Init+0x88>)
 8000962:	2200      	movs	r2, #0
 8000964:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_ETH_Init+0x88>)
 8000968:	2200      	movs	r2, #0
 800096a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_ETH_Init+0x88>)
 800096e:	2200      	movs	r2, #0
 8000970:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_ETH_Init+0x80>)
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_ETH_Init+0x88>)
 8000976:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_ETH_Init+0x80>)
 800097a:	2201      	movs	r2, #1
 800097c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_ETH_Init+0x80>)
 8000980:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <MX_ETH_Init+0x8c>)
 8000982:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_ETH_Init+0x80>)
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_ETH_Init+0x90>)
 8000988:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_ETH_Init+0x80>)
 800098c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000990:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_ETH_Init+0x80>)
 8000994:	f000 feca 	bl	800172c <HAL_ETH_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800099e:	f000 f99b 	bl	8000cd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009a2:	2238      	movs	r2, #56	; 0x38
 80009a4:	2100      	movs	r1, #0
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_ETH_Init+0x94>)
 80009a8:	f005 fecc 	bl	8006744 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_ETH_Init+0x94>)
 80009ae:	2221      	movs	r2, #33	; 0x21
 80009b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_ETH_Init+0x94>)
 80009b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_ETH_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	240002f4 	.word	0x240002f4
 80009c8:	40028000 	.word	0x40028000
 80009cc:	24000940 	.word	0x24000940
 80009d0:	24000240 	.word	0x24000240
 80009d4:	240001e0 	.word	0x240001e0
 80009d8:	240002bc 	.word	0x240002bc

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <MX_USART3_UART_Init+0x94>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a26:	f004 f923 	bl	8004c70 <HAL_UART_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 f952 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a38:	f005 fa2a 	bl	8005e90 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a42:	f000 f949 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a4a:	f005 fa5f 	bl	8005f0c <HAL_UARTEx_SetRxFifoThreshold>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 f940 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a5a:	f005 f9e0 	bl	8005e1e <HAL_UARTEx_DisableFifoMode>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f000 f938 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	240003a4 	.word	0x240003a4
 8000a70:	40004800 	.word	0x40004800

08000a74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a80:	2209      	movs	r2, #9
 8000a82:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a86:	2202      	movs	r2, #2
 8000a88:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	f001 fc23 	bl	8002306 <HAL_PCD_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ac6:	f000 f907 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24000434 	.word	0x24000434
 8000ad4:	40080000 	.word	0x40080000

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	4b62      	ldr	r3, [pc, #392]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	4a60      	ldr	r2, [pc, #384]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afe:	4b5e      	ldr	r3, [pc, #376]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0c:	4b5a      	ldr	r3, [pc, #360]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	4a59      	ldr	r2, [pc, #356]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1c:	4b56      	ldr	r3, [pc, #344]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b53      	ldr	r3, [pc, #332]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	4a51      	ldr	r2, [pc, #324]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3a:	4b4f      	ldr	r3, [pc, #316]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	4a4a      	ldr	r2, [pc, #296]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b58:	4b47      	ldr	r3, [pc, #284]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	4b44      	ldr	r3, [pc, #272]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	4a42      	ldr	r2, [pc, #264]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b76:	4b40      	ldr	r3, [pc, #256]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b84:	4b3c      	ldr	r3, [pc, #240]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	4a3b      	ldr	r2, [pc, #236]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b94:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba2:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb2:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <MX_GPIO_Init+0x1a0>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	f003 0310 	and.w	r3, r3, #16
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bc6:	482d      	ldr	r0, [pc, #180]	; (8000c7c <MX_GPIO_Init+0x1a4>)
 8000bc8:	f001 fb84 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd2:	482b      	ldr	r0, [pc, #172]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000bd4:	f001 fb7e 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2102      	movs	r1, #2
 8000bdc:	4829      	ldr	r0, [pc, #164]	; (8000c84 <MX_GPIO_Init+0x1ac>)
 8000bde:	f001 fb79 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4824      	ldr	r0, [pc, #144]	; (8000c88 <MX_GPIO_Init+0x1b0>)
 8000bf8:	f001 f9bc 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bfc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4819      	ldr	r0, [pc, #100]	; (8000c7c <MX_GPIO_Init+0x1a4>)
 8000c16:	f001 f9ad 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4813      	ldr	r0, [pc, #76]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000c34:	f001 f99e 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480f      	ldr	r0, [pc, #60]	; (8000c8c <MX_GPIO_Init+0x1b4>)
 8000c4e:	f001 f991 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_GPIO_Init+0x1ac>)
 8000c6a:	f001 f983 	bl	8001f74 <HAL_GPIO_Init>

}
 8000c6e:	bf00      	nop
 8000c70:	3730      	adds	r7, #48	; 0x30
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	58020400 	.word	0x58020400
 8000c80:	58020c00 	.word	0x58020c00
 8000c84:	58021000 	.word	0x58021000
 8000c88:	58020800 	.word	0x58020800
 8000c8c:	58021800 	.word	0x58021800

08000c90 <__io_putchar>:
  * @param  None
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the LPUART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000c98:	1d39      	adds	r1, r7, #4
 8000c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <__io_putchar+0x20>)
 8000ca2:	f004 f835 	bl	8004d10 <HAL_UART_Transmit>

  return ch;
 8000ca6:	687b      	ldr	r3, [r7, #4]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240003a4 	.word	0x240003a4

08000cb4 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_UART_Receive(&huart3, &ch, 1, 0xFFFF);
 8000cba:	1df9      	adds	r1, r7, #7
 8000cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <__io_getchar+0x20>)
 8000cc4:	f004 f8ba 	bl	8004e3c <HAL_UART_Receive>

	return ch;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	240003a4 	.word	0x240003a4

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_MspInit+0x30>)
 8000cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf0:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x30>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x30>)
 8000cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	58024400 	.word	0x58024400

08000d18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	; 0x38
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a59      	ldr	r2, [pc, #356]	; (8000e9c <HAL_ETH_MspInit+0x184>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	f040 80ab 	bne.w	8000e92 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d3c:	4b58      	ldr	r3, [pc, #352]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d42:	4a57      	ldr	r2, [pc, #348]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d4c:	4b54      	ldr	r3, [pc, #336]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d5a:	4b51      	ldr	r3, [pc, #324]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d60:	4a4f      	ldr	r2, [pc, #316]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d78:	4b49      	ldr	r3, [pc, #292]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d7e:	4a48      	ldr	r2, [pc, #288]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d88:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a40      	ldr	r2, [pc, #256]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	4a39      	ldr	r2, [pc, #228]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc4:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	4a31      	ldr	r2, [pc, #196]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	4a2a      	ldr	r2, [pc, #168]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e0e:	2332      	movs	r3, #50	; 0x32
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	481e      	ldr	r0, [pc, #120]	; (8000ea4 <HAL_ETH_MspInit+0x18c>)
 8000e2a:	f001 f8a3 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e2e:	2386      	movs	r3, #134	; 0x86
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3e:	230b      	movs	r3, #11
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	4817      	ldr	r0, [pc, #92]	; (8000ea8 <HAL_ETH_MspInit+0x190>)
 8000e4a:	f001 f893 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4810      	ldr	r0, [pc, #64]	; (8000eac <HAL_ETH_MspInit+0x194>)
 8000e6c:	f001 f882 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e82:	230b      	movs	r3, #11
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <HAL_ETH_MspInit+0x198>)
 8000e8e:	f001 f871 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3738      	adds	r7, #56	; 0x38
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40028000 	.word	0x40028000
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020800 	.word	0x58020800
 8000ea8:	58020000 	.word	0x58020000
 8000eac:	58020400 	.word	0x58020400
 8000eb0:	58021800 	.word	0x58021800

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0b8      	sub	sp, #224	; 0xe0
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	22bc      	movs	r2, #188	; 0xbc
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 fc35 	bl	8006744 <memset>
  if(huart->Instance==USART3)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <HAL_UART_MspInit+0xc0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d142      	bne.n	8000f6a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fb54 	bl	80035a0 <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000efe:	f7ff feeb 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_UART_MspInit+0xc8>)
 8000f66:	f001 f805 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	37e0      	adds	r7, #224	; 0xe0
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40004800 	.word	0x40004800
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58020c00 	.word	0x58020c00

08000f80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b0b8      	sub	sp, #224	; 0xe0
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	22bc      	movs	r2, #188	; 0xbc
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f005 fbcf 	bl	8006744 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <HAL_PCD_MspInit+0xe8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d156      	bne.n	800105e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fb4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000fb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 faec 	bl	80035a0 <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000fce:	f7ff fe83 	bl	8000cd8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fd2:	f001 fb1b 	bl	800260c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_PCD_MspInit+0xec>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a23      	ldr	r2, [pc, #140]	; (800106c <HAL_PCD_MspInit+0xec>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_PCD_MspInit+0xec>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ff4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800100e:	230a      	movs	r3, #10
 8001010:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001018:	4619      	mov	r1, r3
 800101a:	4815      	ldr	r0, [pc, #84]	; (8001070 <HAL_PCD_MspInit+0xf0>)
 800101c:	f000 ffaa 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001038:	4619      	mov	r1, r3
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <HAL_PCD_MspInit+0xf0>)
 800103c:	f000 ff9a 	bl	8001f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_PCD_MspInit+0xec>)
 8001042:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_PCD_MspInit+0xec>)
 8001048:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800104c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_PCD_MspInit+0xec>)
 8001052:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	37e0      	adds	r7, #224	; 0xe0
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40080000 	.word	0x40080000
 800106c:	58024400 	.word	0x58024400
 8001070:	58020000 	.word	0x58020000

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 f9ec 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return 1;
 80010cc:	2301      	movs	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_kill>:

int _kill(int pid, int sig)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010e2:	f005 fb05 	bl	80066f0 <__errno>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2216      	movs	r2, #22
 80010ea:	601a      	str	r2, [r3, #0]
	return -1;
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_exit>:

void _exit (int status)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ffe7 	bl	80010d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800110a:	e7fe      	b.n	800110a <_exit+0x12>

0800110c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	e00a      	b.n	8001134 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800111e:	f7ff fdc9 	bl	8000cb4 <__io_getchar>
 8001122:	4601      	mov	r1, r0
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	60ba      	str	r2, [r7, #8]
 800112a:	b2ca      	uxtb	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	dbf0      	blt.n	800111e <_read+0x12>
	}

return len;
 800113c:	687b      	ldr	r3, [r7, #4]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e009      	b.n	800116c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	60ba      	str	r2, [r7, #8]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fd95 	bl	8000c90 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf1      	blt.n	8001158 <_write+0x12>
	}
	return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_close>:

int _close(int file)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	return -1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a6:	605a      	str	r2, [r3, #4]
	return 0;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_isatty>:

int _isatty(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	return 1;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f005 fa6a 	bl	80066f0 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	24080000 	.word	0x24080000
 8001248:	00000400 	.word	0x00000400
 800124c:	24000948 	.word	0x24000948
 8001250:	24000960 	.word	0x24000960

08001254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001258:	4b37      	ldr	r3, [pc, #220]	; (8001338 <SystemInit+0xe4>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a36      	ldr	r2, [pc, #216]	; (8001338 <SystemInit+0xe4>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001268:	4b34      	ldr	r3, [pc, #208]	; (800133c <SystemInit+0xe8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	2b06      	cmp	r3, #6
 8001272:	d807      	bhi.n	8001284 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001274:	4b31      	ldr	r3, [pc, #196]	; (800133c <SystemInit+0xe8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 030f 	bic.w	r3, r3, #15
 800127c:	4a2f      	ldr	r2, [pc, #188]	; (800133c <SystemInit+0xe8>)
 800127e:	f043 0307 	orr.w	r3, r3, #7
 8001282:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001284:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <SystemInit+0xec>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <SystemInit+0xec>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <SystemInit+0xec>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <SystemInit+0xec>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4929      	ldr	r1, [pc, #164]	; (8001340 <SystemInit+0xec>)
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <SystemInit+0xf0>)
 800129e:	4013      	ands	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <SystemInit+0xe8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <SystemInit+0xe8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 030f 	bic.w	r3, r3, #15
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <SystemInit+0xe8>)
 80012b8:	f043 0307 	orr.w	r3, r3, #7
 80012bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <SystemInit+0xec>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <SystemInit+0xec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <SystemInit+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <SystemInit+0xec>)
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <SystemInit+0xf4>)
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <SystemInit+0xec>)
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <SystemInit+0xf8>)
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <SystemInit+0xec>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <SystemInit+0xfc>)
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <SystemInit+0xec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <SystemInit+0xec>)
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <SystemInit+0xfc>)
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <SystemInit+0xec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <SystemInit+0xec>)
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <SystemInit+0xfc>)
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <SystemInit+0xec>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <SystemInit+0xec>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <SystemInit+0xec>)
 8001306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <SystemInit+0xec>)
 800130e:	2200      	movs	r2, #0
 8001310:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <SystemInit+0x100>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <SystemInit+0x104>)
 8001318:	4013      	ands	r3, r2
 800131a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800131e:	d202      	bcs.n	8001326 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <SystemInit+0x108>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <SystemInit+0x10c>)
 8001328:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800132c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	52002000 	.word	0x52002000
 8001340:	58024400 	.word	0x58024400
 8001344:	eaf6ed7f 	.word	0xeaf6ed7f
 8001348:	02020200 	.word	0x02020200
 800134c:	01ff0000 	.word	0x01ff0000
 8001350:	01010280 	.word	0x01010280
 8001354:	5c001000 	.word	0x5c001000
 8001358:	ffff0000 	.word	0xffff0000
 800135c:	51008108 	.word	0x51008108
 8001360:	52004000 	.word	0x52004000

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001368:	f7ff ff74 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	; (80013a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	; (80013b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001392:	f005 f9b3 	bl	80066fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff f97d 	bl	8000694 <main>
  bx  lr
 800139a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013a4:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80013a8:	08009778 	.word	0x08009778
  ldr r2, =_sbss
 80013ac:	240002a0 	.word	0x240002a0
  ldr r4, =_ebss
 80013b0:	24000960 	.word	0x24000960

080013b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC3_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013be:	2003      	movs	r0, #3
 80013c0:	f000 f982 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013c4:	f001 ff16 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_Init+0x68>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	f003 030f 	and.w	r3, r3, #15
 80013d4:	4913      	ldr	r1, [pc, #76]	; (8001424 <HAL_Init+0x6c>)
 80013d6:	5ccb      	ldrb	r3, [r1, r3]
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_Init+0x68>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_Init+0x6c>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <HAL_Init+0x70>)
 80013fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013fc:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_Init+0x74>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f814 	bl	8001430 <HAL_InitTick>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e002      	b.n	8001418 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001412:	f7ff fc67 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	58024400 	.word	0x58024400
 8001424:	080092f8 	.word	0x080092f8
 8001428:	24000004 	.word	0x24000004
 800142c:	24000000 	.word	0x24000000

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_InitTick+0x60>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e021      	b.n	8001488 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_InitTick+0x64>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_InitTick+0x60>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f959 	bl	8001712 <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f931 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x68>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2400000c 	.word	0x2400000c
 8001494:	24000000 	.word	0x24000000
 8001498:	24000008 	.word	0x24000008

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2400000c 	.word	0x2400000c
 80014c0:	2400094c 	.word	0x2400094c

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2400094c 	.word	0x2400094c

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2400000c 	.word	0x2400000c

08001524 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetREVID+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0c1b      	lsrs	r3, r3, #16
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	5c001000 	.word	0x5c001000

0800153c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800154c:	4904      	ldr	r1, [pc, #16]	; (8001560 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	58000400 	.word	0x58000400

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	4313      	orrs	r3, r2
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00
 80015a8:	05fa0000 	.word	0x05fa0000

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff47 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff5e 	bl	80015ac <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff90 	bl	800161c <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5f 	bl	80015c8 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffb2 	bl	8001684 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0cf      	b.n	80018de <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001744:	2b00      	cmp	r3, #0
 8001746:	d106      	bne.n	8001756 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2223      	movs	r2, #35	; 0x23
 800174c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fae1 	bl	8000d18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <HAL_ETH_Init+0x1bc>)
 8001758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800175c:	4a62      	ldr	r2, [pc, #392]	; (80018e8 <HAL_ETH_Init+0x1bc>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001766:	4b60      	ldr	r3, [pc, #384]	; (80018e8 <HAL_ETH_Init+0x1bc>)
 8001768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7a1b      	ldrb	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fedd 	bl	800153c <HAL_SYSCFG_ETHInterfaceSelect>
 8001782:	e003      	b.n	800178c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001784:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001788:	f7ff fed8 	bl	800153c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800178c:	4b57      	ldr	r3, [pc, #348]	; (80018ec <HAL_ETH_Init+0x1c0>)
 800178e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a8:	f7ff fe8c 	bl	80014c4 <HAL_GetTick>
 80017ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017ae:	e011      	b.n	80017d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017b0:	f7ff fe88 	bl	80014c4 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017be:	d909      	bls.n	80017d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2204      	movs	r2, #4
 80017c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	22e0      	movs	r2, #224	; 0xe0
 80017cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e084      	b.n	80018de <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1e4      	bne.n	80017b0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f886 	bl	80018f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80017ec:	f001 fe7c 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4a3f      	ldr	r2, [pc, #252]	; (80018f0 <HAL_ETH_Init+0x1c4>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	0c9a      	lsrs	r2, r3, #18
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3a01      	subs	r2, #1
 8001800:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 fa71 	bl	8001cec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001812:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001816:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001822:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001826:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	22e0      	movs	r2, #224	; 0xe0
 8001842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e049      	b.n	80018de <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001852:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_ETH_Init+0x1c8>)
 8001858:	4013      	ands	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6952      	ldr	r2, [r2, #20]
 800185e:	0051      	lsls	r1, r2, #1
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	430b      	orrs	r3, r1
 8001866:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800186a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fad9 	bl	8001e26 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 fb1f 	bl	8001eb8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	3305      	adds	r3, #5
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	021a      	lsls	r2, r3, #8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	3304      	adds	r3, #4
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	3303      	adds	r3, #3
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	061a      	lsls	r2, r3, #24
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	3302      	adds	r3, #2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	3301      	adds	r3, #1
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018c6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2210      	movs	r2, #16
 80018d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	58024400 	.word	0x58024400
 80018ec:	58000400 	.word	0x58000400
 80018f0:	431bde83 	.word	0x431bde83
 80018f4:	ffff8001 	.word	0xffff8001

080018f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001908:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001910:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001912:	f001 fde9 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 8001916:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d908      	bls.n	8001932 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d804      	bhi.n	8001932 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e027      	b.n	8001982 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	4a18      	ldr	r2, [pc, #96]	; (8001998 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d908      	bls.n	800194c <HAL_ETH_SetMDIOClockRange+0x54>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d204      	bcs.n	800194c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e01a      	b.n	8001982 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d303      	bcc.n	800195c <HAL_ETH_SetMDIOClockRange+0x64>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d911      	bls.n	8001980 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d908      	bls.n	8001976 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d804      	bhi.n	8001976 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e005      	b.n	8001982 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e000      	b.n	8001982 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001980:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	01312cff 	.word	0x01312cff
 8001998:	02160ebf 	.word	0x02160ebf
 800199c:	03938700 	.word	0x03938700
 80019a0:	05f5e0ff 	.word	0x05f5e0ff
 80019a4:	08f0d17f 	.word	0x08f0d17f

080019a8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80019ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	791b      	ldrb	r3, [r3, #4]
 80019c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80019c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	7b1b      	ldrb	r3, [r3, #12]
 80019c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	7b5b      	ldrb	r3, [r3, #13]
 80019d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	7b9b      	ldrb	r3, [r3, #14]
 80019d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	7bdb      	ldrb	r3, [r3, #15]
 80019e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	7c12      	ldrb	r2, [r2, #16]
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	d102      	bne.n	80019f2 <ETH_SetMACConfig+0x4a>
 80019ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019f0:	e000      	b.n	80019f4 <ETH_SetMACConfig+0x4c>
 80019f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	7c52      	ldrb	r2, [r2, #17]
 80019fa:	2a00      	cmp	r2, #0
 80019fc:	d102      	bne.n	8001a04 <ETH_SetMACConfig+0x5c>
 80019fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a02:	e000      	b.n	8001a06 <ETH_SetMACConfig+0x5e>
 8001a04:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	7c9b      	ldrb	r3, [r3, #18]
 8001a0c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a0e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a14:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	7f1b      	ldrb	r3, [r3, #28]
 8001a20:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	7f5b      	ldrb	r3, [r3, #29]
 8001a28:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a2a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	7f92      	ldrb	r2, [r2, #30]
 8001a30:	2a00      	cmp	r2, #0
 8001a32:	d102      	bne.n	8001a3a <ETH_SetMACConfig+0x92>
 8001a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a38:	e000      	b.n	8001a3c <ETH_SetMACConfig+0x94>
 8001a3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	7fdb      	ldrb	r3, [r3, #31]
 8001a42:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a44:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d102      	bne.n	8001a56 <ETH_SetMACConfig+0xae>
 8001a50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a54:	e000      	b.n	8001a58 <ETH_SetMACConfig+0xb0>
 8001a56:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a58:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a66:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a68:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <ETH_SetMACConfig+0x22c>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	430b      	orrs	r3, r1
 8001a84:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a92:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a94:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a9c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001aa6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001aa8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d102      	bne.n	8001aba <ETH_SetMACConfig+0x112>
 8001ab4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ab8:	e000      	b.n	8001abc <ETH_SetMACConfig+0x114>
 8001aba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001abc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <ETH_SetMACConfig+0x230>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ae0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <ETH_SetMACConfig+0x234>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	430b      	orrs	r3, r1
 8001afc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b04:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d101      	bne.n	8001b1a <ETH_SetMACConfig+0x172>
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	e000      	b.n	8001b1c <ETH_SetMACConfig+0x174>
 8001b1a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b1c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b22:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b2e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001b32:	4013      	ands	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001b44:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b4c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5a:	f023 0103 	bic.w	r1, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001b72:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001b8e:	2a00      	cmp	r2, #0
 8001b90:	d101      	bne.n	8001b96 <ETH_SetMACConfig+0x1ee>
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	e000      	b.n	8001b98 <ETH_SetMACConfig+0x1f0>
 8001b96:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001ba0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ba2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001baa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001bb8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	00048083 	.word	0x00048083
 8001bd8:	c0f88000 	.word	0xc0f88000
 8001bdc:	fffffef0 	.word	0xfffffef0

08001be0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <ETH_SetDMAConfig+0xf8>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	6811      	ldr	r1, [r2, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c06:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	791b      	ldrb	r3, [r3, #4]
 8001c0c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c12:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	7b1b      	ldrb	r3, [r3, #12]
 8001c18:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <ETH_SetDMAConfig+0xfc>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c38:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	7b5b      	ldrb	r3, [r3, #13]
 8001c3e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c50:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <ETH_SetDMAConfig+0x100>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	68f9      	ldr	r1, [r7, #12]
 8001c5e:	430b      	orrs	r3, r1
 8001c60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c64:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	7d1b      	ldrb	r3, [r3, #20]
 8001c70:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	7f5b      	ldrb	r3, [r3, #29]
 8001c78:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c86:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <ETH_SetDMAConfig+0x104>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	68f9      	ldr	r1, [r7, #12]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c9a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	7f1b      	ldrb	r3, [r3, #28]
 8001ca2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <ETH_SetDMAConfig+0x108>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	68f9      	ldr	r1, [r7, #12]
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cc8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	ffff87fd 	.word	0xffff87fd
 8001cdc:	ffff2ffe 	.word	0xffff2ffe
 8001ce0:	fffec000 	.word	0xfffec000
 8001ce4:	ffc0efef 	.word	0xffc0efef
 8001ce8:	7fc0ffff 	.word	0x7fc0ffff

08001cec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0a4      	sub	sp, #144	; 0x90
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001d44:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001d48:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d50:	2300      	movs	r3, #0
 8001d52:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d66:	2300      	movs	r3, #0
 8001d68:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d84:	2320      	movs	r3, #32
 8001d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d96:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001da0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fde6 	bl	80019a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001de0:	2301      	movs	r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001df6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dfa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e04:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e0c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fee1 	bl	8001be0 <ETH_SetDMAConfig>
}
 8001e1e:	bf00      	nop
 8001e20:	3790      	adds	r7, #144	; 0x90
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e01d      	b.n	8001e70 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68d9      	ldr	r1, [r3, #12]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	3206      	adds	r2, #6
 8001e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d9de      	bls.n	8001e34 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e84:	461a      	mov	r2, r3
 8001e86:	2303      	movs	r3, #3
 8001e88:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	e023      	b.n	8001f0e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	3212      	adds	r2, #18
 8001f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d9d8      	bls.n	8001ec6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f82:	4b89      	ldr	r3, [pc, #548]	; (80021a8 <HAL_GPIO_Init+0x234>)
 8001f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f86:	e194      	b.n	80022b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8186 	beq.w	80022ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d005      	beq.n	8001fb8 <HAL_GPIO_Init+0x44>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d130      	bne.n	800201a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fee:	2201      	movs	r2, #1
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f003 0201 	and.w	r2, r3, #1
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b03      	cmp	r3, #3
 8002024:	d017      	beq.n	8002056 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d123      	bne.n	80020aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	69b9      	ldr	r1, [r7, #24]
 80020a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0203 	and.w	r2, r3, #3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80e0 	beq.w	80022ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_GPIO_Init+0x238>)
 80020ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020f2:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <HAL_GPIO_Init+0x238>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020fc:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_GPIO_Init+0x238>)
 80020fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_GPIO_Init+0x23c>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a20      	ldr	r2, [pc, #128]	; (80021b4 <HAL_GPIO_Init+0x240>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d052      	beq.n	80021dc <HAL_GPIO_Init+0x268>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_GPIO_Init+0x244>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_GPIO_Init+0x22e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <HAL_GPIO_Init+0x248>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02b      	beq.n	800219e <HAL_GPIO_Init+0x22a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_GPIO_Init+0x24c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d025      	beq.n	800219a <HAL_GPIO_Init+0x226>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_GPIO_Init+0x250>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01f      	beq.n	8002196 <HAL_GPIO_Init+0x222>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_GPIO_Init+0x254>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d019      	beq.n	8002192 <HAL_GPIO_Init+0x21e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <HAL_GPIO_Init+0x258>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0x21a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_GPIO_Init+0x25c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00d      	beq.n	800218a <HAL_GPIO_Init+0x216>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x260>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x212>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_GPIO_Init+0x264>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_GPIO_Init+0x20e>
 800217e:	2309      	movs	r3, #9
 8002180:	e02d      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002182:	230a      	movs	r3, #10
 8002184:	e02b      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002186:	2308      	movs	r3, #8
 8002188:	e029      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800218a:	2307      	movs	r3, #7
 800218c:	e027      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800218e:	2306      	movs	r3, #6
 8002190:	e025      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002192:	2305      	movs	r3, #5
 8002194:	e023      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002196:	2304      	movs	r3, #4
 8002198:	e021      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800219a:	2303      	movs	r3, #3
 800219c:	e01f      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800219e:	2302      	movs	r3, #2
 80021a0:	e01d      	b.n	80021de <HAL_GPIO_Init+0x26a>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e01b      	b.n	80021de <HAL_GPIO_Init+0x26a>
 80021a6:	bf00      	nop
 80021a8:	58000080 	.word	0x58000080
 80021ac:	58024400 	.word	0x58024400
 80021b0:	58000400 	.word	0x58000400
 80021b4:	58020000 	.word	0x58020000
 80021b8:	58020400 	.word	0x58020400
 80021bc:	58020800 	.word	0x58020800
 80021c0:	58020c00 	.word	0x58020c00
 80021c4:	58021000 	.word	0x58021000
 80021c8:	58021400 	.word	0x58021400
 80021cc:	58021800 	.word	0x58021800
 80021d0:	58021c00 	.word	0x58021c00
 80021d4:	58022000 	.word	0x58022000
 80021d8:	58022400 	.word	0x58022400
 80021dc:	2300      	movs	r3, #0
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	4093      	lsls	r3, r2
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ee:	4938      	ldr	r1, [pc, #224]	; (80022d0 <HAL_GPIO_Init+0x35c>)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800222a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f47f ae63 	bne.w	8001f88 <HAL_GPIO_Init+0x14>
  }
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	3724      	adds	r7, #36	; 0x24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	58000400 	.word	0x58000400

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022f0:	e003      	b.n	80022fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002308:	b08f      	sub	sp, #60	; 0x3c
 800230a:	af0a      	add	r7, sp, #40	; 0x28
 800230c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e116      	b.n	8002546 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fe24 	bl	8000f80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2203      	movs	r2, #3
 800233c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fed2 	bl	8006100 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	687e      	ldr	r6, [r7, #4]
 8002364:	466d      	mov	r5, sp
 8002366:	f106 0410 	add.w	r4, r6, #16
 800236a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002372:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002376:	e885 0003 	stmia.w	r5, {r0, r1}
 800237a:	1d33      	adds	r3, r6, #4
 800237c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800237e:	6838      	ldr	r0, [r7, #0]
 8002380:	f003 fe50 	bl	8006024 <USB_CoreInit>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0d7      	b.n	8002546 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f003 fec0 	bl	8006122 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e04a      	b.n	800243e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	333d      	adds	r3, #61	; 0x3d
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	333c      	adds	r3, #60	; 0x3c
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	b298      	uxth	r0, r3
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3344      	adds	r3, #68	; 0x44
 80023e4:	4602      	mov	r2, r0
 80023e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	3340      	adds	r3, #64	; 0x40
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3348      	adds	r3, #72	; 0x48
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	334c      	adds	r3, #76	; 0x4c
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3354      	adds	r3, #84	; 0x54
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	d3af      	bcc.n	80023a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e044      	b.n	80024d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3b5      	bcc.n	800244e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	687e      	ldr	r6, [r7, #4]
 80024ea:	466d      	mov	r5, sp
 80024ec:	f106 0410 	add.w	r4, r6, #16
 80024f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002500:	1d33      	adds	r3, r6, #4
 8002502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002504:	6838      	ldr	r0, [r7, #0]
 8002506:	f003 fe59 	bl	80061bc <USB_DevInit>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e014      	b.n	8002546 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	2b01      	cmp	r3, #1
 8002532:	d102      	bne.n	800253a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f80b 	bl	8002550 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f004 f817 	bl	8006572 <USB_DevDisconnect>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002550 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_PCDEx_ActivateLPM+0x44>)
 8002580:	4313      	orrs	r3, r2
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	10000003 	.word	0x10000003

08002598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_PWREx_ConfigSupply+0x70>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d00a      	beq.n	80025c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_PWREx_ConfigSupply+0x70>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e01f      	b.n	80025fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e01d      	b.n	80025fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_PWREx_ConfigSupply+0x70>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	490f      	ldr	r1, [pc, #60]	; (8002608 <HAL_PWREx_ConfigSupply+0x70>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025d2:	f7fe ff77 	bl	80014c4 <HAL_GetTick>
 80025d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025d8:	e009      	b.n	80025ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025da:	f7fe ff73 	bl	80014c4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025e8:	d901      	bls.n	80025ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e007      	b.n	80025fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_PWREx_ConfigSupply+0x70>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fa:	d1ee      	bne.n	80025da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	58024800 	.word	0x58024800

0800260c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261a:	60d3      	str	r3, [r2, #12]
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	58024800 	.word	0x58024800

0800262c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f000 bc1d 	b.w	8002e7a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8087 	beq.w	800275c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264e:	4b99      	ldr	r3, [pc, #612]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002658:	4b96      	ldr	r3, [pc, #600]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	2b10      	cmp	r3, #16
 8002662:	d007      	beq.n	8002674 <HAL_RCC_OscConfig+0x48>
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	2b18      	cmp	r3, #24
 8002668:	d110      	bne.n	800268c <HAL_RCC_OscConfig+0x60>
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d10b      	bne.n	800268c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d06c      	beq.n	800275a <HAL_RCC_OscConfig+0x12e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d168      	bne.n	800275a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e3f6      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d106      	bne.n	80026a4 <HAL_RCC_OscConfig+0x78>
 8002696:	4b87      	ldr	r3, [pc, #540]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a86      	ldr	r2, [pc, #536]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e02e      	b.n	8002702 <HAL_RCC_OscConfig+0xd6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10c      	bne.n	80026c6 <HAL_RCC_OscConfig+0x9a>
 80026ac:	4b81      	ldr	r3, [pc, #516]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a80      	ldr	r2, [pc, #512]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b7e      	ldr	r3, [pc, #504]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a7d      	ldr	r2, [pc, #500]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e01d      	b.n	8002702 <HAL_RCC_OscConfig+0xd6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0xbe>
 80026d0:	4b78      	ldr	r3, [pc, #480]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a77      	ldr	r2, [pc, #476]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b75      	ldr	r3, [pc, #468]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a74      	ldr	r2, [pc, #464]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0xd6>
 80026ea:	4b72      	ldr	r3, [pc, #456]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a71      	ldr	r2, [pc, #452]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b6f      	ldr	r3, [pc, #444]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6e      	ldr	r2, [pc, #440]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80026fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d013      	beq.n	8002732 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fedb 	bl	80014c4 <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002712:	f7fe fed7 	bl	80014c4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	; 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e3aa      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002724:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0xe6>
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fec7 	bl	80014c4 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273a:	f7fe fec3 	bl	80014c4 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b64      	cmp	r3, #100	; 0x64
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e396      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x10e>
 8002758:	e000      	b.n	800275c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80cb 	beq.w	8002900 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276a:	4b52      	ldr	r3, [pc, #328]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002772:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002774:	4b4f      	ldr	r3, [pc, #316]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_RCC_OscConfig+0x164>
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	2b18      	cmp	r3, #24
 8002784:	d156      	bne.n	8002834 <HAL_RCC_OscConfig+0x208>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d151      	bne.n	8002834 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002790:	4b48      	ldr	r3, [pc, #288]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x17c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e368      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 0219 	bic.w	r2, r3, #25
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	493f      	ldr	r1, [pc, #252]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ba:	f7fe fe83 	bl	80014c4 <HAL_GetTick>
 80027be:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c2:	f7fe fe7f 	bl	80014c4 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e352      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d4:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	f7fe fea0 	bl	8001524 <HAL_GetREVID>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d817      	bhi.n	800281e <HAL_RCC_OscConfig+0x1f2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d108      	bne.n	8002808 <HAL_RCC_OscConfig+0x1dc>
 80027f6:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027fe:	4a2d      	ldr	r2, [pc, #180]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 8002800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002804:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002806:	e07b      	b.n	8002900 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	031b      	lsls	r3, r3, #12
 8002816:	4927      	ldr	r1, [pc, #156]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281c:	e070      	b.n	8002900 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	061b      	lsls	r3, r3, #24
 800282c:	4921      	ldr	r1, [pc, #132]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002832:	e065      	b.n	8002900 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d048      	beq.n	80028ce <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 0219 	bic.w	r2, r3, #25
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	491a      	ldr	r1, [pc, #104]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe fe39 	bl	80014c4 <HAL_GetTick>
 8002852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002856:	f7fe fe35 	bl	80014c4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e308      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002874:	f7fe fe56 	bl	8001524 <HAL_GetREVID>
 8002878:	4603      	mov	r3, r0
 800287a:	f241 0203 	movw	r2, #4099	; 0x1003
 800287e:	4293      	cmp	r3, r2
 8002880:	d81a      	bhi.n	80028b8 <HAL_RCC_OscConfig+0x28c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d108      	bne.n	800289c <HAL_RCC_OscConfig+0x270>
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 8002894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002898:	6053      	str	r3, [r2, #4]
 800289a:	e031      	b.n	8002900 <HAL_RCC_OscConfig+0x2d4>
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	031b      	lsls	r3, r3, #12
 80028aa:	4902      	ldr	r1, [pc, #8]	; (80028b4 <HAL_RCC_OscConfig+0x288>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	e026      	b.n	8002900 <HAL_RCC_OscConfig+0x2d4>
 80028b2:	bf00      	nop
 80028b4:	58024400 	.word	0x58024400
 80028b8:	4b9a      	ldr	r3, [pc, #616]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	4997      	ldr	r1, [pc, #604]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
 80028cc:	e018      	b.n	8002900 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ce:	4b95      	ldr	r3, [pc, #596]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a94      	ldr	r2, [pc, #592]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe fdf3 	bl	80014c4 <HAL_GetTick>
 80028de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fe fdef 	bl	80014c4 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e2c2      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028f4:	4b8b      	ldr	r3, [pc, #556]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a9 	beq.w	8002a60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290e:	4b85      	ldr	r3, [pc, #532]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002916:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002918:	4b82      	ldr	r3, [pc, #520]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d007      	beq.n	8002934 <HAL_RCC_OscConfig+0x308>
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2b18      	cmp	r3, #24
 8002928:	d13a      	bne.n	80029a0 <HAL_RCC_OscConfig+0x374>
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d135      	bne.n	80029a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002934:	4b7b      	ldr	r3, [pc, #492]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_OscConfig+0x320>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	2b80      	cmp	r3, #128	; 0x80
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e296      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800294c:	f7fe fdea 	bl	8001524 <HAL_GetREVID>
 8002950:	4603      	mov	r3, r0
 8002952:	f241 0203 	movw	r2, #4099	; 0x1003
 8002956:	4293      	cmp	r3, r2
 8002958:	d817      	bhi.n	800298a <HAL_RCC_OscConfig+0x35e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	2b20      	cmp	r3, #32
 8002960:	d108      	bne.n	8002974 <HAL_RCC_OscConfig+0x348>
 8002962:	4b70      	ldr	r3, [pc, #448]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800296a:	4a6e      	ldr	r2, [pc, #440]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 800296c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002970:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002972:	e075      	b.n	8002a60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002974:	4b6b      	ldr	r3, [pc, #428]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	069b      	lsls	r3, r3, #26
 8002982:	4968      	ldr	r1, [pc, #416]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002988:	e06a      	b.n	8002a60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800298a:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	061b      	lsls	r3, r3, #24
 8002998:	4962      	ldr	r1, [pc, #392]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800299e:	e05f      	b.n	8002a60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d042      	beq.n	8002a2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029a8:	4b5e      	ldr	r3, [pc, #376]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5d      	ldr	r2, [pc, #372]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 80029ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fd86 	bl	80014c4 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029bc:	f7fe fd82 	bl	80014c4 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e255      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ce:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029da:	f7fe fda3 	bl	8001524 <HAL_GetREVID>
 80029de:	4603      	mov	r3, r0
 80029e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d817      	bhi.n	8002a18 <HAL_RCC_OscConfig+0x3ec>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d108      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3d6>
 80029f0:	4b4c      	ldr	r3, [pc, #304]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029f8:	4a4a      	ldr	r2, [pc, #296]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029fe:	6053      	str	r3, [r2, #4]
 8002a00:	e02e      	b.n	8002a60 <HAL_RCC_OscConfig+0x434>
 8002a02:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	069b      	lsls	r3, r3, #26
 8002a10:	4944      	ldr	r1, [pc, #272]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
 8002a16:	e023      	b.n	8002a60 <HAL_RCC_OscConfig+0x434>
 8002a18:	4b42      	ldr	r3, [pc, #264]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	493f      	ldr	r1, [pc, #252]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
 8002a2c:	e018      	b.n	8002a60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a3c      	ldr	r2, [pc, #240]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fd43 	bl	80014c4 <HAL_GetTick>
 8002a3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a42:	f7fe fd3f 	bl	80014c4 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e212      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d036      	beq.n	8002ada <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d019      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	4a2a      	ldr	r2, [pc, #168]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7fe fd20 	bl	80014c4 <HAL_GetTick>
 8002a84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fe fd1c 	bl	80014c4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1ef      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x45c>
 8002aa6:	e018      	b.n	8002ada <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aac:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fd06 	bl	80014c4 <HAL_GetTick>
 8002ab8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe fd02 	bl	80014c4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1d5      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d039      	beq.n	8002b5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01c      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002afa:	f7fe fce3 	bl	80014c4 <HAL_GetTick>
 8002afe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b02:	f7fe fcdf 	bl	80014c4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e1b2      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCC_OscConfig+0x4f8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4d6>
 8002b20:	e01b      	b.n	8002b5a <HAL_RCC_OscConfig+0x52e>
 8002b22:	bf00      	nop
 8002b24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b28:	4b9b      	ldr	r3, [pc, #620]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a9a      	ldr	r2, [pc, #616]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b34:	f7fe fcc6 	bl	80014c4 <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b3c:	f7fe fcc2 	bl	80014c4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e195      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b4e:	4b92      	ldr	r3, [pc, #584]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8081 	beq.w	8002c6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b68:	4b8c      	ldr	r3, [pc, #560]	; (8002d9c <HAL_RCC_OscConfig+0x770>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a8b      	ldr	r2, [pc, #556]	; (8002d9c <HAL_RCC_OscConfig+0x770>)
 8002b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b74:	f7fe fca6 	bl	80014c4 <HAL_GetTick>
 8002b78:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b7c:	f7fe fca2 	bl	80014c4 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e175      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b8e:	4b83      	ldr	r3, [pc, #524]	; (8002d9c <HAL_RCC_OscConfig+0x770>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x584>
 8002ba2:	4b7d      	ldr	r3, [pc, #500]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	4a7c      	ldr	r2, [pc, #496]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6713      	str	r3, [r2, #112]	; 0x70
 8002bae:	e02d      	b.n	8002c0c <HAL_RCC_OscConfig+0x5e0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5a6>
 8002bb8:	4b77      	ldr	r3, [pc, #476]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a76      	ldr	r2, [pc, #472]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc4:	4b74      	ldr	r3, [pc, #464]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a73      	ldr	r2, [pc, #460]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	f023 0304 	bic.w	r3, r3, #4
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd0:	e01c      	b.n	8002c0c <HAL_RCC_OscConfig+0x5e0>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5c8>
 8002bda:	4b6f      	ldr	r3, [pc, #444]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a6e      	ldr	r2, [pc, #440]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	f043 0304 	orr.w	r3, r3, #4
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	4b6c      	ldr	r3, [pc, #432]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a6b      	ldr	r2, [pc, #428]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0x5e0>
 8002bf4:	4b68      	ldr	r3, [pc, #416]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a67      	ldr	r2, [pc, #412]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002c00:	4b65      	ldr	r3, [pc, #404]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a64      	ldr	r2, [pc, #400]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002c06:	f023 0304 	bic.w	r3, r3, #4
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d015      	beq.n	8002c40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7fe fc56 	bl	80014c4 <HAL_GetTick>
 8002c18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fc52 	bl	80014c4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e123      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c32:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ee      	beq.n	8002c1c <HAL_RCC_OscConfig+0x5f0>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fe fc40 	bl	80014c4 <HAL_GetTick>
 8002c44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fe fc3c 	bl	80014c4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e10d      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ee      	bne.n	8002c48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8102 	beq.w	8002e78 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c74:	4b48      	ldr	r3, [pc, #288]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c7c:	2b18      	cmp	r3, #24
 8002c7e:	f000 80bd 	beq.w	8002dfc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	f040 809e 	bne.w	8002dc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8c:	4b42      	ldr	r3, [pc, #264]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a41      	ldr	r2, [pc, #260]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fc14 	bl	80014c4 <HAL_GetTick>
 8002c9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fe fc10 	bl	80014c4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e0e3      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb2:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cbe:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc2:	4b37      	ldr	r3, [pc, #220]	; (8002da0 <HAL_RCC_OscConfig+0x774>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	4931      	ldr	r1, [pc, #196]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	628b      	str	r3, [r1, #40]	; 0x28
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	025b      	lsls	r3, r3, #9
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	041b      	lsls	r3, r3, #16
 8002cf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	3b01      	subs	r3, #1
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d08:	4923      	ldr	r1, [pc, #140]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d0e:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d1a:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d26:	00d2      	lsls	r2, r2, #3
 8002d28:	491b      	ldr	r1, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d2e:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f023 020c 	bic.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4917      	ldr	r1, [pc, #92]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f023 0202 	bic.w	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	4912      	ldr	r1, [pc, #72]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fb99 	bl	80014c4 <HAL_GetTick>
 8002d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d94:	e011      	b.n	8002dba <HAL_RCC_OscConfig+0x78e>
 8002d96:	bf00      	nop
 8002d98:	58024400 	.word	0x58024400
 8002d9c:	58024800 	.word	0x58024800
 8002da0:	fffffc0c 	.word	0xfffffc0c
 8002da4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe fb8c 	bl	80014c4 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e05f      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dba:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <HAL_RCC_OscConfig+0x858>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x77c>
 8002dc6:	e057      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <HAL_RCC_OscConfig+0x858>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <HAL_RCC_OscConfig+0x858>)
 8002dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fb76 	bl	80014c4 <HAL_GetTick>
 8002dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe fb72 	bl	80014c4 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e045      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_RCC_OscConfig+0x858>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x7b0>
 8002dfa:	e03d      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002dfc:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <HAL_RCC_OscConfig+0x858>)
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_OscConfig+0x858>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d031      	beq.n	8002e74 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f003 0203 	and.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d12a      	bne.n	8002e74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d122      	bne.n	8002e74 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d11a      	bne.n	8002e74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	0a5b      	lsrs	r3, r3, #9
 8002e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d111      	bne.n	8002e74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	0c1b      	lsrs	r3, r3, #16
 8002e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d108      	bne.n	8002e74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	0e1b      	lsrs	r3, r3, #24
 8002e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3730      	adds	r7, #48	; 0x30
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	58024400 	.word	0x58024400

08002e88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e19c      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b8a      	ldr	r3, [pc, #552]	; (80030c8 <HAL_RCC_ClockConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d910      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b87      	ldr	r3, [pc, #540]	; (80030c8 <HAL_RCC_ClockConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 020f 	bic.w	r2, r3, #15
 8002eb2:	4985      	ldr	r1, [pc, #532]	; (80030c8 <HAL_RCC_ClockConfig+0x240>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b83      	ldr	r3, [pc, #524]	; (80030c8 <HAL_RCC_ClockConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e184      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d010      	beq.n	8002efa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d908      	bls.n	8002efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ee8:	4b78      	ldr	r3, [pc, #480]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	4975      	ldr	r1, [pc, #468]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d010      	beq.n	8002f28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	4b70      	ldr	r3, [pc, #448]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d908      	bls.n	8002f28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f16:	4b6d      	ldr	r3, [pc, #436]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	496a      	ldr	r1, [pc, #424]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d010      	beq.n	8002f56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	4b64      	ldr	r3, [pc, #400]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d908      	bls.n	8002f56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f44:	4b61      	ldr	r3, [pc, #388]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	495e      	ldr	r1, [pc, #376]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d010      	beq.n	8002f84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	4b59      	ldr	r3, [pc, #356]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d908      	bls.n	8002f84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f72:	4b56      	ldr	r3, [pc, #344]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4953      	ldr	r1, [pc, #332]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	4b4d      	ldr	r3, [pc, #308]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d908      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f023 020f 	bic.w	r2, r3, #15
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4947      	ldr	r1, [pc, #284]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d055      	beq.n	800306a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fbe:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	4940      	ldr	r1, [pc, #256]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fd8:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d121      	bne.n	8003028 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0f6      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff0:	4b36      	ldr	r3, [pc, #216]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d115      	bne.n	8003028 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0ea      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d107      	bne.n	8003018 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003008:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0de      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003018:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0d6      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003028:	4b28      	ldr	r3, [pc, #160]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f023 0207 	bic.w	r2, r3, #7
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4925      	ldr	r1, [pc, #148]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8003036:	4313      	orrs	r3, r2
 8003038:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7fe fa43 	bl	80014c4 <HAL_GetTick>
 800303e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003040:	e00a      	b.n	8003058 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003042:	f7fe fa3f 	bl	80014c4 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0be      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003058:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	429a      	cmp	r2, r3
 8003068:	d1eb      	bne.n	8003042 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d010      	beq.n	8003098 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	429a      	cmp	r2, r3
 8003084:	d208      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f023 020f 	bic.w	r2, r3, #15
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	490e      	ldr	r1, [pc, #56]	; (80030cc <HAL_RCC_ClockConfig+0x244>)
 8003094:	4313      	orrs	r3, r2
 8003096:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_ClockConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d214      	bcs.n	80030d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_RCC_ClockConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 020f 	bic.w	r2, r3, #15
 80030ae:	4906      	ldr	r1, [pc, #24]	; (80030c8 <HAL_RCC_ClockConfig+0x240>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <HAL_RCC_ClockConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e086      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
 80030c8:	52002000 	.word	0x52002000
 80030cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d010      	beq.n	80030fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d208      	bcs.n	80030fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030ec:	4b3c      	ldr	r3, [pc, #240]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	4939      	ldr	r1, [pc, #228]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d010      	beq.n	800312c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003116:	429a      	cmp	r2, r3
 8003118:	d208      	bcs.n	800312c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800311a:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	492e      	ldr	r1, [pc, #184]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003128:	4313      	orrs	r3, r2
 800312a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003144:	429a      	cmp	r2, r3
 8003146:	d208      	bcs.n	800315a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	4922      	ldr	r1, [pc, #136]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003156:	4313      	orrs	r3, r2
 8003158:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d010      	beq.n	8003188 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003172:	429a      	cmp	r2, r3
 8003174:	d208      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003176:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4917      	ldr	r1, [pc, #92]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003184:	4313      	orrs	r3, r2
 8003186:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003188:	f000 f834 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	4912      	ldr	r1, [pc, #72]	; (80031e4 <HAL_RCC_ClockConfig+0x35c>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_RCC_ClockConfig+0x358>)
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_RCC_ClockConfig+0x35c>)
 80031b0:	5cd3      	ldrb	r3, [r2, r3]
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
 80031bc:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <HAL_RCC_ClockConfig+0x360>)
 80031be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x364>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <HAL_RCC_ClockConfig+0x368>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe f930 	bl	8001430 <HAL_InitTick>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
 80031e4:	080092f8 	.word	0x080092f8
 80031e8:	24000004 	.word	0x24000004
 80031ec:	24000000 	.word	0x24000000
 80031f0:	24000008 	.word	0x24000008

080031f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031fa:	4bb3      	ldr	r3, [pc, #716]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003202:	2b18      	cmp	r3, #24
 8003204:	f200 8155 	bhi.w	80034b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003208:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <HAL_RCC_GetSysClockFreq+0x1c>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003275 	.word	0x08003275
 8003214:	080034b3 	.word	0x080034b3
 8003218:	080034b3 	.word	0x080034b3
 800321c:	080034b3 	.word	0x080034b3
 8003220:	080034b3 	.word	0x080034b3
 8003224:	080034b3 	.word	0x080034b3
 8003228:	080034b3 	.word	0x080034b3
 800322c:	080034b3 	.word	0x080034b3
 8003230:	0800329b 	.word	0x0800329b
 8003234:	080034b3 	.word	0x080034b3
 8003238:	080034b3 	.word	0x080034b3
 800323c:	080034b3 	.word	0x080034b3
 8003240:	080034b3 	.word	0x080034b3
 8003244:	080034b3 	.word	0x080034b3
 8003248:	080034b3 	.word	0x080034b3
 800324c:	080034b3 	.word	0x080034b3
 8003250:	080032a1 	.word	0x080032a1
 8003254:	080034b3 	.word	0x080034b3
 8003258:	080034b3 	.word	0x080034b3
 800325c:	080034b3 	.word	0x080034b3
 8003260:	080034b3 	.word	0x080034b3
 8003264:	080034b3 	.word	0x080034b3
 8003268:	080034b3 	.word	0x080034b3
 800326c:	080034b3 	.word	0x080034b3
 8003270:	080032a7 	.word	0x080032a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003274:	4b94      	ldr	r3, [pc, #592]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003280:	4b91      	ldr	r3, [pc, #580]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	08db      	lsrs	r3, r3, #3
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	4a90      	ldr	r2, [pc, #576]	; (80034cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
 8003290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003292:	e111      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003294:	4b8d      	ldr	r3, [pc, #564]	; (80034cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003296:	61bb      	str	r3, [r7, #24]
    break;
 8003298:	e10e      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800329a:	4b8d      	ldr	r3, [pc, #564]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800329c:	61bb      	str	r3, [r7, #24]
    break;
 800329e:	e10b      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80032a0:	4b8c      	ldr	r3, [pc, #560]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032a2:	61bb      	str	r3, [r7, #24]
    break;
 80032a4:	e108      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032a6:	4b88      	ldr	r3, [pc, #544]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80032b0:	4b85      	ldr	r3, [pc, #532]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032bc:	4b82      	ldr	r3, [pc, #520]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032c6:	4b80      	ldr	r3, [pc, #512]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	08db      	lsrs	r3, r3, #3
 80032cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80e1 	beq.w	80034ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	f000 8083 	beq.w	80033f8 <HAL_RCC_GetSysClockFreq+0x204>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	f200 80a1 	bhi.w	800343c <HAL_RCC_GetSysClockFreq+0x248>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x114>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d056      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003306:	e099      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003308:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02d      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003314:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	08db      	lsrs	r3, r3, #3
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	4a6b      	ldr	r2, [pc, #428]	; (80034cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
 8003324:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333e:	4b62      	ldr	r3, [pc, #392]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003352:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800336e:	e087      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800337e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003382:	4b51      	ldr	r3, [pc, #324]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003392:	ed97 6a02 	vldr	s12, [r7, #8]
 8003396:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800339a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033b2:	e065      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c6:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033f6:	e043      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a02 	vldr	s12, [r7, #8]
 800341e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800343a:	e021      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003462:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800347e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	0a5b      	lsrs	r3, r3, #9
 8003486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800348a:	3301      	adds	r3, #1
 800348c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003498:	edd7 6a07 	vldr	s13, [r7, #28]
 800349c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a4:	ee17 3a90 	vmov	r3, s15
 80034a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80034aa:	e005      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
    break;
 80034b0:	e002      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80034b2:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034b4:	61bb      	str	r3, [r7, #24]
    break;
 80034b6:	bf00      	nop
  }

  return sysclockfreq;
 80034b8:	69bb      	ldr	r3, [r7, #24]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3724      	adds	r7, #36	; 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
 80034cc:	03d09000 	.word	0x03d09000
 80034d0:	003d0900 	.word	0x003d0900
 80034d4:	007a1200 	.word	0x007a1200
 80034d8:	46000000 	.word	0x46000000
 80034dc:	4c742400 	.word	0x4c742400
 80034e0:	4a742400 	.word	0x4a742400
 80034e4:	4af42400 	.word	0x4af42400

080034e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ee:	f7ff fe81 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80034f2:	4602      	mov	r2, r0
 80034f4:	4b10      	ldr	r3, [pc, #64]	; (8003538 <HAL_RCC_GetHCLKFreq+0x50>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	490f      	ldr	r1, [pc, #60]	; (800353c <HAL_RCC_GetHCLKFreq+0x54>)
 8003500:	5ccb      	ldrb	r3, [r1, r3]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_RCC_GetHCLKFreq+0x50>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_RCC_GetHCLKFreq+0x54>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_RCC_GetHCLKFreq+0x58>)
 8003524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003526:	4a07      	ldr	r2, [pc, #28]	; (8003544 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <HAL_RCC_GetHCLKFreq+0x58>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	58024400 	.word	0x58024400
 800353c:	080092f8 	.word	0x080092f8
 8003540:	24000004 	.word	0x24000004
 8003544:	24000000 	.word	0x24000000

08003548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800354c:	f7ff ffcc 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4904      	ldr	r1, [pc, #16]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	58024400 	.word	0x58024400
 8003570:	080092f8 	.word	0x080092f8

08003574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003578:	f7ff ffb6 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4904      	ldr	r1, [pc, #16]	; (800359c <HAL_RCC_GetPCLK2Freq+0x28>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	58024400 	.word	0x58024400
 800359c:	080092f8 	.word	0x080092f8

080035a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035a8:	2300      	movs	r3, #0
 80035aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035ac:	2300      	movs	r3, #0
 80035ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d03f      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035c4:	d02a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035ca:	d824      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d0:	d018      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d6:	d81e      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e0:	d007      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035e2:	e018      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e4:	4ba3      	ldr	r3, [pc, #652]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	4aa2      	ldr	r2, [pc, #648]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035f0:	e015      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f001 f9d5 	bl	80049a8 <RCCEx_PLL2_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003602:	e00c      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3324      	adds	r3, #36	; 0x24
 8003608:	2102      	movs	r1, #2
 800360a:	4618      	mov	r0, r3
 800360c:	f001 fa7e 	bl	8004b0c <RCCEx_PLL3_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003614:	e003      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
      break;
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800361c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003624:	4b93      	ldr	r3, [pc, #588]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003630:	4990      	ldr	r1, [pc, #576]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003632:	4313      	orrs	r3, r2
 8003634:	650b      	str	r3, [r1, #80]	; 0x50
 8003636:	e001      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d03d      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	2b04      	cmp	r3, #4
 800364e:	d826      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	0800366d 	.word	0x0800366d
 800365c:	0800367b 	.word	0x0800367b
 8003660:	0800368d 	.word	0x0800368d
 8003664:	080036a5 	.word	0x080036a5
 8003668:	080036a5 	.word	0x080036a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366c:	4b81      	ldr	r3, [pc, #516]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	4a80      	ldr	r2, [pc, #512]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003678:	e015      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f001 f991 	bl	80049a8 <RCCEx_PLL2_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800368a:	e00c      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3324      	adds	r3, #36	; 0x24
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fa3a 	bl	8004b0c <RCCEx_PLL3_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800369c:	e003      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	75fb      	strb	r3, [r7, #23]
      break;
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ac:	4b71      	ldr	r3, [pc, #452]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b0:	f023 0207 	bic.w	r2, r3, #7
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	496e      	ldr	r1, [pc, #440]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	650b      	str	r3, [r1, #80]	; 0x50
 80036be:	e001      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d042      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d8:	d02b      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80036da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036de:	d825      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036e0:	2bc0      	cmp	r3, #192	; 0xc0
 80036e2:	d028      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80036e4:	2bc0      	cmp	r3, #192	; 0xc0
 80036e6:	d821      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	d016      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80036ec:	2b80      	cmp	r3, #128	; 0x80
 80036ee:	d81d      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d007      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80036f8:	e018      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fa:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	4a5d      	ldr	r2, [pc, #372]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003704:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003706:	e017      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f001 f94a 	bl	80049a8 <RCCEx_PLL2_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003718:	e00e      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3324      	adds	r3, #36	; 0x24
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f9f3 	bl	8004b0c <RCCEx_PLL3_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800372a:	e005      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
      break;
 8003730:	e002      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800373e:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003742:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	494a      	ldr	r1, [pc, #296]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800374c:	4313      	orrs	r3, r2
 800374e:	650b      	str	r3, [r1, #80]	; 0x50
 8003750:	e001      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375e:	2b00      	cmp	r3, #0
 8003760:	d049      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800376c:	d030      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800376e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003772:	d82a      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003774:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003778:	d02c      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800377a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800377e:	d824      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003784:	d018      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378a:	d81e      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003794:	d007      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003796:	e018      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	4a35      	ldr	r2, [pc, #212]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037a4:	e017      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f001 f8fb 	bl	80049a8 <RCCEx_PLL2_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037b6:	e00e      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3324      	adds	r3, #36	; 0x24
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 f9a4 	bl	8004b0c <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037c8:	e005      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
      break;
 80037ce:	e002      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80037d0:	bf00      	nop
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80037d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037ea:	4922      	ldr	r1, [pc, #136]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	658b      	str	r3, [r1, #88]	; 0x58
 80037f0:	e001      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d04b      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380c:	d030      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800380e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003812:	d82a      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003818:	d02e      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800381a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800381e:	d824      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003824:	d018      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800382a:	d81e      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003834:	d007      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003836:	e018      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800383e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003842:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003844:	e019      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f001 f8ab 	bl	80049a8 <RCCEx_PLL2_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003856:	e010      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3324      	adds	r3, #36	; 0x24
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f001 f954 	bl	8004b0c <RCCEx_PLL3_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003868:	e007      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
      break;
 800386e:	e004      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003870:	bf00      	nop
 8003872:	e002      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003874:	58024400 	.word	0x58024400
      break;
 8003878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003880:	4b99      	ldr	r3, [pc, #612]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800388e:	4996      	ldr	r1, [pc, #600]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003890:	4313      	orrs	r3, r2
 8003892:	658b      	str	r3, [r1, #88]	; 0x58
 8003894:	e001      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d032      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038aa:	2b30      	cmp	r3, #48	; 0x30
 80038ac:	d01c      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80038ae:	2b30      	cmp	r3, #48	; 0x30
 80038b0:	d817      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d00c      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d813      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d016      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d10f      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c2:	4b89      	ldr	r3, [pc, #548]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	4a88      	ldr	r2, [pc, #544]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80038ce:	e00e      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 f866 	bl	80049a8 <RCCEx_PLL2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80038e0:	e005      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
      break;
 80038e6:	e002      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80038e8:	bf00      	nop
 80038ea:	e000      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80038ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038f4:	4b7c      	ldr	r3, [pc, #496]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	4979      	ldr	r1, [pc, #484]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003902:	4313      	orrs	r3, r2
 8003904:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003906:	e001      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d047      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003920:	d030      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003926:	d82a      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800392c:	d02c      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800392e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003932:	d824      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003938:	d018      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800393a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393e:	d81e      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d007      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800394a:	e018      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394c:	4b66      	ldr	r3, [pc, #408]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	4a65      	ldr	r2, [pc, #404]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003956:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003958:	e017      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f001 f821 	bl	80049a8 <RCCEx_PLL2_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800396a:	e00e      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 f8ca 	bl	8004b0c <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800397c:	e005      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
      break;
 8003982:	e002      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003984:	bf00      	nop
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d109      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003990:	4b55      	ldr	r3, [pc, #340]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	4952      	ldr	r1, [pc, #328]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	650b      	str	r3, [r1, #80]	; 0x50
 80039a2:	e001      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d049      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039bc:	d02e      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80039be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c2:	d828      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80039c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039c8:	d02a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80039ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ce:	d822      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80039d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039d4:	d026      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80039d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039da:	d81c      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80039dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e0:	d010      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80039e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e6:	d816      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01d      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d111      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 ffd5 	bl	80049a8 <RCCEx_PLL2_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a02:	e012      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3324      	adds	r3, #36	; 0x24
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 f87e 	bl	8004b0c <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a14:	e009      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1a:	e006      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a1c:	bf00      	nop
 8003a1e:	e004      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a20:	bf00      	nop
 8003a22:	e002      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a24:	bf00      	nop
 8003a26:	e000      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a30:	4b2d      	ldr	r3, [pc, #180]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	492a      	ldr	r1, [pc, #168]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	650b      	str	r3, [r1, #80]	; 0x50
 8003a42:	e001      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d04d      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a5e:	d02e      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a64:	d828      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6a:	d02a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d822      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003a72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a76:	d026      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003a78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a7c:	d81c      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a82:	d010      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a88:	d816      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01d      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a92:	d111      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	2101      	movs	r1, #1
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 ff84 	bl	80049a8 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003aa4:	e012      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3324      	adds	r3, #36	; 0x24
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 f82d 	bl	8004b0c <RCCEx_PLL3_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ab6:	e009      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
      break;
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e004      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ae0:	4901      	ldr	r1, [pc, #4]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ae6:	e003      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003ae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d02f      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b04:	d00e      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b0a:	d814      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d015      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b14:	d10f      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b16:	4baf      	ldr	r3, [pc, #700]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	4aae      	ldr	r2, [pc, #696]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b22:	e00c      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 ff3c 	bl	80049a8 <RCCEx_PLL2_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b34:	e003      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3a:	e000      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b44:	4ba3      	ldr	r3, [pc, #652]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b50:	49a0      	ldr	r1, [pc, #640]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	650b      	str	r3, [r1, #80]	; 0x50
 8003b56:	e001      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d032      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d81b      	bhi.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003b70:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003baf 	.word	0x08003baf
 8003b7c:	08003b89 	.word	0x08003b89
 8003b80:	08003b97 	.word	0x08003b97
 8003b84:	08003baf 	.word	0x08003baf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b88:	4b92      	ldr	r3, [pc, #584]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	4a91      	ldr	r2, [pc, #580]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b94:	e00c      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 ff03 	bl	80049a8 <RCCEx_PLL2_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ba6:	e003      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	75fb      	strb	r3, [r7, #23]
      break;
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bb6:	4b87      	ldr	r3, [pc, #540]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	f023 0203 	bic.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	4984      	ldr	r1, [pc, #528]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bc8:	e001      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8086 	beq.w	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bdc:	4b7e      	ldr	r3, [pc, #504]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a7d      	ldr	r2, [pc, #500]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be8:	f7fd fc6c 	bl	80014c4 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bee:	e009      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf0:	f7fd fc68 	bl	80014c4 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d902      	bls.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	75fb      	strb	r3, [r7, #23]
        break;
 8003c02:	e005      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c04:	4b74      	ldr	r3, [pc, #464]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ef      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d166      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c16:	4b6f      	ldr	r3, [pc, #444]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c20:	4053      	eors	r3, r2
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d013      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c2a:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c32:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c34:	4b67      	ldr	r3, [pc, #412]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a66      	ldr	r2, [pc, #408]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c40:	4b64      	ldr	r3, [pc, #400]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4a63      	ldr	r2, [pc, #396]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c4c:	4a61      	ldr	r2, [pc, #388]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c5c:	d115      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fc31 	bl	80014c4 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c64:	e00b      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fd fc2d 	bl	80014c4 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d902      	bls.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	75fb      	strb	r3, [r7, #23]
            break;
 8003c7c:	e005      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7e:	4b55      	ldr	r3, [pc, #340]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ed      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d126      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c9e:	d10d      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003ca0:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cae:	0919      	lsrs	r1, r3, #4
 8003cb0:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	4947      	ldr	r1, [pc, #284]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	610b      	str	r3, [r1, #16]
 8003cba:	e005      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003cbc:	4b45      	ldr	r3, [pc, #276]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	4a44      	ldr	r2, [pc, #272]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cc6:	6113      	str	r3, [r2, #16]
 8003cc8:	4b42      	ldr	r3, [pc, #264]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd6:	493f      	ldr	r1, [pc, #252]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	670b      	str	r3, [r1, #112]	; 0x70
 8003cdc:	e004      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	75bb      	strb	r3, [r7, #22]
 8003ce2:	e001      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8085 	beq.w	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cfa:	2b28      	cmp	r3, #40	; 0x28
 8003cfc:	d866      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003de1 	.word	0x08003de1
 8003d08:	08003dcd 	.word	0x08003dcd
 8003d0c:	08003dcd 	.word	0x08003dcd
 8003d10:	08003dcd 	.word	0x08003dcd
 8003d14:	08003dcd 	.word	0x08003dcd
 8003d18:	08003dcd 	.word	0x08003dcd
 8003d1c:	08003dcd 	.word	0x08003dcd
 8003d20:	08003dcd 	.word	0x08003dcd
 8003d24:	08003da9 	.word	0x08003da9
 8003d28:	08003dcd 	.word	0x08003dcd
 8003d2c:	08003dcd 	.word	0x08003dcd
 8003d30:	08003dcd 	.word	0x08003dcd
 8003d34:	08003dcd 	.word	0x08003dcd
 8003d38:	08003dcd 	.word	0x08003dcd
 8003d3c:	08003dcd 	.word	0x08003dcd
 8003d40:	08003dcd 	.word	0x08003dcd
 8003d44:	08003dbb 	.word	0x08003dbb
 8003d48:	08003dcd 	.word	0x08003dcd
 8003d4c:	08003dcd 	.word	0x08003dcd
 8003d50:	08003dcd 	.word	0x08003dcd
 8003d54:	08003dcd 	.word	0x08003dcd
 8003d58:	08003dcd 	.word	0x08003dcd
 8003d5c:	08003dcd 	.word	0x08003dcd
 8003d60:	08003dcd 	.word	0x08003dcd
 8003d64:	08003de1 	.word	0x08003de1
 8003d68:	08003dcd 	.word	0x08003dcd
 8003d6c:	08003dcd 	.word	0x08003dcd
 8003d70:	08003dcd 	.word	0x08003dcd
 8003d74:	08003dcd 	.word	0x08003dcd
 8003d78:	08003dcd 	.word	0x08003dcd
 8003d7c:	08003dcd 	.word	0x08003dcd
 8003d80:	08003dcd 	.word	0x08003dcd
 8003d84:	08003de1 	.word	0x08003de1
 8003d88:	08003dcd 	.word	0x08003dcd
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dcd 	.word	0x08003dcd
 8003d94:	08003dcd 	.word	0x08003dcd
 8003d98:	08003dcd 	.word	0x08003dcd
 8003d9c:	08003dcd 	.word	0x08003dcd
 8003da0:	08003dcd 	.word	0x08003dcd
 8003da4:	08003de1 	.word	0x08003de1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fdfa 	bl	80049a8 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003db8:	e013      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3324      	adds	r3, #36	; 0x24
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fea3 	bl	8004b0c <RCCEx_PLL3_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dca:	e00a      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd0:	e007      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	58024800 	.word	0x58024800
 8003ddc:	00ffffcf 	.word	0x00ffffcf
      break;
 8003de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003de8:	4b96      	ldr	r3, [pc, #600]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df4:	4993      	ldr	r1, [pc, #588]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	654b      	str	r3, [r1, #84]	; 0x54
 8003dfa:	e001      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d038      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d821      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e5f 	.word	0x08003e5f
 8003e20:	08003e35 	.word	0x08003e35
 8003e24:	08003e47 	.word	0x08003e47
 8003e28:	08003e5f 	.word	0x08003e5f
 8003e2c:	08003e5f 	.word	0x08003e5f
 8003e30:	08003e5f 	.word	0x08003e5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fdb4 	bl	80049a8 <RCCEx_PLL2_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e44:	e00c      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3324      	adds	r3, #36	; 0x24
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fe5d 	bl	8004b0c <RCCEx_PLL3_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e66:	4b77      	ldr	r3, [pc, #476]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f023 0207 	bic.w	r2, r3, #7
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e72:	4974      	ldr	r1, [pc, #464]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	654b      	str	r3, [r1, #84]	; 0x54
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d03a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d821      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003edf 	.word	0x08003edf
 8003ea0:	08003eb5 	.word	0x08003eb5
 8003ea4:	08003ec7 	.word	0x08003ec7
 8003ea8:	08003edf 	.word	0x08003edf
 8003eac:	08003edf 	.word	0x08003edf
 8003eb0:	08003edf 	.word	0x08003edf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fd74 	bl	80049a8 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ec4:	e00c      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3324      	adds	r3, #36	; 0x24
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fe1d 	bl	8004b0c <RCCEx_PLL3_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ed6:	e003      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
      break;
 8003edc:	e000      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee6:	4b57      	ldr	r3, [pc, #348]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	f023 0207 	bic.w	r2, r3, #7
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	4953      	ldr	r1, [pc, #332]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	658b      	str	r3, [r1, #88]	; 0x58
 8003efa:	e001      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d04b      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f16:	d02e      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f1c:	d828      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d02a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d822      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f2e:	d026      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003f30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f34:	d81c      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3a:	d010      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f40:	d816      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01d      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f4a:	d111      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fd28 	bl	80049a8 <RCCEx_PLL2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f5c:	e012      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3324      	adds	r3, #36	; 0x24
 8003f62:	2102      	movs	r1, #2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fdd1 	bl	8004b0c <RCCEx_PLL3_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f6e:	e009      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
      break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003f76:	bf00      	nop
 8003f78:	e004      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f98:	492a      	ldr	r1, [pc, #168]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	654b      	str	r3, [r1, #84]	; 0x54
 8003f9e:	e001      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d04d      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fba:	d02e      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003fbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fc0:	d828      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc6:	d02a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fcc:	d822      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003fce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd2:	d026      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd8:	d81c      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fde:	d010      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe4:	d816      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01d      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fee:	d111      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fcd6 	bl	80049a8 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004000:	e012      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3324      	adds	r3, #36	; 0x24
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fd7f 	bl	8004b0c <RCCEx_PLL3_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004012:	e009      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
      break;
 8004018:	e006      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800401a:	bf00      	nop
 800401c:	e004      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10c      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800403c:	4901      	ldr	r1, [pc, #4]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	658b      	str	r3, [r1, #88]	; 0x58
 8004042:	e003      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b00      	cmp	r3, #0
 8004056:	d04b      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800405e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004062:	d02e      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004064:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004068:	d828      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406e:	d02a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004074:	d822      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004076:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800407a:	d026      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800407c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004080:	d81c      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004086:	d010      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800408c:	d816      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01d      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004096:	d111      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fc82 	bl	80049a8 <RCCEx_PLL2_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040a8:	e012      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3324      	adds	r3, #36	; 0x24
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fd2b 	bl	8004b0c <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040ba:	e009      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	75fb      	strb	r3, [r7, #23]
      break;
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040c2:	bf00      	nop
 80040c4:	e004      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040c6:	bf00      	nop
 80040c8:	e002      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040d6:	4b9d      	ldr	r3, [pc, #628]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e4:	4999      	ldr	r1, [pc, #612]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	658b      	str	r3, [r1, #88]	; 0x58
 80040ea:	e001      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	d10a      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3324      	adds	r3, #36	; 0x24
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fcfc 	bl	8004b0c <RCCEx_PLL3_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800411e:	4b8b      	ldr	r3, [pc, #556]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412c:	4987      	ldr	r1, [pc, #540]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800412e:	4313      	orrs	r3, r2
 8004130:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004148:	d10a      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3324      	adds	r3, #36	; 0x24
 800414e:	2102      	movs	r1, #2
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fcdb 	bl	8004b0c <RCCEx_PLL3_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004160:	4b7a      	ldr	r3, [pc, #488]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416e:	4977      	ldr	r1, [pc, #476]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004170:	4313      	orrs	r3, r2
 8004172:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d034      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800418a:	d01d      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800418c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004190:	d817      	bhi.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419a:	d009      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800419c:	e011      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fbff 	bl	80049a8 <RCCEx_PLL2_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041ae:	e00c      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3324      	adds	r3, #36	; 0x24
 80041b4:	2102      	movs	r1, #2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fca8 	bl	8004b0c <RCCEx_PLL3_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041c0:	e003      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
      break;
 80041c6:	e000      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80041c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041d0:	4b5e      	ldr	r3, [pc, #376]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041de:	495b      	ldr	r1, [pc, #364]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	658b      	str	r3, [r1, #88]	; 0x58
 80041e4:	e001      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d033      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004200:	d01c      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004202:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004206:	d816      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420c:	d003      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800420e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004212:	d007      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004214:	e00f      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004216:	4b4d      	ldr	r3, [pc, #308]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	4a4c      	ldr	r2, [pc, #304]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800421c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004220:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004222:	e00c      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3324      	adds	r3, #36	; 0x24
 8004228:	2101      	movs	r1, #1
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fc6e 	bl	8004b0c <RCCEx_PLL3_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
      break;
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800423c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004244:	4b41      	ldr	r3, [pc, #260]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004252:	493e      	ldr	r1, [pc, #248]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004254:	4313      	orrs	r3, r2
 8004256:	654b      	str	r3, [r1, #84]	; 0x54
 8004258:	e001      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d029      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004276:	d007      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004278:	e00f      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427a:	4b34      	ldr	r3, [pc, #208]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4a33      	ldr	r2, [pc, #204]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004286:	e00b      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	2102      	movs	r1, #2
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fb8a 	bl	80049a8 <RCCEx_PLL2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004298:	e002      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	75fb      	strb	r3, [r7, #23]
      break;
 800429e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042a6:	4b29      	ldr	r3, [pc, #164]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	4926      	ldr	r1, [pc, #152]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042b8:	e001      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3324      	adds	r3, #36	; 0x24
 80042ce:	2102      	movs	r1, #2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fc1b 	bl	8004b0c <RCCEx_PLL3_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d033      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f4:	d017      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80042f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fa:	d811      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004300:	d013      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004306:	d80b      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d010      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800430c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004310:	d106      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004312:	4b0e      	ldr	r3, [pc, #56]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	4a0d      	ldr	r2, [pc, #52]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800431e:	e007      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	e004      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004326:	bf00      	nop
 8004328:	e002      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800432a:	bf00      	nop
 800432c:	e000      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800432e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10c      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004342:	4902      	ldr	r1, [pc, #8]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004344:	4313      	orrs	r3, r2
 8004346:	654b      	str	r3, [r1, #84]	; 0x54
 8004348:	e004      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800434a:	bf00      	nop
 800434c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004360:	4b31      	ldr	r3, [pc, #196]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004364:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	492e      	ldr	r1, [pc, #184]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800436e:	4313      	orrs	r3, r2
 8004370:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800437e:	4b2a      	ldr	r3, [pc, #168]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800438c:	4926      	ldr	r1, [pc, #152]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800438e:	4313      	orrs	r3, r2
 8004390:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800439e:	4b22      	ldr	r3, [pc, #136]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043aa:	491f      	ldr	r1, [pc, #124]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043bc:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	4a19      	ldr	r2, [pc, #100]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043c6:	6113      	str	r3, [r2, #16]
 80043c8:	4b17      	ldr	r3, [pc, #92]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043d2:	4915      	ldr	r1, [pc, #84]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	da08      	bge.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	490e      	ldr	r1, [pc, #56]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043fe:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	4906      	ldr	r1, [pc, #24]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800440e:	4313      	orrs	r3, r2
 8004410:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004412:	7dbb      	ldrb	r3, [r7, #22]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	58024400 	.word	0x58024400

0800442c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004430:	f7ff f85a 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4904      	ldr	r1, [pc, #16]	; (8004454 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	58024400 	.word	0x58024400
 8004454:	080092f8 	.word	0x080092f8

08004458 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004460:	4ba1      	ldr	r3, [pc, #644]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800446a:	4b9f      	ldr	r3, [pc, #636]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	0b1b      	lsrs	r3, r3, #12
 8004470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004474:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004476:	4b9c      	ldr	r3, [pc, #624]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004482:	4b99      	ldr	r3, [pc, #612]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	08db      	lsrs	r3, r3, #3
 8004488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8111 	beq.w	80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	f000 8083 	beq.w	80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	f200 80a1 	bhi.w	80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d056      	beq.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044c2:	e099      	b.n	80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044c4:	4b88      	ldr	r3, [pc, #544]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d02d      	beq.n	800452c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044d0:	4b85      	ldr	r3, [pc, #532]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	08db      	lsrs	r3, r3, #3
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	4a84      	ldr	r2, [pc, #528]	; (80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	ee07 3a90 	vmov	s15, r3
 80044e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fa:	4b7b      	ldr	r3, [pc, #492]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450a:	ed97 6a03 	vldr	s12, [r7, #12]
 800450e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800451e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004526:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800452a:	e087      	b.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80046f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800453a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453e:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004552:	eddf 5a67 	vldr	s11, [pc, #412]	; 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800456e:	e065      	b.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800457e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004582:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004592:	ed97 6a03 	vldr	s12, [r7, #12]
 8004596:	eddf 5a56 	vldr	s11, [pc, #344]	; 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800459a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045b2:	e043      	b.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c6:	4b48      	ldr	r3, [pc, #288]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045f6:	e021      	b.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004602:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a03 	vldr	s12, [r7, #12]
 800461e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800463a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800463c:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	0a5b      	lsrs	r3, r3, #9
 8004642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004656:	edd7 6a07 	vldr	s13, [r7, #28]
 800465a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800465e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004662:	ee17 2a90 	vmov	r2, s15
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800466a:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	0c1b      	lsrs	r3, r3, #16
 8004670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004674:	ee07 3a90 	vmov	s15, r3
 8004678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004680:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004684:	edd7 6a07 	vldr	s13, [r7, #28]
 8004688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800468c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004690:	ee17 2a90 	vmov	r2, s15
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004698:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	0e1b      	lsrs	r3, r3, #24
 800469e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046be:	ee17 2a90 	vmov	r2, s15
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046c6:	e008      	b.n	80046da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	609a      	str	r2, [r3, #8]
}
 80046da:	bf00      	nop
 80046dc:	3724      	adds	r7, #36	; 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	58024400 	.word	0x58024400
 80046ec:	03d09000 	.word	0x03d09000
 80046f0:	46000000 	.word	0x46000000
 80046f4:	4c742400 	.word	0x4c742400
 80046f8:	4a742400 	.word	0x4a742400
 80046fc:	4af42400 	.word	0x4af42400

08004700 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	; 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004708:	4ba1      	ldr	r3, [pc, #644]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004712:	4b9f      	ldr	r3, [pc, #636]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	0d1b      	lsrs	r3, r3, #20
 8004718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800471c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800471e:	4b9c      	ldr	r3, [pc, #624]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800472a:	4b99      	ldr	r3, [pc, #612]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	08db      	lsrs	r3, r3, #3
 8004730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8111 	beq.w	8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b02      	cmp	r3, #2
 8004752:	f000 8083 	beq.w	800485c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b02      	cmp	r3, #2
 800475a:	f200 80a1 	bhi.w	80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d056      	beq.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800476a:	e099      	b.n	80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800476c:	4b88      	ldr	r3, [pc, #544]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02d      	beq.n	80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004778:	4b85      	ldr	r3, [pc, #532]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	08db      	lsrs	r3, r3, #3
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	4a84      	ldr	r2, [pc, #528]	; (8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
 8004788:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b7b      	ldr	r3, [pc, #492]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80047d2:	e087      	b.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800499c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004816:	e065      	b.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b59      	ldr	r3, [pc, #356]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a03 	vldr	s12, [r7, #12]
 800483e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800485a:	e043      	b.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b48      	ldr	r3, [pc, #288]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004882:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800489e:	e021      	b.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b37      	ldr	r3, [pc, #220]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80048e4:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	0a5b      	lsrs	r3, r3, #9
 80048ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800490a:	ee17 2a90 	vmov	r2, s15
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004912:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800491c:	ee07 3a90 	vmov	s15, r3
 8004920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800492c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004938:	ee17 2a90 	vmov	r2, s15
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004940:	4b13      	ldr	r3, [pc, #76]	; (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	0e1b      	lsrs	r3, r3, #24
 8004946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004956:	ee37 7a87 	vadd.f32	s14, s15, s14
 800495a:	edd7 6a07 	vldr	s13, [r7, #28]
 800495e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004966:	ee17 2a90 	vmov	r2, s15
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800496e:	e008      	b.n	8004982 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	609a      	str	r2, [r3, #8]
}
 8004982:	bf00      	nop
 8004984:	3724      	adds	r7, #36	; 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	58024400 	.word	0x58024400
 8004994:	03d09000 	.word	0x03d09000
 8004998:	46000000 	.word	0x46000000
 800499c:	4c742400 	.word	0x4c742400
 80049a0:	4a742400 	.word	0x4a742400
 80049a4:	4af42400 	.word	0x4af42400

080049a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049b6:	4b53      	ldr	r3, [pc, #332]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d101      	bne.n	80049c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e099      	b.n	8004afa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049c6:	4b4f      	ldr	r3, [pc, #316]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a4e      	ldr	r2, [pc, #312]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d2:	f7fc fd77 	bl	80014c4 <HAL_GetTick>
 80049d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049d8:	e008      	b.n	80049ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049da:	f7fc fd73 	bl	80014c4 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e086      	b.n	8004afa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049ec:	4b45      	ldr	r3, [pc, #276]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f0      	bne.n	80049da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049f8:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	031b      	lsls	r3, r3, #12
 8004a06:	493f      	ldr	r1, [pc, #252]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	025b      	lsls	r3, r3, #9
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	061b      	lsls	r3, r3, #24
 8004a38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a3c:	4931      	ldr	r1, [pc, #196]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a42:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	492d      	ldr	r1, [pc, #180]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a54:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	f023 0220 	bic.w	r2, r3, #32
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4928      	ldr	r1, [pc, #160]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	4a26      	ldr	r2, [pc, #152]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a76:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <RCCEx_PLL2_Config+0x160>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	69d2      	ldr	r2, [r2, #28]
 8004a7e:	00d2      	lsls	r2, r2, #3
 8004a80:	4920      	ldr	r1, [pc, #128]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a86:	4b1f      	ldr	r3, [pc, #124]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	f043 0310 	orr.w	r3, r3, #16
 8004a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a98:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004aa4:	e00f      	b.n	8004ac6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d106      	bne.n	8004aba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004aac:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	4a14      	ldr	r2, [pc, #80]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ab8:	e005      	b.n	8004ac6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004aba:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	4a11      	ldr	r2, [pc, #68]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a0e      	ldr	r2, [pc, #56]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004acc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad2:	f7fc fcf7 	bl	80014c4 <HAL_GetTick>
 8004ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ad8:	e008      	b.n	8004aec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ada:	f7fc fcf3 	bl	80014c4 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e006      	b.n	8004afa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	58024400 	.word	0x58024400
 8004b08:	ffff0007 	.word	0xffff0007

08004b0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b1a:	4b53      	ldr	r3, [pc, #332]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d101      	bne.n	8004b2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e099      	b.n	8004c5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b2a:	4b4f      	ldr	r3, [pc, #316]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a4e      	ldr	r2, [pc, #312]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b36:	f7fc fcc5 	bl	80014c4 <HAL_GetTick>
 8004b3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b3c:	e008      	b.n	8004b50 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b3e:	f7fc fcc1 	bl	80014c4 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e086      	b.n	8004c5e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b50:	4b45      	ldr	r3, [pc, #276]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b5c:	4b42      	ldr	r3, [pc, #264]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	051b      	lsls	r3, r3, #20
 8004b6a:	493f      	ldr	r1, [pc, #252]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	628b      	str	r3, [r1, #40]	; 0x28
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	025b      	lsls	r3, r3, #9
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ba0:	4931      	ldr	r1, [pc, #196]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ba6:	4b30      	ldr	r3, [pc, #192]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	492d      	ldr	r1, [pc, #180]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	4928      	ldr	r1, [pc, #160]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bca:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4a26      	ldr	r2, [pc, #152]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bd6:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <RCCEx_PLL3_Config+0x160>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	69d2      	ldr	r2, [r2, #28]
 8004be2:	00d2      	lsls	r2, r2, #3
 8004be4:	4920      	ldr	r1, [pc, #128]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bea:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c08:	e00f      	b.n	8004c2a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d106      	bne.n	8004c1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c1c:	e005      	b.n	8004c2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c1e:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c2a:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a0e      	ldr	r2, [pc, #56]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c36:	f7fc fc45 	bl	80014c4 <HAL_GetTick>
 8004c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c3c:	e008      	b.n	8004c50 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c3e:	f7fc fc41 	bl	80014c4 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e006      	b.n	8004c5e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	ffff0007 	.word	0xffff0007

08004c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e042      	b.n	8004d08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fc f90d 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2224      	movs	r2, #36	; 0x24
 8004c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f996 	bl	8004fe4 <UART_SetConfig>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e022      	b.n	8004d08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fef2 	bl	8005ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 ff79 	bl	8005bf8 <UART_CheckIdleState>
 8004d06:	4603      	mov	r3, r0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	f040 8083 	bne.w	8004e32 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Transmit+0x28>
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e07b      	b.n	8004e34 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Transmit+0x3a>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e074      	b.n	8004e34 <HAL_UART_Transmit+0x124>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2221      	movs	r2, #33	; 0x21
 8004d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d62:	f7fc fbaf 	bl	80014c4 <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d80:	d108      	bne.n	8004d94 <HAL_UART_Transmit+0x84>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	e003      	b.n	8004d9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004da4:	e02c      	b.n	8004e00 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2200      	movs	r2, #0
 8004dae:	2180      	movs	r1, #128	; 0x80
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 ff6c 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e039      	b.n	8004e34 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10b      	bne.n	8004dde <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	3302      	adds	r3, #2
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	e007      	b.n	8004dee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	781a      	ldrb	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	3301      	adds	r3, #1
 8004dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1cc      	bne.n	8004da6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	2140      	movs	r1, #64	; 0x40
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 ff39 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e006      	b.n	8004e34 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e000      	b.n	8004e34 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08a      	sub	sp, #40	; 0x28
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	f040 80c0 	bne.w	8004fd8 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_UART_Receive+0x28>
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0b8      	b.n	8004fda <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Receive+0x3a>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e0b1      	b.n	8004fda <HAL_UART_Receive+0x19e>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2222      	movs	r2, #34	; 0x22
 8004e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e94:	f7fc fb16 	bl	80014c4 <HAL_GetTick>
 8004e98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	88fa      	ldrh	r2, [r7, #6]
 8004e9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88fa      	ldrh	r2, [r7, #6]
 8004ea6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	d10e      	bne.n	8004ed2 <HAL_UART_Receive+0x96>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d105      	bne.n	8004ec8 <HAL_UART_Receive+0x8c>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ec2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ec6:	e02d      	b.n	8004f24 <HAL_UART_Receive+0xe8>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	22ff      	movs	r2, #255	; 0xff
 8004ecc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ed0:	e028      	b.n	8004f24 <HAL_UART_Receive+0xe8>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10d      	bne.n	8004ef6 <HAL_UART_Receive+0xba>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d104      	bne.n	8004eec <HAL_UART_Receive+0xb0>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004eea:	e01b      	b.n	8004f24 <HAL_UART_Receive+0xe8>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	227f      	movs	r2, #127	; 0x7f
 8004ef0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ef4:	e016      	b.n	8004f24 <HAL_UART_Receive+0xe8>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004efe:	d10d      	bne.n	8004f1c <HAL_UART_Receive+0xe0>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d104      	bne.n	8004f12 <HAL_UART_Receive+0xd6>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	227f      	movs	r2, #127	; 0x7f
 8004f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f10:	e008      	b.n	8004f24 <HAL_UART_Receive+0xe8>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	223f      	movs	r2, #63	; 0x3f
 8004f16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f1a:	e003      	b.n	8004f24 <HAL_UART_Receive+0xe8>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004f2a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f34:	d108      	bne.n	8004f48 <HAL_UART_Receive+0x10c>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d104      	bne.n	8004f48 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	e003      	b.n	8004f50 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f58:	e032      	b.n	8004fc0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2120      	movs	r1, #32
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fe92 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e032      	b.n	8004fda <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10c      	bne.n	8004f94 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	8a7b      	ldrh	r3, [r7, #18]
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	3302      	adds	r3, #2
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	e00c      	b.n	8004fae <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	8a7b      	ldrh	r3, [r7, #18]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	3301      	adds	r3, #1
 8004fac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1c6      	bne.n	8004f5a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe8:	b092      	sub	sp, #72	; 0x48
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	431a      	orrs	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	4313      	orrs	r3, r2
 800500a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4bbe      	ldr	r3, [pc, #760]	; (800530c <UART_SetConfig+0x328>)
 8005014:	4013      	ands	r3, r2
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800501c:	430b      	orrs	r3, r1
 800501e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4ab3      	ldr	r2, [pc, #716]	; (8005310 <UART_SetConfig+0x32c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800504c:	4313      	orrs	r3, r2
 800504e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	4baf      	ldr	r3, [pc, #700]	; (8005314 <UART_SetConfig+0x330>)
 8005058:	4013      	ands	r3, r2
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005060:	430b      	orrs	r3, r1
 8005062:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	f023 010f 	bic.w	r1, r3, #15
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4aa6      	ldr	r2, [pc, #664]	; (8005318 <UART_SetConfig+0x334>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d177      	bne.n	8005174 <UART_SetConfig+0x190>
 8005084:	4ba5      	ldr	r3, [pc, #660]	; (800531c <UART_SetConfig+0x338>)
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800508c:	2b28      	cmp	r3, #40	; 0x28
 800508e:	d86d      	bhi.n	800516c <UART_SetConfig+0x188>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <UART_SetConfig+0xb4>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	0800513d 	.word	0x0800513d
 800509c:	0800516d 	.word	0x0800516d
 80050a0:	0800516d 	.word	0x0800516d
 80050a4:	0800516d 	.word	0x0800516d
 80050a8:	0800516d 	.word	0x0800516d
 80050ac:	0800516d 	.word	0x0800516d
 80050b0:	0800516d 	.word	0x0800516d
 80050b4:	0800516d 	.word	0x0800516d
 80050b8:	08005145 	.word	0x08005145
 80050bc:	0800516d 	.word	0x0800516d
 80050c0:	0800516d 	.word	0x0800516d
 80050c4:	0800516d 	.word	0x0800516d
 80050c8:	0800516d 	.word	0x0800516d
 80050cc:	0800516d 	.word	0x0800516d
 80050d0:	0800516d 	.word	0x0800516d
 80050d4:	0800516d 	.word	0x0800516d
 80050d8:	0800514d 	.word	0x0800514d
 80050dc:	0800516d 	.word	0x0800516d
 80050e0:	0800516d 	.word	0x0800516d
 80050e4:	0800516d 	.word	0x0800516d
 80050e8:	0800516d 	.word	0x0800516d
 80050ec:	0800516d 	.word	0x0800516d
 80050f0:	0800516d 	.word	0x0800516d
 80050f4:	0800516d 	.word	0x0800516d
 80050f8:	08005155 	.word	0x08005155
 80050fc:	0800516d 	.word	0x0800516d
 8005100:	0800516d 	.word	0x0800516d
 8005104:	0800516d 	.word	0x0800516d
 8005108:	0800516d 	.word	0x0800516d
 800510c:	0800516d 	.word	0x0800516d
 8005110:	0800516d 	.word	0x0800516d
 8005114:	0800516d 	.word	0x0800516d
 8005118:	0800515d 	.word	0x0800515d
 800511c:	0800516d 	.word	0x0800516d
 8005120:	0800516d 	.word	0x0800516d
 8005124:	0800516d 	.word	0x0800516d
 8005128:	0800516d 	.word	0x0800516d
 800512c:	0800516d 	.word	0x0800516d
 8005130:	0800516d 	.word	0x0800516d
 8005134:	0800516d 	.word	0x0800516d
 8005138:	08005165 	.word	0x08005165
 800513c:	2301      	movs	r3, #1
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005142:	e222      	b.n	800558a <UART_SetConfig+0x5a6>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514a:	e21e      	b.n	800558a <UART_SetConfig+0x5a6>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005152:	e21a      	b.n	800558a <UART_SetConfig+0x5a6>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515a:	e216      	b.n	800558a <UART_SetConfig+0x5a6>
 800515c:	2320      	movs	r3, #32
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005162:	e212      	b.n	800558a <UART_SetConfig+0x5a6>
 8005164:	2340      	movs	r3, #64	; 0x40
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e20e      	b.n	800558a <UART_SetConfig+0x5a6>
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e20a      	b.n	800558a <UART_SetConfig+0x5a6>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a69      	ldr	r2, [pc, #420]	; (8005320 <UART_SetConfig+0x33c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d130      	bne.n	80051e0 <UART_SetConfig+0x1fc>
 800517e:	4b67      	ldr	r3, [pc, #412]	; (800531c <UART_SetConfig+0x338>)
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b05      	cmp	r3, #5
 8005188:	d826      	bhi.n	80051d8 <UART_SetConfig+0x1f4>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <UART_SetConfig+0x1ac>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051a9 	.word	0x080051a9
 8005194:	080051b1 	.word	0x080051b1
 8005198:	080051b9 	.word	0x080051b9
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051d1 	.word	0x080051d1
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ae:	e1ec      	b.n	800558a <UART_SetConfig+0x5a6>
 80051b0:	2304      	movs	r3, #4
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e1e8      	b.n	800558a <UART_SetConfig+0x5a6>
 80051b8:	2308      	movs	r3, #8
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e1e4      	b.n	800558a <UART_SetConfig+0x5a6>
 80051c0:	2310      	movs	r3, #16
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e1e0      	b.n	800558a <UART_SetConfig+0x5a6>
 80051c8:	2320      	movs	r3, #32
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e1dc      	b.n	800558a <UART_SetConfig+0x5a6>
 80051d0:	2340      	movs	r3, #64	; 0x40
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e1d8      	b.n	800558a <UART_SetConfig+0x5a6>
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e1d4      	b.n	800558a <UART_SetConfig+0x5a6>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a4f      	ldr	r2, [pc, #316]	; (8005324 <UART_SetConfig+0x340>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d130      	bne.n	800524c <UART_SetConfig+0x268>
 80051ea:	4b4c      	ldr	r3, [pc, #304]	; (800531c <UART_SetConfig+0x338>)
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b05      	cmp	r3, #5
 80051f4:	d826      	bhi.n	8005244 <UART_SetConfig+0x260>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <UART_SetConfig+0x218>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	08005215 	.word	0x08005215
 8005200:	0800521d 	.word	0x0800521d
 8005204:	08005225 	.word	0x08005225
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005235 	.word	0x08005235
 8005210:	0800523d 	.word	0x0800523d
 8005214:	2300      	movs	r3, #0
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e1b6      	b.n	800558a <UART_SetConfig+0x5a6>
 800521c:	2304      	movs	r3, #4
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e1b2      	b.n	800558a <UART_SetConfig+0x5a6>
 8005224:	2308      	movs	r3, #8
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e1ae      	b.n	800558a <UART_SetConfig+0x5a6>
 800522c:	2310      	movs	r3, #16
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e1aa      	b.n	800558a <UART_SetConfig+0x5a6>
 8005234:	2320      	movs	r3, #32
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523a:	e1a6      	b.n	800558a <UART_SetConfig+0x5a6>
 800523c:	2340      	movs	r3, #64	; 0x40
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005242:	e1a2      	b.n	800558a <UART_SetConfig+0x5a6>
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524a:	e19e      	b.n	800558a <UART_SetConfig+0x5a6>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a35      	ldr	r2, [pc, #212]	; (8005328 <UART_SetConfig+0x344>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d130      	bne.n	80052b8 <UART_SetConfig+0x2d4>
 8005256:	4b31      	ldr	r3, [pc, #196]	; (800531c <UART_SetConfig+0x338>)
 8005258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	2b05      	cmp	r3, #5
 8005260:	d826      	bhi.n	80052b0 <UART_SetConfig+0x2cc>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0x284>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	08005281 	.word	0x08005281
 800526c:	08005289 	.word	0x08005289
 8005270:	08005291 	.word	0x08005291
 8005274:	08005299 	.word	0x08005299
 8005278:	080052a1 	.word	0x080052a1
 800527c:	080052a9 	.word	0x080052a9
 8005280:	2300      	movs	r3, #0
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005286:	e180      	b.n	800558a <UART_SetConfig+0x5a6>
 8005288:	2304      	movs	r3, #4
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528e:	e17c      	b.n	800558a <UART_SetConfig+0x5a6>
 8005290:	2308      	movs	r3, #8
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005296:	e178      	b.n	800558a <UART_SetConfig+0x5a6>
 8005298:	2310      	movs	r3, #16
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529e:	e174      	b.n	800558a <UART_SetConfig+0x5a6>
 80052a0:	2320      	movs	r3, #32
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e170      	b.n	800558a <UART_SetConfig+0x5a6>
 80052a8:	2340      	movs	r3, #64	; 0x40
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ae:	e16c      	b.n	800558a <UART_SetConfig+0x5a6>
 80052b0:	2380      	movs	r3, #128	; 0x80
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b6:	e168      	b.n	800558a <UART_SetConfig+0x5a6>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1b      	ldr	r2, [pc, #108]	; (800532c <UART_SetConfig+0x348>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d142      	bne.n	8005348 <UART_SetConfig+0x364>
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <UART_SetConfig+0x338>)
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d838      	bhi.n	8005340 <UART_SetConfig+0x35c>
 80052ce:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <UART_SetConfig+0x2f0>)
 80052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d4:	080052ed 	.word	0x080052ed
 80052d8:	080052f5 	.word	0x080052f5
 80052dc:	080052fd 	.word	0x080052fd
 80052e0:	08005305 	.word	0x08005305
 80052e4:	08005331 	.word	0x08005331
 80052e8:	08005339 	.word	0x08005339
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e14a      	b.n	800558a <UART_SetConfig+0x5a6>
 80052f4:	2304      	movs	r3, #4
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e146      	b.n	800558a <UART_SetConfig+0x5a6>
 80052fc:	2308      	movs	r3, #8
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e142      	b.n	800558a <UART_SetConfig+0x5a6>
 8005304:	2310      	movs	r3, #16
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e13e      	b.n	800558a <UART_SetConfig+0x5a6>
 800530c:	cfff69f3 	.word	0xcfff69f3
 8005310:	58000c00 	.word	0x58000c00
 8005314:	11fff4ff 	.word	0x11fff4ff
 8005318:	40011000 	.word	0x40011000
 800531c:	58024400 	.word	0x58024400
 8005320:	40004400 	.word	0x40004400
 8005324:	40004800 	.word	0x40004800
 8005328:	40004c00 	.word	0x40004c00
 800532c:	40005000 	.word	0x40005000
 8005330:	2320      	movs	r3, #32
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005336:	e128      	b.n	800558a <UART_SetConfig+0x5a6>
 8005338:	2340      	movs	r3, #64	; 0x40
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533e:	e124      	b.n	800558a <UART_SetConfig+0x5a6>
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005346:	e120      	b.n	800558a <UART_SetConfig+0x5a6>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4acb      	ldr	r2, [pc, #812]	; (800567c <UART_SetConfig+0x698>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d176      	bne.n	8005440 <UART_SetConfig+0x45c>
 8005352:	4bcb      	ldr	r3, [pc, #812]	; (8005680 <UART_SetConfig+0x69c>)
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800535a:	2b28      	cmp	r3, #40	; 0x28
 800535c:	d86c      	bhi.n	8005438 <UART_SetConfig+0x454>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0x380>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005409 	.word	0x08005409
 8005368:	08005439 	.word	0x08005439
 800536c:	08005439 	.word	0x08005439
 8005370:	08005439 	.word	0x08005439
 8005374:	08005439 	.word	0x08005439
 8005378:	08005439 	.word	0x08005439
 800537c:	08005439 	.word	0x08005439
 8005380:	08005439 	.word	0x08005439
 8005384:	08005411 	.word	0x08005411
 8005388:	08005439 	.word	0x08005439
 800538c:	08005439 	.word	0x08005439
 8005390:	08005439 	.word	0x08005439
 8005394:	08005439 	.word	0x08005439
 8005398:	08005439 	.word	0x08005439
 800539c:	08005439 	.word	0x08005439
 80053a0:	08005439 	.word	0x08005439
 80053a4:	08005419 	.word	0x08005419
 80053a8:	08005439 	.word	0x08005439
 80053ac:	08005439 	.word	0x08005439
 80053b0:	08005439 	.word	0x08005439
 80053b4:	08005439 	.word	0x08005439
 80053b8:	08005439 	.word	0x08005439
 80053bc:	08005439 	.word	0x08005439
 80053c0:	08005439 	.word	0x08005439
 80053c4:	08005421 	.word	0x08005421
 80053c8:	08005439 	.word	0x08005439
 80053cc:	08005439 	.word	0x08005439
 80053d0:	08005439 	.word	0x08005439
 80053d4:	08005439 	.word	0x08005439
 80053d8:	08005439 	.word	0x08005439
 80053dc:	08005439 	.word	0x08005439
 80053e0:	08005439 	.word	0x08005439
 80053e4:	08005429 	.word	0x08005429
 80053e8:	08005439 	.word	0x08005439
 80053ec:	08005439 	.word	0x08005439
 80053f0:	08005439 	.word	0x08005439
 80053f4:	08005439 	.word	0x08005439
 80053f8:	08005439 	.word	0x08005439
 80053fc:	08005439 	.word	0x08005439
 8005400:	08005439 	.word	0x08005439
 8005404:	08005431 	.word	0x08005431
 8005408:	2301      	movs	r3, #1
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540e:	e0bc      	b.n	800558a <UART_SetConfig+0x5a6>
 8005410:	2304      	movs	r3, #4
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005416:	e0b8      	b.n	800558a <UART_SetConfig+0x5a6>
 8005418:	2308      	movs	r3, #8
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e0b4      	b.n	800558a <UART_SetConfig+0x5a6>
 8005420:	2310      	movs	r3, #16
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e0b0      	b.n	800558a <UART_SetConfig+0x5a6>
 8005428:	2320      	movs	r3, #32
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e0ac      	b.n	800558a <UART_SetConfig+0x5a6>
 8005430:	2340      	movs	r3, #64	; 0x40
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e0a8      	b.n	800558a <UART_SetConfig+0x5a6>
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e0a4      	b.n	800558a <UART_SetConfig+0x5a6>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a8f      	ldr	r2, [pc, #572]	; (8005684 <UART_SetConfig+0x6a0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d130      	bne.n	80054ac <UART_SetConfig+0x4c8>
 800544a:	4b8d      	ldr	r3, [pc, #564]	; (8005680 <UART_SetConfig+0x69c>)
 800544c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	2b05      	cmp	r3, #5
 8005454:	d826      	bhi.n	80054a4 <UART_SetConfig+0x4c0>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0x478>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	08005475 	.word	0x08005475
 8005460:	0800547d 	.word	0x0800547d
 8005464:	08005485 	.word	0x08005485
 8005468:	0800548d 	.word	0x0800548d
 800546c:	08005495 	.word	0x08005495
 8005470:	0800549d 	.word	0x0800549d
 8005474:	2300      	movs	r3, #0
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547a:	e086      	b.n	800558a <UART_SetConfig+0x5a6>
 800547c:	2304      	movs	r3, #4
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005482:	e082      	b.n	800558a <UART_SetConfig+0x5a6>
 8005484:	2308      	movs	r3, #8
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548a:	e07e      	b.n	800558a <UART_SetConfig+0x5a6>
 800548c:	2310      	movs	r3, #16
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e07a      	b.n	800558a <UART_SetConfig+0x5a6>
 8005494:	2320      	movs	r3, #32
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549a:	e076      	b.n	800558a <UART_SetConfig+0x5a6>
 800549c:	2340      	movs	r3, #64	; 0x40
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e072      	b.n	800558a <UART_SetConfig+0x5a6>
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e06e      	b.n	800558a <UART_SetConfig+0x5a6>
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a75      	ldr	r2, [pc, #468]	; (8005688 <UART_SetConfig+0x6a4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d130      	bne.n	8005518 <UART_SetConfig+0x534>
 80054b6:	4b72      	ldr	r3, [pc, #456]	; (8005680 <UART_SetConfig+0x69c>)
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	2b05      	cmp	r3, #5
 80054c0:	d826      	bhi.n	8005510 <UART_SetConfig+0x52c>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <UART_SetConfig+0x4e4>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	080054e1 	.word	0x080054e1
 80054cc:	080054e9 	.word	0x080054e9
 80054d0:	080054f1 	.word	0x080054f1
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	08005501 	.word	0x08005501
 80054dc:	08005509 	.word	0x08005509
 80054e0:	2300      	movs	r3, #0
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e6:	e050      	b.n	800558a <UART_SetConfig+0x5a6>
 80054e8:	2304      	movs	r3, #4
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ee:	e04c      	b.n	800558a <UART_SetConfig+0x5a6>
 80054f0:	2308      	movs	r3, #8
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f6:	e048      	b.n	800558a <UART_SetConfig+0x5a6>
 80054f8:	2310      	movs	r3, #16
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fe:	e044      	b.n	800558a <UART_SetConfig+0x5a6>
 8005500:	2320      	movs	r3, #32
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e040      	b.n	800558a <UART_SetConfig+0x5a6>
 8005508:	2340      	movs	r3, #64	; 0x40
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e03c      	b.n	800558a <UART_SetConfig+0x5a6>
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e038      	b.n	800558a <UART_SetConfig+0x5a6>
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a5b      	ldr	r2, [pc, #364]	; (800568c <UART_SetConfig+0x6a8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d130      	bne.n	8005584 <UART_SetConfig+0x5a0>
 8005522:	4b57      	ldr	r3, [pc, #348]	; (8005680 <UART_SetConfig+0x69c>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	2b05      	cmp	r3, #5
 800552c:	d826      	bhi.n	800557c <UART_SetConfig+0x598>
 800552e:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <UART_SetConfig+0x550>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	0800554d 	.word	0x0800554d
 8005538:	08005555 	.word	0x08005555
 800553c:	0800555d 	.word	0x0800555d
 8005540:	08005565 	.word	0x08005565
 8005544:	0800556d 	.word	0x0800556d
 8005548:	08005575 	.word	0x08005575
 800554c:	2302      	movs	r3, #2
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005552:	e01a      	b.n	800558a <UART_SetConfig+0x5a6>
 8005554:	2304      	movs	r3, #4
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555a:	e016      	b.n	800558a <UART_SetConfig+0x5a6>
 800555c:	2308      	movs	r3, #8
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005562:	e012      	b.n	800558a <UART_SetConfig+0x5a6>
 8005564:	2310      	movs	r3, #16
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556a:	e00e      	b.n	800558a <UART_SetConfig+0x5a6>
 800556c:	2320      	movs	r3, #32
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005572:	e00a      	b.n	800558a <UART_SetConfig+0x5a6>
 8005574:	2340      	movs	r3, #64	; 0x40
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e006      	b.n	800558a <UART_SetConfig+0x5a6>
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e002      	b.n	800558a <UART_SetConfig+0x5a6>
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a3f      	ldr	r2, [pc, #252]	; (800568c <UART_SetConfig+0x6a8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	f040 80f8 	bne.w	8005786 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005596:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800559a:	2b20      	cmp	r3, #32
 800559c:	dc46      	bgt.n	800562c <UART_SetConfig+0x648>
 800559e:	2b02      	cmp	r3, #2
 80055a0:	f2c0 8082 	blt.w	80056a8 <UART_SetConfig+0x6c4>
 80055a4:	3b02      	subs	r3, #2
 80055a6:	2b1e      	cmp	r3, #30
 80055a8:	d87e      	bhi.n	80056a8 <UART_SetConfig+0x6c4>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0x5cc>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	08005633 	.word	0x08005633
 80055b4:	080056a9 	.word	0x080056a9
 80055b8:	0800563b 	.word	0x0800563b
 80055bc:	080056a9 	.word	0x080056a9
 80055c0:	080056a9 	.word	0x080056a9
 80055c4:	080056a9 	.word	0x080056a9
 80055c8:	0800564b 	.word	0x0800564b
 80055cc:	080056a9 	.word	0x080056a9
 80055d0:	080056a9 	.word	0x080056a9
 80055d4:	080056a9 	.word	0x080056a9
 80055d8:	080056a9 	.word	0x080056a9
 80055dc:	080056a9 	.word	0x080056a9
 80055e0:	080056a9 	.word	0x080056a9
 80055e4:	080056a9 	.word	0x080056a9
 80055e8:	0800565b 	.word	0x0800565b
 80055ec:	080056a9 	.word	0x080056a9
 80055f0:	080056a9 	.word	0x080056a9
 80055f4:	080056a9 	.word	0x080056a9
 80055f8:	080056a9 	.word	0x080056a9
 80055fc:	080056a9 	.word	0x080056a9
 8005600:	080056a9 	.word	0x080056a9
 8005604:	080056a9 	.word	0x080056a9
 8005608:	080056a9 	.word	0x080056a9
 800560c:	080056a9 	.word	0x080056a9
 8005610:	080056a9 	.word	0x080056a9
 8005614:	080056a9 	.word	0x080056a9
 8005618:	080056a9 	.word	0x080056a9
 800561c:	080056a9 	.word	0x080056a9
 8005620:	080056a9 	.word	0x080056a9
 8005624:	080056a9 	.word	0x080056a9
 8005628:	0800569b 	.word	0x0800569b
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d037      	beq.n	80056a0 <UART_SetConfig+0x6bc>
 8005630:	e03a      	b.n	80056a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005632:	f7fe fefb 	bl	800442c <HAL_RCCEx_GetD3PCLK1Freq>
 8005636:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005638:	e03c      	b.n	80056b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800563a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe ff0a 	bl	8004458 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005648:	e034      	b.n	80056b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800564a:	f107 0318 	add.w	r3, r7, #24
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff f856 	bl	8004700 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005658:	e02c      	b.n	80056b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <UART_SetConfig+0x69c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b00      	cmp	r3, #0
 8005664:	d016      	beq.n	8005694 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <UART_SetConfig+0x69c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	08db      	lsrs	r3, r3, #3
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	4a07      	ldr	r2, [pc, #28]	; (8005690 <UART_SetConfig+0x6ac>)
 8005672:	fa22 f303 	lsr.w	r3, r2, r3
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005678:	e01c      	b.n	80056b4 <UART_SetConfig+0x6d0>
 800567a:	bf00      	nop
 800567c:	40011400 	.word	0x40011400
 8005680:	58024400 	.word	0x58024400
 8005684:	40007800 	.word	0x40007800
 8005688:	40007c00 	.word	0x40007c00
 800568c:	58000c00 	.word	0x58000c00
 8005690:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005694:	4b9d      	ldr	r3, [pc, #628]	; (800590c <UART_SetConfig+0x928>)
 8005696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005698:	e00c      	b.n	80056b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800569a:	4b9d      	ldr	r3, [pc, #628]	; (8005910 <UART_SetConfig+0x92c>)
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800569e:	e009      	b.n	80056b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056a6:	e005      	b.n	80056b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 81de 	beq.w	8005a78 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	4a94      	ldr	r2, [pc, #592]	; (8005914 <UART_SetConfig+0x930>)
 80056c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4413      	add	r3, r2
 80056da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056dc:	429a      	cmp	r2, r3
 80056de:	d305      	bcc.n	80056ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d903      	bls.n	80056f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056f2:	e1c1      	b.n	8005a78 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f6:	2200      	movs	r2, #0
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	60fa      	str	r2, [r7, #12]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	4a84      	ldr	r2, [pc, #528]	; (8005914 <UART_SetConfig+0x930>)
 8005702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005706:	b29b      	uxth	r3, r3
 8005708:	2200      	movs	r2, #0
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005716:	f7fa fe3b 	bl	8000390 <__aeabi_uldivmod>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4610      	mov	r0, r2
 8005720:	4619      	mov	r1, r3
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	020b      	lsls	r3, r1, #8
 800572c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005730:	0202      	lsls	r2, r0, #8
 8005732:	6979      	ldr	r1, [r7, #20]
 8005734:	6849      	ldr	r1, [r1, #4]
 8005736:	0849      	lsrs	r1, r1, #1
 8005738:	2000      	movs	r0, #0
 800573a:	460c      	mov	r4, r1
 800573c:	4605      	mov	r5, r0
 800573e:	eb12 0804 	adds.w	r8, r2, r4
 8005742:	eb43 0905 	adc.w	r9, r3, r5
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	469a      	mov	sl, r3
 800574e:	4693      	mov	fp, r2
 8005750:	4652      	mov	r2, sl
 8005752:	465b      	mov	r3, fp
 8005754:	4640      	mov	r0, r8
 8005756:	4649      	mov	r1, r9
 8005758:	f7fa fe1a 	bl	8000390 <__aeabi_uldivmod>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4613      	mov	r3, r2
 8005762:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576a:	d308      	bcc.n	800577e <UART_SetConfig+0x79a>
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005772:	d204      	bcs.n	800577e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	e17c      	b.n	8005a78 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005784:	e178      	b.n	8005a78 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578e:	f040 80c5 	bne.w	800591c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005792:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005796:	2b20      	cmp	r3, #32
 8005798:	dc48      	bgt.n	800582c <UART_SetConfig+0x848>
 800579a:	2b00      	cmp	r3, #0
 800579c:	db7b      	blt.n	8005896 <UART_SetConfig+0x8b2>
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d879      	bhi.n	8005896 <UART_SetConfig+0x8b2>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <UART_SetConfig+0x7c4>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	08005833 	.word	0x08005833
 80057ac:	0800583b 	.word	0x0800583b
 80057b0:	08005897 	.word	0x08005897
 80057b4:	08005897 	.word	0x08005897
 80057b8:	08005843 	.word	0x08005843
 80057bc:	08005897 	.word	0x08005897
 80057c0:	08005897 	.word	0x08005897
 80057c4:	08005897 	.word	0x08005897
 80057c8:	08005853 	.word	0x08005853
 80057cc:	08005897 	.word	0x08005897
 80057d0:	08005897 	.word	0x08005897
 80057d4:	08005897 	.word	0x08005897
 80057d8:	08005897 	.word	0x08005897
 80057dc:	08005897 	.word	0x08005897
 80057e0:	08005897 	.word	0x08005897
 80057e4:	08005897 	.word	0x08005897
 80057e8:	08005863 	.word	0x08005863
 80057ec:	08005897 	.word	0x08005897
 80057f0:	08005897 	.word	0x08005897
 80057f4:	08005897 	.word	0x08005897
 80057f8:	08005897 	.word	0x08005897
 80057fc:	08005897 	.word	0x08005897
 8005800:	08005897 	.word	0x08005897
 8005804:	08005897 	.word	0x08005897
 8005808:	08005897 	.word	0x08005897
 800580c:	08005897 	.word	0x08005897
 8005810:	08005897 	.word	0x08005897
 8005814:	08005897 	.word	0x08005897
 8005818:	08005897 	.word	0x08005897
 800581c:	08005897 	.word	0x08005897
 8005820:	08005897 	.word	0x08005897
 8005824:	08005897 	.word	0x08005897
 8005828:	08005889 	.word	0x08005889
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d02e      	beq.n	800588e <UART_SetConfig+0x8aa>
 8005830:	e031      	b.n	8005896 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005832:	f7fd fe89 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8005836:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005838:	e033      	b.n	80058a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800583a:	f7fd fe9b 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 800583e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005840:	e02f      	b.n	80058a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fe06 	bl	8004458 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005850:	e027      	b.n	80058a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005852:	f107 0318 	add.w	r3, r7, #24
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe ff52 	bl	8004700 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005860:	e01f      	b.n	80058a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <UART_SetConfig+0x934>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800586e:	4b2a      	ldr	r3, [pc, #168]	; (8005918 <UART_SetConfig+0x934>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	08db      	lsrs	r3, r3, #3
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	4a24      	ldr	r2, [pc, #144]	; (800590c <UART_SetConfig+0x928>)
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005880:	e00f      	b.n	80058a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <UART_SetConfig+0x928>)
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005886:	e00c      	b.n	80058a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005888:	4b21      	ldr	r3, [pc, #132]	; (8005910 <UART_SetConfig+0x92c>)
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800588c:	e009      	b.n	80058a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005894:	e005      	b.n	80058a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80e7 	beq.w	8005a78 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	4a19      	ldr	r2, [pc, #100]	; (8005914 <UART_SetConfig+0x930>)
 80058b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80058bc:	005a      	lsls	r2, r3, #1
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	441a      	add	r2, r3
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	d916      	bls.n	8005904 <UART_SetConfig+0x920>
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d212      	bcs.n	8005904 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f023 030f 	bic.w	r3, r3, #15
 80058e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058f6:	4313      	orrs	r3, r2
 80058f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005900:	60da      	str	r2, [r3, #12]
 8005902:	e0b9      	b.n	8005a78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800590a:	e0b5      	b.n	8005a78 <UART_SetConfig+0xa94>
 800590c:	03d09000 	.word	0x03d09000
 8005910:	003d0900 	.word	0x003d0900
 8005914:	08009308 	.word	0x08009308
 8005918:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800591c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005920:	2b20      	cmp	r3, #32
 8005922:	dc49      	bgt.n	80059b8 <UART_SetConfig+0x9d4>
 8005924:	2b00      	cmp	r3, #0
 8005926:	db7c      	blt.n	8005a22 <UART_SetConfig+0xa3e>
 8005928:	2b20      	cmp	r3, #32
 800592a:	d87a      	bhi.n	8005a22 <UART_SetConfig+0xa3e>
 800592c:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <UART_SetConfig+0x950>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	080059bf 	.word	0x080059bf
 8005938:	080059c7 	.word	0x080059c7
 800593c:	08005a23 	.word	0x08005a23
 8005940:	08005a23 	.word	0x08005a23
 8005944:	080059cf 	.word	0x080059cf
 8005948:	08005a23 	.word	0x08005a23
 800594c:	08005a23 	.word	0x08005a23
 8005950:	08005a23 	.word	0x08005a23
 8005954:	080059df 	.word	0x080059df
 8005958:	08005a23 	.word	0x08005a23
 800595c:	08005a23 	.word	0x08005a23
 8005960:	08005a23 	.word	0x08005a23
 8005964:	08005a23 	.word	0x08005a23
 8005968:	08005a23 	.word	0x08005a23
 800596c:	08005a23 	.word	0x08005a23
 8005970:	08005a23 	.word	0x08005a23
 8005974:	080059ef 	.word	0x080059ef
 8005978:	08005a23 	.word	0x08005a23
 800597c:	08005a23 	.word	0x08005a23
 8005980:	08005a23 	.word	0x08005a23
 8005984:	08005a23 	.word	0x08005a23
 8005988:	08005a23 	.word	0x08005a23
 800598c:	08005a23 	.word	0x08005a23
 8005990:	08005a23 	.word	0x08005a23
 8005994:	08005a23 	.word	0x08005a23
 8005998:	08005a23 	.word	0x08005a23
 800599c:	08005a23 	.word	0x08005a23
 80059a0:	08005a23 	.word	0x08005a23
 80059a4:	08005a23 	.word	0x08005a23
 80059a8:	08005a23 	.word	0x08005a23
 80059ac:	08005a23 	.word	0x08005a23
 80059b0:	08005a23 	.word	0x08005a23
 80059b4:	08005a15 	.word	0x08005a15
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d02e      	beq.n	8005a1a <UART_SetConfig+0xa36>
 80059bc:	e031      	b.n	8005a22 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059be:	f7fd fdc3 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 80059c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059c4:	e033      	b.n	8005a2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c6:	f7fd fdd5 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 80059ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059cc:	e02f      	b.n	8005a2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fd40 	bl	8004458 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059dc:	e027      	b.n	8005a2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059de:	f107 0318 	add.w	r3, r7, #24
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fe8c 	bl	8004700 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059ec:	e01f      	b.n	8005a2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ee:	4b2d      	ldr	r3, [pc, #180]	; (8005aa4 <UART_SetConfig+0xac0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059fa:	4b2a      	ldr	r3, [pc, #168]	; (8005aa4 <UART_SetConfig+0xac0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	08db      	lsrs	r3, r3, #3
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	4a28      	ldr	r2, [pc, #160]	; (8005aa8 <UART_SetConfig+0xac4>)
 8005a06:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a0c:	e00f      	b.n	8005a2e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005a0e:	4b26      	ldr	r3, [pc, #152]	; (8005aa8 <UART_SetConfig+0xac4>)
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a12:	e00c      	b.n	8005a2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a14:	4b25      	ldr	r3, [pc, #148]	; (8005aac <UART_SetConfig+0xac8>)
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a18:	e009      	b.n	8005a2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a20:	e005      	b.n	8005a2e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a2c:	bf00      	nop
    }

    if (pclk != 0U)
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d021      	beq.n	8005a78 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <UART_SetConfig+0xacc>)
 8005a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a42:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	441a      	add	r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	2b0f      	cmp	r3, #15
 8005a5c:	d909      	bls.n	8005a72 <UART_SetConfig+0xa8e>
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a64:	d205      	bcs.n	8005a72 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	e002      	b.n	8005a78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005a94:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3748      	adds	r7, #72	; 0x48
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	03d09000 	.word	0x03d09000
 8005aac:	003d0900 	.word	0x003d0900
 8005ab0:	08009308 	.word	0x08009308

08005ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01a      	beq.n	8005bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb2:	d10a      	bne.n	8005bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	605a      	str	r2, [r3, #4]
  }
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c08:	f7fb fc5c 	bl	80014c4 <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d10e      	bne.n	8005c3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f82f 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e025      	b.n	8005c86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d10e      	bne.n	8005c66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f819 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e00f      	b.n	8005c86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b09c      	sub	sp, #112	; 0x70
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	603b      	str	r3, [r7, #0]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9e:	e0a9      	b.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	f000 80a5 	beq.w	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005caa:	f7fb fc0b 	bl	80014c4 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d302      	bcc.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d140      	bne.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ce0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e6      	bne.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	663b      	str	r3, [r7, #96]	; 0x60
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d12:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e5      	bne.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e069      	b.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d051      	beq.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5e:	d149      	bne.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e6      	bne.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	613b      	str	r3, [r7, #16]
   return(result);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3308      	adds	r3, #8
 8005dba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dbc:	623a      	str	r2, [r7, #32]
 8005dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	69f9      	ldr	r1, [r7, #28]
 8005dc2:	6a3a      	ldr	r2, [r7, #32]
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e010      	b.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69da      	ldr	r2, [r3, #28]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	f43f af46 	beq.w	8005ca0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3770      	adds	r7, #112	; 0x70
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e027      	b.n	8005e84 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	; 0x24
 8005e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e02d      	b.n	8005f04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f84f 	bl	8005f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e02d      	b.n	8005f80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2224      	movs	r2, #36	; 0x24
 8005f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f811 	bl	8005f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d108      	bne.n	8005faa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fa8:	e031      	b.n	800600e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005faa:	2310      	movs	r3, #16
 8005fac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fae:	2310      	movs	r3, #16
 8005fb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	0e5b      	lsrs	r3, r3, #25
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	0f5b      	lsrs	r3, r3, #29
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd2:	7bbb      	ldrb	r3, [r7, #14]
 8005fd4:	7b3a      	ldrb	r2, [r7, #12]
 8005fd6:	4911      	ldr	r1, [pc, #68]	; (800601c <UARTEx_SetNbDataToProcess+0x94>)
 8005fd8:	5c8a      	ldrb	r2, [r1, r2]
 8005fda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fde:	7b3a      	ldrb	r2, [r7, #12]
 8005fe0:	490f      	ldr	r1, [pc, #60]	; (8006020 <UARTEx_SetNbDataToProcess+0x98>)
 8005fe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	7b7a      	ldrb	r2, [r7, #13]
 8005ff4:	4909      	ldr	r1, [pc, #36]	; (800601c <UARTEx_SetNbDataToProcess+0x94>)
 8005ff6:	5c8a      	ldrb	r2, [r1, r2]
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ffc:	7b7a      	ldrb	r2, [r7, #13]
 8005ffe:	4908      	ldr	r1, [pc, #32]	; (8006020 <UARTEx_SetNbDataToProcess+0x98>)
 8006000:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006002:	fb93 f3f2 	sdiv	r3, r3, r2
 8006006:	b29a      	uxth	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	08009320 	.word	0x08009320
 8006020:	08009328 	.word	0x08009328

08006024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006024:	b084      	sub	sp, #16
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	f107 001c 	add.w	r0, r7, #28
 8006032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2b01      	cmp	r3, #1
 800603a:	d120      	bne.n	800607e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <USB_CoreInit+0xd4>)
 800604e:	4013      	ands	r3, r2
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d105      	bne.n	8006072 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 faac 	bl	80065d0 <USB_CoreReset>
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
 800607c:	e01a      	b.n	80060b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 faa0 	bl	80065d0 <USB_CoreReset>
 8006090:	4603      	mov	r3, r0
 8006092:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
 80060a6:	e005      	b.n	80060b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d116      	bne.n	80060e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060be:	b29a      	uxth	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060c8:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <USB_CoreInit+0xd8>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f043 0206 	orr.w	r2, r3, #6
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f043 0220 	orr.w	r2, r3, #32
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f4:	b004      	add	sp, #16
 80060f6:	4770      	bx	lr
 80060f8:	ffbdffbf 	.word	0xffbdffbf
 80060fc:	03ee0000 	.word	0x03ee0000

08006100 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f023 0201 	bic.w	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d115      	bne.n	8006170 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006150:	2001      	movs	r0, #1
 8006152:	f7fb f9c3 	bl	80014dc <HAL_Delay>
      ms++;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3301      	adds	r3, #1
 800615a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fa29 	bl	80065b4 <USB_GetMode>
 8006162:	4603      	mov	r3, r0
 8006164:	2b01      	cmp	r3, #1
 8006166:	d01e      	beq.n	80061a6 <USB_SetCurrentMode+0x84>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b31      	cmp	r3, #49	; 0x31
 800616c:	d9f0      	bls.n	8006150 <USB_SetCurrentMode+0x2e>
 800616e:	e01a      	b.n	80061a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d115      	bne.n	80061a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006182:	2001      	movs	r0, #1
 8006184:	f7fb f9aa 	bl	80014dc <HAL_Delay>
      ms++;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa10 	bl	80065b4 <USB_GetMode>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <USB_SetCurrentMode+0x84>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b31      	cmp	r3, #49	; 0x31
 800619e:	d9f0      	bls.n	8006182 <USB_SetCurrentMode+0x60>
 80061a0:	e001      	b.n	80061a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e005      	b.n	80061b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b32      	cmp	r3, #50	; 0x32
 80061aa:	d101      	bne.n	80061b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061bc:	b084      	sub	sp, #16
 80061be:	b580      	push	{r7, lr}
 80061c0:	b086      	sub	sp, #24
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	e009      	b.n	80061f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3340      	adds	r3, #64	; 0x40
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	2200      	movs	r2, #0
 80061e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	3301      	adds	r3, #1
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b0e      	cmp	r3, #14
 80061f4:	d9f2      	bls.n	80061dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d11c      	bne.n	8006236 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800620a:	f043 0302 	orr.w	r3, r3, #2
 800620e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e005      	b.n	8006242 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006248:	461a      	mov	r2, r3
 800624a:	2300      	movs	r3, #0
 800624c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006254:	4619      	mov	r1, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625c:	461a      	mov	r2, r3
 800625e:	680b      	ldr	r3, [r1, #0]
 8006260:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	2b01      	cmp	r3, #1
 8006266:	d10c      	bne.n	8006282 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800626e:	2100      	movs	r1, #0
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f965 	bl	8006540 <USB_SetDevSpeed>
 8006276:	e008      	b.n	800628a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006278:	2101      	movs	r1, #1
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f960 	bl	8006540 <USB_SetDevSpeed>
 8006280:	e003      	b.n	800628a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006282:	2103      	movs	r1, #3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f95b 	bl	8006540 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800628a:	2110      	movs	r1, #16
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f8f3 	bl	8006478 <USB_FlushTxFifo>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f91f 	bl	80064e0 <USB_FlushRxFifo>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b2:	461a      	mov	r2, r3
 80062b4:	2300      	movs	r3, #0
 80062b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062be:	461a      	mov	r2, r3
 80062c0:	2300      	movs	r3, #0
 80062c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	461a      	mov	r2, r3
 80062cc:	2300      	movs	r3, #0
 80062ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d0:	2300      	movs	r3, #0
 80062d2:	613b      	str	r3, [r7, #16]
 80062d4:	e043      	b.n	800635e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ec:	d118      	bne.n	8006320 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006300:	461a      	mov	r2, r3
 8006302:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	e013      	b.n	8006332 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006316:	461a      	mov	r2, r3
 8006318:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e008      	b.n	8006332 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632c:	461a      	mov	r2, r3
 800632e:	2300      	movs	r3, #0
 8006330:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633e:	461a      	mov	r2, r3
 8006340:	2300      	movs	r3, #0
 8006342:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	461a      	mov	r2, r3
 8006352:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006356:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	3301      	adds	r3, #1
 800635c:	613b      	str	r3, [r7, #16]
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	429a      	cmp	r2, r3
 8006364:	d3b7      	bcc.n	80062d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	e043      	b.n	80063f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006382:	d118      	bne.n	80063b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	461a      	mov	r2, r3
 8006398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	e013      	b.n	80063c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ac:	461a      	mov	r2, r3
 80063ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	e008      	b.n	80063c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c2:	461a      	mov	r2, r3
 80063c4:	2300      	movs	r3, #0
 80063c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	461a      	mov	r2, r3
 80063d6:	2300      	movs	r3, #0
 80063d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e6:	461a      	mov	r2, r3
 80063e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	3301      	adds	r3, #1
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d3b7      	bcc.n	800636c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800640a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800640e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800641c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f043 0210 	orr.w	r2, r3, #16
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <USB_DevInit+0x2b4>)
 8006436:	4313      	orrs	r3, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800643c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f043 0208 	orr.w	r2, r3, #8
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800644e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006450:	2b01      	cmp	r3, #1
 8006452:	d105      	bne.n	8006460 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699a      	ldr	r2, [r3, #24]
 8006458:	4b06      	ldr	r3, [pc, #24]	; (8006474 <USB_DevInit+0x2b8>)
 800645a:	4313      	orrs	r3, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800646c:	b004      	add	sp, #16
 800646e:	4770      	bx	lr
 8006470:	803c3800 	.word	0x803c3800
 8006474:	40000004 	.word	0x40000004

08006478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4a13      	ldr	r2, [pc, #76]	; (80064dc <USB_FlushTxFifo+0x64>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d901      	bls.n	8006498 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e01b      	b.n	80064d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	daf2      	bge.n	8006486 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	019b      	lsls	r3, r3, #6
 80064a8:	f043 0220 	orr.w	r2, r3, #32
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a08      	ldr	r2, [pc, #32]	; (80064dc <USB_FlushTxFifo+0x64>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d901      	bls.n	80064c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e006      	b.n	80064d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	d0f0      	beq.n	80064b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	00030d40 	.word	0x00030d40

080064e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4a11      	ldr	r2, [pc, #68]	; (800653c <USB_FlushRxFifo+0x5c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d901      	bls.n	80064fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e018      	b.n	8006530 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	daf2      	bge.n	80064ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2210      	movs	r2, #16
 800650e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3301      	adds	r3, #1
 8006514:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a08      	ldr	r2, [pc, #32]	; (800653c <USB_FlushRxFifo+0x5c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d901      	bls.n	8006522 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e006      	b.n	8006530 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b10      	cmp	r3, #16
 800652c:	d0f0      	beq.n	8006510 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	00030d40 	.word	0x00030d40

08006540 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	68f9      	ldr	r1, [r7, #12]
 800655c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006560:	4313      	orrs	r3, r2
 8006562:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800658c:	f023 0303 	bic.w	r3, r3, #3
 8006590:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065a0:	f043 0302 	orr.w	r3, r3, #2
 80065a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f003 0301 	and.w	r3, r3, #1
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3301      	adds	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a13      	ldr	r2, [pc, #76]	; (8006634 <USB_CoreReset+0x64>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d901      	bls.n	80065ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e01b      	b.n	8006626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	daf2      	bge.n	80065dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f043 0201 	orr.w	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3301      	adds	r3, #1
 800660a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4a09      	ldr	r2, [pc, #36]	; (8006634 <USB_CoreReset+0x64>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d901      	bls.n	8006618 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e006      	b.n	8006626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	d0f0      	beq.n	8006606 <USB_CoreReset+0x36>

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	00030d40 	.word	0x00030d40

08006638 <arm_dot_prod_f32>:
 8006638:	b4f0      	push	{r4, r5, r6, r7}
 800663a:	0897      	lsrs	r7, r2, #2
 800663c:	d052      	beq.n	80066e4 <arm_dot_prod_f32+0xac>
 800663e:	f100 0510 	add.w	r5, r0, #16
 8006642:	f101 0410 	add.w	r4, r1, #16
 8006646:	463e      	mov	r6, r7
 8006648:	eddf 7a28 	vldr	s15, [pc, #160]	; 80066ec <arm_dot_prod_f32+0xb4>
 800664c:	ed14 7a04 	vldr	s14, [r4, #-16]
 8006650:	3e01      	subs	r6, #1
 8006652:	ed15 6a04 	vldr	s12, [r5, #-16]
 8006656:	f104 0410 	add.w	r4, r4, #16
 800665a:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 800665e:	f105 0510 	add.w	r5, r5, #16
 8006662:	ee26 6a07 	vmul.f32	s12, s12, s14
 8006666:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 800666a:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 800666e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006672:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 8006676:	ee36 6a27 	vadd.f32	s12, s12, s15
 800667a:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800667e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006682:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 8006686:	ee76 6a86 	vadd.f32	s13, s13, s12
 800668a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800668e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006696:	d1d9      	bne.n	800664c <arm_dot_prod_f32+0x14>
 8006698:	013f      	lsls	r7, r7, #4
 800669a:	4438      	add	r0, r7
 800669c:	4439      	add	r1, r7
 800669e:	f012 0203 	ands.w	r2, r2, #3
 80066a2:	d01b      	beq.n	80066dc <arm_dot_prod_f32+0xa4>
 80066a4:	ed91 7a00 	vldr	s14, [r1]
 80066a8:	3a01      	subs	r2, #1
 80066aa:	edd0 6a00 	vldr	s13, [r0]
 80066ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 80066b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066b6:	d011      	beq.n	80066dc <arm_dot_prod_f32+0xa4>
 80066b8:	ed91 7a01 	vldr	s14, [r1, #4]
 80066bc:	2a01      	cmp	r2, #1
 80066be:	edd0 6a01 	vldr	s13, [r0, #4]
 80066c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80066c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066ca:	d007      	beq.n	80066dc <arm_dot_prod_f32+0xa4>
 80066cc:	ed90 7a02 	vldr	s14, [r0, #8]
 80066d0:	edd1 6a02 	vldr	s13, [r1, #8]
 80066d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80066d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066dc:	edc3 7a00 	vstr	s15, [r3]
 80066e0:	bcf0      	pop	{r4, r5, r6, r7}
 80066e2:	4770      	bx	lr
 80066e4:	eddf 7a01 	vldr	s15, [pc, #4]	; 80066ec <arm_dot_prod_f32+0xb4>
 80066e8:	e7d9      	b.n	800669e <arm_dot_prod_f32+0x66>
 80066ea:	bf00      	nop
 80066ec:	00000000 	.word	0x00000000

080066f0 <__errno>:
 80066f0:	4b01      	ldr	r3, [pc, #4]	; (80066f8 <__errno+0x8>)
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	24000010 	.word	0x24000010

080066fc <__libc_init_array>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4d0d      	ldr	r5, [pc, #52]	; (8006734 <__libc_init_array+0x38>)
 8006700:	4c0d      	ldr	r4, [pc, #52]	; (8006738 <__libc_init_array+0x3c>)
 8006702:	1b64      	subs	r4, r4, r5
 8006704:	10a4      	asrs	r4, r4, #2
 8006706:	2600      	movs	r6, #0
 8006708:	42a6      	cmp	r6, r4
 800670a:	d109      	bne.n	8006720 <__libc_init_array+0x24>
 800670c:	4d0b      	ldr	r5, [pc, #44]	; (800673c <__libc_init_array+0x40>)
 800670e:	4c0c      	ldr	r4, [pc, #48]	; (8006740 <__libc_init_array+0x44>)
 8006710:	f002 fdbe 	bl	8009290 <_init>
 8006714:	1b64      	subs	r4, r4, r5
 8006716:	10a4      	asrs	r4, r4, #2
 8006718:	2600      	movs	r6, #0
 800671a:	42a6      	cmp	r6, r4
 800671c:	d105      	bne.n	800672a <__libc_init_array+0x2e>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f855 3b04 	ldr.w	r3, [r5], #4
 8006724:	4798      	blx	r3
 8006726:	3601      	adds	r6, #1
 8006728:	e7ee      	b.n	8006708 <__libc_init_array+0xc>
 800672a:	f855 3b04 	ldr.w	r3, [r5], #4
 800672e:	4798      	blx	r3
 8006730:	3601      	adds	r6, #1
 8006732:	e7f2      	b.n	800671a <__libc_init_array+0x1e>
 8006734:	08009770 	.word	0x08009770
 8006738:	08009770 	.word	0x08009770
 800673c:	08009770 	.word	0x08009770
 8006740:	08009774 	.word	0x08009774

08006744 <memset>:
 8006744:	4402      	add	r2, r0
 8006746:	4603      	mov	r3, r0
 8006748:	4293      	cmp	r3, r2
 800674a:	d100      	bne.n	800674e <memset+0xa>
 800674c:	4770      	bx	lr
 800674e:	f803 1b01 	strb.w	r1, [r3], #1
 8006752:	e7f9      	b.n	8006748 <memset+0x4>

08006754 <__cvt>:
 8006754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006756:	ed2d 8b02 	vpush	{d8}
 800675a:	eeb0 8b40 	vmov.f64	d8, d0
 800675e:	b085      	sub	sp, #20
 8006760:	4617      	mov	r7, r2
 8006762:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006764:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006766:	ee18 2a90 	vmov	r2, s17
 800676a:	f025 0520 	bic.w	r5, r5, #32
 800676e:	2a00      	cmp	r2, #0
 8006770:	bfb6      	itet	lt
 8006772:	222d      	movlt	r2, #45	; 0x2d
 8006774:	2200      	movge	r2, #0
 8006776:	eeb1 8b40 	vneglt.f64	d8, d0
 800677a:	2d46      	cmp	r5, #70	; 0x46
 800677c:	460c      	mov	r4, r1
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	d004      	beq.n	800678c <__cvt+0x38>
 8006782:	2d45      	cmp	r5, #69	; 0x45
 8006784:	d100      	bne.n	8006788 <__cvt+0x34>
 8006786:	3401      	adds	r4, #1
 8006788:	2102      	movs	r1, #2
 800678a:	e000      	b.n	800678e <__cvt+0x3a>
 800678c:	2103      	movs	r1, #3
 800678e:	ab03      	add	r3, sp, #12
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	ab02      	add	r3, sp, #8
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	4622      	mov	r2, r4
 8006798:	4633      	mov	r3, r6
 800679a:	eeb0 0b48 	vmov.f64	d0, d8
 800679e:	f000 fe9b 	bl	80074d8 <_dtoa_r>
 80067a2:	2d47      	cmp	r5, #71	; 0x47
 80067a4:	d101      	bne.n	80067aa <__cvt+0x56>
 80067a6:	07fb      	lsls	r3, r7, #31
 80067a8:	d51a      	bpl.n	80067e0 <__cvt+0x8c>
 80067aa:	2d46      	cmp	r5, #70	; 0x46
 80067ac:	eb00 0204 	add.w	r2, r0, r4
 80067b0:	d10c      	bne.n	80067cc <__cvt+0x78>
 80067b2:	7803      	ldrb	r3, [r0, #0]
 80067b4:	2b30      	cmp	r3, #48	; 0x30
 80067b6:	d107      	bne.n	80067c8 <__cvt+0x74>
 80067b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80067bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c0:	bf1c      	itt	ne
 80067c2:	f1c4 0401 	rsbne	r4, r4, #1
 80067c6:	6034      	strne	r4, [r6, #0]
 80067c8:	6833      	ldr	r3, [r6, #0]
 80067ca:	441a      	add	r2, r3
 80067cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80067d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d4:	bf08      	it	eq
 80067d6:	9203      	streq	r2, [sp, #12]
 80067d8:	2130      	movs	r1, #48	; 0x30
 80067da:	9b03      	ldr	r3, [sp, #12]
 80067dc:	4293      	cmp	r3, r2
 80067de:	d307      	bcc.n	80067f0 <__cvt+0x9c>
 80067e0:	9b03      	ldr	r3, [sp, #12]
 80067e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067e4:	1a1b      	subs	r3, r3, r0
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	b005      	add	sp, #20
 80067ea:	ecbd 8b02 	vpop	{d8}
 80067ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f0:	1c5c      	adds	r4, r3, #1
 80067f2:	9403      	str	r4, [sp, #12]
 80067f4:	7019      	strb	r1, [r3, #0]
 80067f6:	e7f0      	b.n	80067da <__cvt+0x86>

080067f8 <__exponent>:
 80067f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067fa:	4603      	mov	r3, r0
 80067fc:	2900      	cmp	r1, #0
 80067fe:	bfb8      	it	lt
 8006800:	4249      	neglt	r1, r1
 8006802:	f803 2b02 	strb.w	r2, [r3], #2
 8006806:	bfb4      	ite	lt
 8006808:	222d      	movlt	r2, #45	; 0x2d
 800680a:	222b      	movge	r2, #43	; 0x2b
 800680c:	2909      	cmp	r1, #9
 800680e:	7042      	strb	r2, [r0, #1]
 8006810:	dd2a      	ble.n	8006868 <__exponent+0x70>
 8006812:	f10d 0407 	add.w	r4, sp, #7
 8006816:	46a4      	mov	ip, r4
 8006818:	270a      	movs	r7, #10
 800681a:	46a6      	mov	lr, r4
 800681c:	460a      	mov	r2, r1
 800681e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006822:	fb07 1516 	mls	r5, r7, r6, r1
 8006826:	3530      	adds	r5, #48	; 0x30
 8006828:	2a63      	cmp	r2, #99	; 0x63
 800682a:	f104 34ff 	add.w	r4, r4, #4294967295
 800682e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006832:	4631      	mov	r1, r6
 8006834:	dcf1      	bgt.n	800681a <__exponent+0x22>
 8006836:	3130      	adds	r1, #48	; 0x30
 8006838:	f1ae 0502 	sub.w	r5, lr, #2
 800683c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006840:	1c44      	adds	r4, r0, #1
 8006842:	4629      	mov	r1, r5
 8006844:	4561      	cmp	r1, ip
 8006846:	d30a      	bcc.n	800685e <__exponent+0x66>
 8006848:	f10d 0209 	add.w	r2, sp, #9
 800684c:	eba2 020e 	sub.w	r2, r2, lr
 8006850:	4565      	cmp	r5, ip
 8006852:	bf88      	it	hi
 8006854:	2200      	movhi	r2, #0
 8006856:	4413      	add	r3, r2
 8006858:	1a18      	subs	r0, r3, r0
 800685a:	b003      	add	sp, #12
 800685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006862:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006866:	e7ed      	b.n	8006844 <__exponent+0x4c>
 8006868:	2330      	movs	r3, #48	; 0x30
 800686a:	3130      	adds	r1, #48	; 0x30
 800686c:	7083      	strb	r3, [r0, #2]
 800686e:	70c1      	strb	r1, [r0, #3]
 8006870:	1d03      	adds	r3, r0, #4
 8006872:	e7f1      	b.n	8006858 <__exponent+0x60>
 8006874:	0000      	movs	r0, r0
	...

08006878 <_printf_float>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	b08b      	sub	sp, #44	; 0x2c
 800687e:	460c      	mov	r4, r1
 8006880:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006884:	4616      	mov	r6, r2
 8006886:	461f      	mov	r7, r3
 8006888:	4605      	mov	r5, r0
 800688a:	f001 fd6f 	bl	800836c <_localeconv_r>
 800688e:	f8d0 b000 	ldr.w	fp, [r0]
 8006892:	4658      	mov	r0, fp
 8006894:	f7f9 fd24 	bl	80002e0 <strlen>
 8006898:	2300      	movs	r3, #0
 800689a:	9308      	str	r3, [sp, #32]
 800689c:	f8d8 3000 	ldr.w	r3, [r8]
 80068a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80068a4:	6822      	ldr	r2, [r4, #0]
 80068a6:	3307      	adds	r3, #7
 80068a8:	f023 0307 	bic.w	r3, r3, #7
 80068ac:	f103 0108 	add.w	r1, r3, #8
 80068b0:	f8c8 1000 	str.w	r1, [r8]
 80068b4:	4682      	mov	sl, r0
 80068b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80068be:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006b20 <_printf_float+0x2a8>
 80068c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80068c6:	eeb0 6bc0 	vabs.f64	d6, d0
 80068ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80068ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d2:	dd24      	ble.n	800691e <_printf_float+0xa6>
 80068d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80068d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068dc:	d502      	bpl.n	80068e4 <_printf_float+0x6c>
 80068de:	232d      	movs	r3, #45	; 0x2d
 80068e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e4:	4b90      	ldr	r3, [pc, #576]	; (8006b28 <_printf_float+0x2b0>)
 80068e6:	4891      	ldr	r0, [pc, #580]	; (8006b2c <_printf_float+0x2b4>)
 80068e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80068ec:	bf94      	ite	ls
 80068ee:	4698      	movls	r8, r3
 80068f0:	4680      	movhi	r8, r0
 80068f2:	2303      	movs	r3, #3
 80068f4:	6123      	str	r3, [r4, #16]
 80068f6:	f022 0204 	bic.w	r2, r2, #4
 80068fa:	2300      	movs	r3, #0
 80068fc:	6022      	str	r2, [r4, #0]
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	9700      	str	r7, [sp, #0]
 8006902:	4633      	mov	r3, r6
 8006904:	aa09      	add	r2, sp, #36	; 0x24
 8006906:	4621      	mov	r1, r4
 8006908:	4628      	mov	r0, r5
 800690a:	f000 f9d3 	bl	8006cb4 <_printf_common>
 800690e:	3001      	adds	r0, #1
 8006910:	f040 808a 	bne.w	8006a28 <_printf_float+0x1b0>
 8006914:	f04f 30ff 	mov.w	r0, #4294967295
 8006918:	b00b      	add	sp, #44	; 0x2c
 800691a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006926:	d709      	bvc.n	800693c <_printf_float+0xc4>
 8006928:	ee10 3a90 	vmov	r3, s1
 800692c:	2b00      	cmp	r3, #0
 800692e:	bfbc      	itt	lt
 8006930:	232d      	movlt	r3, #45	; 0x2d
 8006932:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006936:	487e      	ldr	r0, [pc, #504]	; (8006b30 <_printf_float+0x2b8>)
 8006938:	4b7e      	ldr	r3, [pc, #504]	; (8006b34 <_printf_float+0x2bc>)
 800693a:	e7d5      	b.n	80068e8 <_printf_float+0x70>
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006942:	9104      	str	r1, [sp, #16]
 8006944:	1c59      	adds	r1, r3, #1
 8006946:	d13c      	bne.n	80069c2 <_printf_float+0x14a>
 8006948:	2306      	movs	r3, #6
 800694a:	6063      	str	r3, [r4, #4]
 800694c:	2300      	movs	r3, #0
 800694e:	9303      	str	r3, [sp, #12]
 8006950:	ab08      	add	r3, sp, #32
 8006952:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006956:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800695a:	ab07      	add	r3, sp, #28
 800695c:	6861      	ldr	r1, [r4, #4]
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	6022      	str	r2, [r4, #0]
 8006962:	f10d 031b 	add.w	r3, sp, #27
 8006966:	4628      	mov	r0, r5
 8006968:	f7ff fef4 	bl	8006754 <__cvt>
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	9907      	ldr	r1, [sp, #28]
 8006970:	2b47      	cmp	r3, #71	; 0x47
 8006972:	4680      	mov	r8, r0
 8006974:	d108      	bne.n	8006988 <_printf_float+0x110>
 8006976:	1cc8      	adds	r0, r1, #3
 8006978:	db02      	blt.n	8006980 <_printf_float+0x108>
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	4299      	cmp	r1, r3
 800697e:	dd41      	ble.n	8006a04 <_printf_float+0x18c>
 8006980:	f1a9 0902 	sub.w	r9, r9, #2
 8006984:	fa5f f989 	uxtb.w	r9, r9
 8006988:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800698c:	d820      	bhi.n	80069d0 <_printf_float+0x158>
 800698e:	3901      	subs	r1, #1
 8006990:	464a      	mov	r2, r9
 8006992:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006996:	9107      	str	r1, [sp, #28]
 8006998:	f7ff ff2e 	bl	80067f8 <__exponent>
 800699c:	9a08      	ldr	r2, [sp, #32]
 800699e:	9004      	str	r0, [sp, #16]
 80069a0:	1813      	adds	r3, r2, r0
 80069a2:	2a01      	cmp	r2, #1
 80069a4:	6123      	str	r3, [r4, #16]
 80069a6:	dc02      	bgt.n	80069ae <_printf_float+0x136>
 80069a8:	6822      	ldr	r2, [r4, #0]
 80069aa:	07d2      	lsls	r2, r2, #31
 80069ac:	d501      	bpl.n	80069b2 <_printf_float+0x13a>
 80069ae:	3301      	adds	r3, #1
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0a2      	beq.n	8006900 <_printf_float+0x88>
 80069ba:	232d      	movs	r3, #45	; 0x2d
 80069bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c0:	e79e      	b.n	8006900 <_printf_float+0x88>
 80069c2:	9904      	ldr	r1, [sp, #16]
 80069c4:	2947      	cmp	r1, #71	; 0x47
 80069c6:	d1c1      	bne.n	800694c <_printf_float+0xd4>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1bf      	bne.n	800694c <_printf_float+0xd4>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e7bc      	b.n	800694a <_printf_float+0xd2>
 80069d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80069d4:	d118      	bne.n	8006a08 <_printf_float+0x190>
 80069d6:	2900      	cmp	r1, #0
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	dd0b      	ble.n	80069f4 <_printf_float+0x17c>
 80069dc:	6121      	str	r1, [r4, #16]
 80069de:	b913      	cbnz	r3, 80069e6 <_printf_float+0x16e>
 80069e0:	6822      	ldr	r2, [r4, #0]
 80069e2:	07d0      	lsls	r0, r2, #31
 80069e4:	d502      	bpl.n	80069ec <_printf_float+0x174>
 80069e6:	3301      	adds	r3, #1
 80069e8:	440b      	add	r3, r1
 80069ea:	6123      	str	r3, [r4, #16]
 80069ec:	2300      	movs	r3, #0
 80069ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	e7de      	b.n	80069b2 <_printf_float+0x13a>
 80069f4:	b913      	cbnz	r3, 80069fc <_printf_float+0x184>
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	07d2      	lsls	r2, r2, #31
 80069fa:	d501      	bpl.n	8006a00 <_printf_float+0x188>
 80069fc:	3302      	adds	r3, #2
 80069fe:	e7f4      	b.n	80069ea <_printf_float+0x172>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e7f2      	b.n	80069ea <_printf_float+0x172>
 8006a04:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006a08:	9b08      	ldr	r3, [sp, #32]
 8006a0a:	4299      	cmp	r1, r3
 8006a0c:	db05      	blt.n	8006a1a <_printf_float+0x1a2>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	6121      	str	r1, [r4, #16]
 8006a12:	07d8      	lsls	r0, r3, #31
 8006a14:	d5ea      	bpl.n	80069ec <_printf_float+0x174>
 8006a16:	1c4b      	adds	r3, r1, #1
 8006a18:	e7e7      	b.n	80069ea <_printf_float+0x172>
 8006a1a:	2900      	cmp	r1, #0
 8006a1c:	bfd4      	ite	le
 8006a1e:	f1c1 0202 	rsble	r2, r1, #2
 8006a22:	2201      	movgt	r2, #1
 8006a24:	4413      	add	r3, r2
 8006a26:	e7e0      	b.n	80069ea <_printf_float+0x172>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	055a      	lsls	r2, r3, #21
 8006a2c:	d407      	bmi.n	8006a3e <_printf_float+0x1c6>
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	4642      	mov	r2, r8
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d12a      	bne.n	8006a92 <_printf_float+0x21a>
 8006a3c:	e76a      	b.n	8006914 <_printf_float+0x9c>
 8006a3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a42:	f240 80e2 	bls.w	8006c0a <_printf_float+0x392>
 8006a46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a52:	d133      	bne.n	8006abc <_printf_float+0x244>
 8006a54:	4a38      	ldr	r2, [pc, #224]	; (8006b38 <_printf_float+0x2c0>)
 8006a56:	2301      	movs	r3, #1
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	47b8      	blx	r7
 8006a5e:	3001      	adds	r0, #1
 8006a60:	f43f af58 	beq.w	8006914 <_printf_float+0x9c>
 8006a64:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	db02      	blt.n	8006a72 <_printf_float+0x1fa>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	07d8      	lsls	r0, r3, #31
 8006a70:	d50f      	bpl.n	8006a92 <_printf_float+0x21a>
 8006a72:	4653      	mov	r3, sl
 8006a74:	465a      	mov	r2, fp
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	f43f af49 	beq.w	8006914 <_printf_float+0x9c>
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	f104 091a 	add.w	r9, r4, #26
 8006a8a:	9b08      	ldr	r3, [sp, #32]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	4543      	cmp	r3, r8
 8006a90:	dc09      	bgt.n	8006aa6 <_printf_float+0x22e>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	079b      	lsls	r3, r3, #30
 8006a96:	f100 8108 	bmi.w	8006caa <_printf_float+0x432>
 8006a9a:	68e0      	ldr	r0, [r4, #12]
 8006a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9e:	4298      	cmp	r0, r3
 8006aa0:	bfb8      	it	lt
 8006aa2:	4618      	movlt	r0, r3
 8006aa4:	e738      	b.n	8006918 <_printf_float+0xa0>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	464a      	mov	r2, r9
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f43f af2f 	beq.w	8006914 <_printf_float+0x9c>
 8006ab6:	f108 0801 	add.w	r8, r8, #1
 8006aba:	e7e6      	b.n	8006a8a <_printf_float+0x212>
 8006abc:	9b07      	ldr	r3, [sp, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	dc3c      	bgt.n	8006b3c <_printf_float+0x2c4>
 8006ac2:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <_printf_float+0x2c0>)
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	f43f af21 	beq.w	8006914 <_printf_float+0x9c>
 8006ad2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	d102      	bne.n	8006ae0 <_printf_float+0x268>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	07d9      	lsls	r1, r3, #31
 8006ade:	d5d8      	bpl.n	8006a92 <_printf_float+0x21a>
 8006ae0:	4653      	mov	r3, sl
 8006ae2:	465a      	mov	r2, fp
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	47b8      	blx	r7
 8006aea:	3001      	adds	r0, #1
 8006aec:	f43f af12 	beq.w	8006914 <_printf_float+0x9c>
 8006af0:	f04f 0900 	mov.w	r9, #0
 8006af4:	f104 0a1a 	add.w	sl, r4, #26
 8006af8:	9b07      	ldr	r3, [sp, #28]
 8006afa:	425b      	negs	r3, r3
 8006afc:	454b      	cmp	r3, r9
 8006afe:	dc01      	bgt.n	8006b04 <_printf_float+0x28c>
 8006b00:	9b08      	ldr	r3, [sp, #32]
 8006b02:	e795      	b.n	8006a30 <_printf_float+0x1b8>
 8006b04:	2301      	movs	r3, #1
 8006b06:	4652      	mov	r2, sl
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f43f af00 	beq.w	8006914 <_printf_float+0x9c>
 8006b14:	f109 0901 	add.w	r9, r9, #1
 8006b18:	e7ee      	b.n	8006af8 <_printf_float+0x280>
 8006b1a:	bf00      	nop
 8006b1c:	f3af 8000 	nop.w
 8006b20:	ffffffff 	.word	0xffffffff
 8006b24:	7fefffff 	.word	0x7fefffff
 8006b28:	08009334 	.word	0x08009334
 8006b2c:	08009338 	.word	0x08009338
 8006b30:	08009340 	.word	0x08009340
 8006b34:	0800933c 	.word	0x0800933c
 8006b38:	08009344 	.word	0x08009344
 8006b3c:	9a08      	ldr	r2, [sp, #32]
 8006b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b40:	429a      	cmp	r2, r3
 8006b42:	bfa8      	it	ge
 8006b44:	461a      	movge	r2, r3
 8006b46:	2a00      	cmp	r2, #0
 8006b48:	4691      	mov	r9, r2
 8006b4a:	dc38      	bgt.n	8006bbe <_printf_float+0x346>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9305      	str	r3, [sp, #20]
 8006b50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b54:	f104 021a 	add.w	r2, r4, #26
 8006b58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b5a:	9905      	ldr	r1, [sp, #20]
 8006b5c:	9304      	str	r3, [sp, #16]
 8006b5e:	eba3 0309 	sub.w	r3, r3, r9
 8006b62:	428b      	cmp	r3, r1
 8006b64:	dc33      	bgt.n	8006bce <_printf_float+0x356>
 8006b66:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	db3c      	blt.n	8006be8 <_printf_float+0x370>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	07da      	lsls	r2, r3, #31
 8006b72:	d439      	bmi.n	8006be8 <_printf_float+0x370>
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	9a04      	ldr	r2, [sp, #16]
 8006b78:	9907      	ldr	r1, [sp, #28]
 8006b7a:	1a9a      	subs	r2, r3, r2
 8006b7c:	eba3 0901 	sub.w	r9, r3, r1
 8006b80:	4591      	cmp	r9, r2
 8006b82:	bfa8      	it	ge
 8006b84:	4691      	movge	r9, r2
 8006b86:	f1b9 0f00 	cmp.w	r9, #0
 8006b8a:	dc35      	bgt.n	8006bf8 <_printf_float+0x380>
 8006b8c:	f04f 0800 	mov.w	r8, #0
 8006b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b94:	f104 0a1a 	add.w	sl, r4, #26
 8006b98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	eba3 0309 	sub.w	r3, r3, r9
 8006ba2:	4543      	cmp	r3, r8
 8006ba4:	f77f af75 	ble.w	8006a92 <_printf_float+0x21a>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	4652      	mov	r2, sl
 8006bac:	4631      	mov	r1, r6
 8006bae:	4628      	mov	r0, r5
 8006bb0:	47b8      	blx	r7
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f43f aeae 	beq.w	8006914 <_printf_float+0x9c>
 8006bb8:	f108 0801 	add.w	r8, r8, #1
 8006bbc:	e7ec      	b.n	8006b98 <_printf_float+0x320>
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4642      	mov	r2, r8
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	47b8      	blx	r7
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d1bf      	bne.n	8006b4c <_printf_float+0x2d4>
 8006bcc:	e6a2      	b.n	8006914 <_printf_float+0x9c>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	9204      	str	r2, [sp, #16]
 8006bd6:	47b8      	blx	r7
 8006bd8:	3001      	adds	r0, #1
 8006bda:	f43f ae9b 	beq.w	8006914 <_printf_float+0x9c>
 8006bde:	9b05      	ldr	r3, [sp, #20]
 8006be0:	9a04      	ldr	r2, [sp, #16]
 8006be2:	3301      	adds	r3, #1
 8006be4:	9305      	str	r3, [sp, #20]
 8006be6:	e7b7      	b.n	8006b58 <_printf_float+0x2e0>
 8006be8:	4653      	mov	r3, sl
 8006bea:	465a      	mov	r2, fp
 8006bec:	4631      	mov	r1, r6
 8006bee:	4628      	mov	r0, r5
 8006bf0:	47b8      	blx	r7
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d1be      	bne.n	8006b74 <_printf_float+0x2fc>
 8006bf6:	e68d      	b.n	8006914 <_printf_float+0x9c>
 8006bf8:	9a04      	ldr	r2, [sp, #16]
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	4442      	add	r2, r8
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	d1c1      	bne.n	8006b8c <_printf_float+0x314>
 8006c08:	e684      	b.n	8006914 <_printf_float+0x9c>
 8006c0a:	9a08      	ldr	r2, [sp, #32]
 8006c0c:	2a01      	cmp	r2, #1
 8006c0e:	dc01      	bgt.n	8006c14 <_printf_float+0x39c>
 8006c10:	07db      	lsls	r3, r3, #31
 8006c12:	d537      	bpl.n	8006c84 <_printf_float+0x40c>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4642      	mov	r2, r8
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f43f ae78 	beq.w	8006914 <_printf_float+0x9c>
 8006c24:	4653      	mov	r3, sl
 8006c26:	465a      	mov	r2, fp
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b8      	blx	r7
 8006c2e:	3001      	adds	r0, #1
 8006c30:	f43f ae70 	beq.w	8006914 <_printf_float+0x9c>
 8006c34:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006c38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c40:	d01b      	beq.n	8006c7a <_printf_float+0x402>
 8006c42:	9b08      	ldr	r3, [sp, #32]
 8006c44:	f108 0201 	add.w	r2, r8, #1
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	d10e      	bne.n	8006c72 <_printf_float+0x3fa>
 8006c54:	e65e      	b.n	8006914 <_printf_float+0x9c>
 8006c56:	2301      	movs	r3, #1
 8006c58:	464a      	mov	r2, r9
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	f43f ae57 	beq.w	8006914 <_printf_float+0x9c>
 8006c66:	f108 0801 	add.w	r8, r8, #1
 8006c6a:	9b08      	ldr	r3, [sp, #32]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	4543      	cmp	r3, r8
 8006c70:	dcf1      	bgt.n	8006c56 <_printf_float+0x3de>
 8006c72:	9b04      	ldr	r3, [sp, #16]
 8006c74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c78:	e6db      	b.n	8006a32 <_printf_float+0x1ba>
 8006c7a:	f04f 0800 	mov.w	r8, #0
 8006c7e:	f104 091a 	add.w	r9, r4, #26
 8006c82:	e7f2      	b.n	8006c6a <_printf_float+0x3f2>
 8006c84:	2301      	movs	r3, #1
 8006c86:	4642      	mov	r2, r8
 8006c88:	e7df      	b.n	8006c4a <_printf_float+0x3d2>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	464a      	mov	r2, r9
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b8      	blx	r7
 8006c94:	3001      	adds	r0, #1
 8006c96:	f43f ae3d 	beq.w	8006914 <_printf_float+0x9c>
 8006c9a:	f108 0801 	add.w	r8, r8, #1
 8006c9e:	68e3      	ldr	r3, [r4, #12]
 8006ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ca2:	1a5b      	subs	r3, r3, r1
 8006ca4:	4543      	cmp	r3, r8
 8006ca6:	dcf0      	bgt.n	8006c8a <_printf_float+0x412>
 8006ca8:	e6f7      	b.n	8006a9a <_printf_float+0x222>
 8006caa:	f04f 0800 	mov.w	r8, #0
 8006cae:	f104 0919 	add.w	r9, r4, #25
 8006cb2:	e7f4      	b.n	8006c9e <_printf_float+0x426>

08006cb4 <_printf_common>:
 8006cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb8:	4616      	mov	r6, r2
 8006cba:	4699      	mov	r9, r3
 8006cbc:	688a      	ldr	r2, [r1, #8]
 8006cbe:	690b      	ldr	r3, [r1, #16]
 8006cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	bfb8      	it	lt
 8006cc8:	4613      	movlt	r3, r2
 8006cca:	6033      	str	r3, [r6, #0]
 8006ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	b10a      	cbz	r2, 8006cda <_printf_common+0x26>
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	0699      	lsls	r1, r3, #26
 8006cde:	bf42      	ittt	mi
 8006ce0:	6833      	ldrmi	r3, [r6, #0]
 8006ce2:	3302      	addmi	r3, #2
 8006ce4:	6033      	strmi	r3, [r6, #0]
 8006ce6:	6825      	ldr	r5, [r4, #0]
 8006ce8:	f015 0506 	ands.w	r5, r5, #6
 8006cec:	d106      	bne.n	8006cfc <_printf_common+0x48>
 8006cee:	f104 0a19 	add.w	sl, r4, #25
 8006cf2:	68e3      	ldr	r3, [r4, #12]
 8006cf4:	6832      	ldr	r2, [r6, #0]
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	42ab      	cmp	r3, r5
 8006cfa:	dc26      	bgt.n	8006d4a <_printf_common+0x96>
 8006cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d00:	1e13      	subs	r3, r2, #0
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	bf18      	it	ne
 8006d06:	2301      	movne	r3, #1
 8006d08:	0692      	lsls	r2, r2, #26
 8006d0a:	d42b      	bmi.n	8006d64 <_printf_common+0xb0>
 8006d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d10:	4649      	mov	r1, r9
 8006d12:	4638      	mov	r0, r7
 8006d14:	47c0      	blx	r8
 8006d16:	3001      	adds	r0, #1
 8006d18:	d01e      	beq.n	8006d58 <_printf_common+0xa4>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	68e5      	ldr	r5, [r4, #12]
 8006d1e:	6832      	ldr	r2, [r6, #0]
 8006d20:	f003 0306 	and.w	r3, r3, #6
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	bf08      	it	eq
 8006d28:	1aad      	subeq	r5, r5, r2
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	bf0c      	ite	eq
 8006d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d34:	2500      	movne	r5, #0
 8006d36:	4293      	cmp	r3, r2
 8006d38:	bfc4      	itt	gt
 8006d3a:	1a9b      	subgt	r3, r3, r2
 8006d3c:	18ed      	addgt	r5, r5, r3
 8006d3e:	2600      	movs	r6, #0
 8006d40:	341a      	adds	r4, #26
 8006d42:	42b5      	cmp	r5, r6
 8006d44:	d11a      	bne.n	8006d7c <_printf_common+0xc8>
 8006d46:	2000      	movs	r0, #0
 8006d48:	e008      	b.n	8006d5c <_printf_common+0xa8>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4652      	mov	r2, sl
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4638      	mov	r0, r7
 8006d52:	47c0      	blx	r8
 8006d54:	3001      	adds	r0, #1
 8006d56:	d103      	bne.n	8006d60 <_printf_common+0xac>
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d60:	3501      	adds	r5, #1
 8006d62:	e7c6      	b.n	8006cf2 <_printf_common+0x3e>
 8006d64:	18e1      	adds	r1, r4, r3
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	2030      	movs	r0, #48	; 0x30
 8006d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d6e:	4422      	add	r2, r4
 8006d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d78:	3302      	adds	r3, #2
 8006d7a:	e7c7      	b.n	8006d0c <_printf_common+0x58>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	4622      	mov	r2, r4
 8006d80:	4649      	mov	r1, r9
 8006d82:	4638      	mov	r0, r7
 8006d84:	47c0      	blx	r8
 8006d86:	3001      	adds	r0, #1
 8006d88:	d0e6      	beq.n	8006d58 <_printf_common+0xa4>
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	e7d9      	b.n	8006d42 <_printf_common+0x8e>
	...

08006d90 <_printf_i>:
 8006d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	7e0f      	ldrb	r7, [r1, #24]
 8006d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d98:	2f78      	cmp	r7, #120	; 0x78
 8006d9a:	4691      	mov	r9, r2
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	460c      	mov	r4, r1
 8006da0:	469a      	mov	sl, r3
 8006da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006da6:	d807      	bhi.n	8006db8 <_printf_i+0x28>
 8006da8:	2f62      	cmp	r7, #98	; 0x62
 8006daa:	d80a      	bhi.n	8006dc2 <_printf_i+0x32>
 8006dac:	2f00      	cmp	r7, #0
 8006dae:	f000 80d8 	beq.w	8006f62 <_printf_i+0x1d2>
 8006db2:	2f58      	cmp	r7, #88	; 0x58
 8006db4:	f000 80a3 	beq.w	8006efe <_printf_i+0x16e>
 8006db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dc0:	e03a      	b.n	8006e38 <_printf_i+0xa8>
 8006dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dc6:	2b15      	cmp	r3, #21
 8006dc8:	d8f6      	bhi.n	8006db8 <_printf_i+0x28>
 8006dca:	a101      	add	r1, pc, #4	; (adr r1, 8006dd0 <_printf_i+0x40>)
 8006dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dd0:	08006e29 	.word	0x08006e29
 8006dd4:	08006e3d 	.word	0x08006e3d
 8006dd8:	08006db9 	.word	0x08006db9
 8006ddc:	08006db9 	.word	0x08006db9
 8006de0:	08006db9 	.word	0x08006db9
 8006de4:	08006db9 	.word	0x08006db9
 8006de8:	08006e3d 	.word	0x08006e3d
 8006dec:	08006db9 	.word	0x08006db9
 8006df0:	08006db9 	.word	0x08006db9
 8006df4:	08006db9 	.word	0x08006db9
 8006df8:	08006db9 	.word	0x08006db9
 8006dfc:	08006f49 	.word	0x08006f49
 8006e00:	08006e6d 	.word	0x08006e6d
 8006e04:	08006f2b 	.word	0x08006f2b
 8006e08:	08006db9 	.word	0x08006db9
 8006e0c:	08006db9 	.word	0x08006db9
 8006e10:	08006f6b 	.word	0x08006f6b
 8006e14:	08006db9 	.word	0x08006db9
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006db9 	.word	0x08006db9
 8006e20:	08006db9 	.word	0x08006db9
 8006e24:	08006f33 	.word	0x08006f33
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	1d1a      	adds	r2, r3, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	602a      	str	r2, [r5, #0]
 8006e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0a3      	b.n	8006f84 <_printf_i+0x1f4>
 8006e3c:	6820      	ldr	r0, [r4, #0]
 8006e3e:	6829      	ldr	r1, [r5, #0]
 8006e40:	0606      	lsls	r6, r0, #24
 8006e42:	f101 0304 	add.w	r3, r1, #4
 8006e46:	d50a      	bpl.n	8006e5e <_printf_i+0xce>
 8006e48:	680e      	ldr	r6, [r1, #0]
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	2e00      	cmp	r6, #0
 8006e4e:	da03      	bge.n	8006e58 <_printf_i+0xc8>
 8006e50:	232d      	movs	r3, #45	; 0x2d
 8006e52:	4276      	negs	r6, r6
 8006e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e58:	485e      	ldr	r0, [pc, #376]	; (8006fd4 <_printf_i+0x244>)
 8006e5a:	230a      	movs	r3, #10
 8006e5c:	e019      	b.n	8006e92 <_printf_i+0x102>
 8006e5e:	680e      	ldr	r6, [r1, #0]
 8006e60:	602b      	str	r3, [r5, #0]
 8006e62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e66:	bf18      	it	ne
 8006e68:	b236      	sxthne	r6, r6
 8006e6a:	e7ef      	b.n	8006e4c <_printf_i+0xbc>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	6820      	ldr	r0, [r4, #0]
 8006e70:	1d19      	adds	r1, r3, #4
 8006e72:	6029      	str	r1, [r5, #0]
 8006e74:	0601      	lsls	r1, r0, #24
 8006e76:	d501      	bpl.n	8006e7c <_printf_i+0xec>
 8006e78:	681e      	ldr	r6, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <_printf_i+0xf2>
 8006e7c:	0646      	lsls	r6, r0, #25
 8006e7e:	d5fb      	bpl.n	8006e78 <_printf_i+0xe8>
 8006e80:	881e      	ldrh	r6, [r3, #0]
 8006e82:	4854      	ldr	r0, [pc, #336]	; (8006fd4 <_printf_i+0x244>)
 8006e84:	2f6f      	cmp	r7, #111	; 0x6f
 8006e86:	bf0c      	ite	eq
 8006e88:	2308      	moveq	r3, #8
 8006e8a:	230a      	movne	r3, #10
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e92:	6865      	ldr	r5, [r4, #4]
 8006e94:	60a5      	str	r5, [r4, #8]
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	bfa2      	ittt	ge
 8006e9a:	6821      	ldrge	r1, [r4, #0]
 8006e9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ea0:	6021      	strge	r1, [r4, #0]
 8006ea2:	b90e      	cbnz	r6, 8006ea8 <_printf_i+0x118>
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	d04d      	beq.n	8006f44 <_printf_i+0x1b4>
 8006ea8:	4615      	mov	r5, r2
 8006eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eae:	fb03 6711 	mls	r7, r3, r1, r6
 8006eb2:	5dc7      	ldrb	r7, [r0, r7]
 8006eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006eb8:	4637      	mov	r7, r6
 8006eba:	42bb      	cmp	r3, r7
 8006ebc:	460e      	mov	r6, r1
 8006ebe:	d9f4      	bls.n	8006eaa <_printf_i+0x11a>
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d10b      	bne.n	8006edc <_printf_i+0x14c>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07de      	lsls	r6, r3, #31
 8006ec8:	d508      	bpl.n	8006edc <_printf_i+0x14c>
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	bfde      	ittt	le
 8006ed2:	2330      	movle	r3, #48	; 0x30
 8006ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006edc:	1b52      	subs	r2, r2, r5
 8006ede:	6122      	str	r2, [r4, #16]
 8006ee0:	f8cd a000 	str.w	sl, [sp]
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	aa03      	add	r2, sp, #12
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7ff fee2 	bl	8006cb4 <_printf_common>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d14c      	bne.n	8006f8e <_printf_i+0x1fe>
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	b004      	add	sp, #16
 8006efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efe:	4835      	ldr	r0, [pc, #212]	; (8006fd4 <_printf_i+0x244>)
 8006f00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f04:	6829      	ldr	r1, [r5, #0]
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f0c:	6029      	str	r1, [r5, #0]
 8006f0e:	061d      	lsls	r5, r3, #24
 8006f10:	d514      	bpl.n	8006f3c <_printf_i+0x1ac>
 8006f12:	07df      	lsls	r7, r3, #31
 8006f14:	bf44      	itt	mi
 8006f16:	f043 0320 	orrmi.w	r3, r3, #32
 8006f1a:	6023      	strmi	r3, [r4, #0]
 8006f1c:	b91e      	cbnz	r6, 8006f26 <_printf_i+0x196>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	f023 0320 	bic.w	r3, r3, #32
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	2310      	movs	r3, #16
 8006f28:	e7b0      	b.n	8006e8c <_printf_i+0xfc>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	f043 0320 	orr.w	r3, r3, #32
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	2378      	movs	r3, #120	; 0x78
 8006f34:	4828      	ldr	r0, [pc, #160]	; (8006fd8 <_printf_i+0x248>)
 8006f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f3a:	e7e3      	b.n	8006f04 <_printf_i+0x174>
 8006f3c:	0659      	lsls	r1, r3, #25
 8006f3e:	bf48      	it	mi
 8006f40:	b2b6      	uxthmi	r6, r6
 8006f42:	e7e6      	b.n	8006f12 <_printf_i+0x182>
 8006f44:	4615      	mov	r5, r2
 8006f46:	e7bb      	b.n	8006ec0 <_printf_i+0x130>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	6826      	ldr	r6, [r4, #0]
 8006f4c:	6961      	ldr	r1, [r4, #20]
 8006f4e:	1d18      	adds	r0, r3, #4
 8006f50:	6028      	str	r0, [r5, #0]
 8006f52:	0635      	lsls	r5, r6, #24
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	d501      	bpl.n	8006f5c <_printf_i+0x1cc>
 8006f58:	6019      	str	r1, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <_printf_i+0x1d2>
 8006f5c:	0670      	lsls	r0, r6, #25
 8006f5e:	d5fb      	bpl.n	8006f58 <_printf_i+0x1c8>
 8006f60:	8019      	strh	r1, [r3, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	4615      	mov	r5, r2
 8006f68:	e7ba      	b.n	8006ee0 <_printf_i+0x150>
 8006f6a:	682b      	ldr	r3, [r5, #0]
 8006f6c:	1d1a      	adds	r2, r3, #4
 8006f6e:	602a      	str	r2, [r5, #0]
 8006f70:	681d      	ldr	r5, [r3, #0]
 8006f72:	6862      	ldr	r2, [r4, #4]
 8006f74:	2100      	movs	r1, #0
 8006f76:	4628      	mov	r0, r5
 8006f78:	f7f9 f9ba 	bl	80002f0 <memchr>
 8006f7c:	b108      	cbz	r0, 8006f82 <_printf_i+0x1f2>
 8006f7e:	1b40      	subs	r0, r0, r5
 8006f80:	6060      	str	r0, [r4, #4]
 8006f82:	6863      	ldr	r3, [r4, #4]
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	2300      	movs	r3, #0
 8006f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8c:	e7a8      	b.n	8006ee0 <_printf_i+0x150>
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	462a      	mov	r2, r5
 8006f92:	4649      	mov	r1, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	47d0      	blx	sl
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d0ab      	beq.n	8006ef4 <_printf_i+0x164>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	079b      	lsls	r3, r3, #30
 8006fa0:	d413      	bmi.n	8006fca <_printf_i+0x23a>
 8006fa2:	68e0      	ldr	r0, [r4, #12]
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	4298      	cmp	r0, r3
 8006fa8:	bfb8      	it	lt
 8006faa:	4618      	movlt	r0, r3
 8006fac:	e7a4      	b.n	8006ef8 <_printf_i+0x168>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4632      	mov	r2, r6
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	47d0      	blx	sl
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d09b      	beq.n	8006ef4 <_printf_i+0x164>
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	9903      	ldr	r1, [sp, #12]
 8006fc2:	1a5b      	subs	r3, r3, r1
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dcf2      	bgt.n	8006fae <_printf_i+0x21e>
 8006fc8:	e7eb      	b.n	8006fa2 <_printf_i+0x212>
 8006fca:	2500      	movs	r5, #0
 8006fcc:	f104 0619 	add.w	r6, r4, #25
 8006fd0:	e7f5      	b.n	8006fbe <_printf_i+0x22e>
 8006fd2:	bf00      	nop
 8006fd4:	08009346 	.word	0x08009346
 8006fd8:	08009357 	.word	0x08009357

08006fdc <iprintf>:
 8006fdc:	b40f      	push	{r0, r1, r2, r3}
 8006fde:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <iprintf+0x2c>)
 8006fe0:	b513      	push	{r0, r1, r4, lr}
 8006fe2:	681c      	ldr	r4, [r3, #0]
 8006fe4:	b124      	cbz	r4, 8006ff0 <iprintf+0x14>
 8006fe6:	69a3      	ldr	r3, [r4, #24]
 8006fe8:	b913      	cbnz	r3, 8006ff0 <iprintf+0x14>
 8006fea:	4620      	mov	r0, r4
 8006fec:	f001 f8fc 	bl	80081e8 <__sinit>
 8006ff0:	ab05      	add	r3, sp, #20
 8006ff2:	9a04      	ldr	r2, [sp, #16]
 8006ff4:	68a1      	ldr	r1, [r4, #8]
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f001 fedd 	bl	8008db8 <_vfiprintf_r>
 8006ffe:	b002      	add	sp, #8
 8007000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007004:	b004      	add	sp, #16
 8007006:	4770      	bx	lr
 8007008:	24000010 	.word	0x24000010

0800700c <_puts_r>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	460e      	mov	r6, r1
 8007010:	4605      	mov	r5, r0
 8007012:	b118      	cbz	r0, 800701c <_puts_r+0x10>
 8007014:	6983      	ldr	r3, [r0, #24]
 8007016:	b90b      	cbnz	r3, 800701c <_puts_r+0x10>
 8007018:	f001 f8e6 	bl	80081e8 <__sinit>
 800701c:	69ab      	ldr	r3, [r5, #24]
 800701e:	68ac      	ldr	r4, [r5, #8]
 8007020:	b913      	cbnz	r3, 8007028 <_puts_r+0x1c>
 8007022:	4628      	mov	r0, r5
 8007024:	f001 f8e0 	bl	80081e8 <__sinit>
 8007028:	4b2c      	ldr	r3, [pc, #176]	; (80070dc <_puts_r+0xd0>)
 800702a:	429c      	cmp	r4, r3
 800702c:	d120      	bne.n	8007070 <_puts_r+0x64>
 800702e:	686c      	ldr	r4, [r5, #4]
 8007030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007032:	07db      	lsls	r3, r3, #31
 8007034:	d405      	bmi.n	8007042 <_puts_r+0x36>
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	0598      	lsls	r0, r3, #22
 800703a:	d402      	bmi.n	8007042 <_puts_r+0x36>
 800703c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800703e:	f001 f99a 	bl	8008376 <__retarget_lock_acquire_recursive>
 8007042:	89a3      	ldrh	r3, [r4, #12]
 8007044:	0719      	lsls	r1, r3, #28
 8007046:	d51d      	bpl.n	8007084 <_puts_r+0x78>
 8007048:	6923      	ldr	r3, [r4, #16]
 800704a:	b1db      	cbz	r3, 8007084 <_puts_r+0x78>
 800704c:	3e01      	subs	r6, #1
 800704e:	68a3      	ldr	r3, [r4, #8]
 8007050:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007054:	3b01      	subs	r3, #1
 8007056:	60a3      	str	r3, [r4, #8]
 8007058:	bb39      	cbnz	r1, 80070aa <_puts_r+0x9e>
 800705a:	2b00      	cmp	r3, #0
 800705c:	da38      	bge.n	80070d0 <_puts_r+0xc4>
 800705e:	4622      	mov	r2, r4
 8007060:	210a      	movs	r1, #10
 8007062:	4628      	mov	r0, r5
 8007064:	f000 f8ce 	bl	8007204 <__swbuf_r>
 8007068:	3001      	adds	r0, #1
 800706a:	d011      	beq.n	8007090 <_puts_r+0x84>
 800706c:	250a      	movs	r5, #10
 800706e:	e011      	b.n	8007094 <_puts_r+0x88>
 8007070:	4b1b      	ldr	r3, [pc, #108]	; (80070e0 <_puts_r+0xd4>)
 8007072:	429c      	cmp	r4, r3
 8007074:	d101      	bne.n	800707a <_puts_r+0x6e>
 8007076:	68ac      	ldr	r4, [r5, #8]
 8007078:	e7da      	b.n	8007030 <_puts_r+0x24>
 800707a:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <_puts_r+0xd8>)
 800707c:	429c      	cmp	r4, r3
 800707e:	bf08      	it	eq
 8007080:	68ec      	ldreq	r4, [r5, #12]
 8007082:	e7d5      	b.n	8007030 <_puts_r+0x24>
 8007084:	4621      	mov	r1, r4
 8007086:	4628      	mov	r0, r5
 8007088:	f000 f90e 	bl	80072a8 <__swsetup_r>
 800708c:	2800      	cmp	r0, #0
 800708e:	d0dd      	beq.n	800704c <_puts_r+0x40>
 8007090:	f04f 35ff 	mov.w	r5, #4294967295
 8007094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007096:	07da      	lsls	r2, r3, #31
 8007098:	d405      	bmi.n	80070a6 <_puts_r+0x9a>
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	059b      	lsls	r3, r3, #22
 800709e:	d402      	bmi.n	80070a6 <_puts_r+0x9a>
 80070a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070a2:	f001 f969 	bl	8008378 <__retarget_lock_release_recursive>
 80070a6:	4628      	mov	r0, r5
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da04      	bge.n	80070b8 <_puts_r+0xac>
 80070ae:	69a2      	ldr	r2, [r4, #24]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	dc06      	bgt.n	80070c2 <_puts_r+0xb6>
 80070b4:	290a      	cmp	r1, #10
 80070b6:	d004      	beq.n	80070c2 <_puts_r+0xb6>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	6022      	str	r2, [r4, #0]
 80070be:	7019      	strb	r1, [r3, #0]
 80070c0:	e7c5      	b.n	800704e <_puts_r+0x42>
 80070c2:	4622      	mov	r2, r4
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 f89d 	bl	8007204 <__swbuf_r>
 80070ca:	3001      	adds	r0, #1
 80070cc:	d1bf      	bne.n	800704e <_puts_r+0x42>
 80070ce:	e7df      	b.n	8007090 <_puts_r+0x84>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	250a      	movs	r5, #10
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	6022      	str	r2, [r4, #0]
 80070d8:	701d      	strb	r5, [r3, #0]
 80070da:	e7db      	b.n	8007094 <_puts_r+0x88>
 80070dc:	080094b0 	.word	0x080094b0
 80070e0:	080094d0 	.word	0x080094d0
 80070e4:	08009490 	.word	0x08009490

080070e8 <puts>:
 80070e8:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <puts+0xc>)
 80070ea:	4601      	mov	r1, r0
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	f7ff bf8d 	b.w	800700c <_puts_r>
 80070f2:	bf00      	nop
 80070f4:	24000010 	.word	0x24000010

080070f8 <srand>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <srand+0x44>)
 80070fc:	681d      	ldr	r5, [r3, #0]
 80070fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007100:	4604      	mov	r4, r0
 8007102:	b9b3      	cbnz	r3, 8007132 <srand+0x3a>
 8007104:	2018      	movs	r0, #24
 8007106:	f001 f99d 	bl	8008444 <malloc>
 800710a:	4602      	mov	r2, r0
 800710c:	63a8      	str	r0, [r5, #56]	; 0x38
 800710e:	b920      	cbnz	r0, 800711a <srand+0x22>
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <srand+0x48>)
 8007112:	480c      	ldr	r0, [pc, #48]	; (8007144 <srand+0x4c>)
 8007114:	2142      	movs	r1, #66	; 0x42
 8007116:	f000 f935 	bl	8007384 <__assert_func>
 800711a:	490b      	ldr	r1, [pc, #44]	; (8007148 <srand+0x50>)
 800711c:	4b0b      	ldr	r3, [pc, #44]	; (800714c <srand+0x54>)
 800711e:	e9c0 1300 	strd	r1, r3, [r0]
 8007122:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <srand+0x58>)
 8007124:	6083      	str	r3, [r0, #8]
 8007126:	230b      	movs	r3, #11
 8007128:	8183      	strh	r3, [r0, #12]
 800712a:	2100      	movs	r1, #0
 800712c:	2001      	movs	r0, #1
 800712e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007132:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007134:	2200      	movs	r2, #0
 8007136:	611c      	str	r4, [r3, #16]
 8007138:	615a      	str	r2, [r3, #20]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	24000010 	.word	0x24000010
 8007140:	08009368 	.word	0x08009368
 8007144:	0800937f 	.word	0x0800937f
 8007148:	abcd330e 	.word	0xabcd330e
 800714c:	e66d1234 	.word	0xe66d1234
 8007150:	0005deec 	.word	0x0005deec

08007154 <rand>:
 8007154:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <rand+0x5c>)
 8007156:	b510      	push	{r4, lr}
 8007158:	681c      	ldr	r4, [r3, #0]
 800715a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800715c:	b9b3      	cbnz	r3, 800718c <rand+0x38>
 800715e:	2018      	movs	r0, #24
 8007160:	f001 f970 	bl	8008444 <malloc>
 8007164:	63a0      	str	r0, [r4, #56]	; 0x38
 8007166:	b928      	cbnz	r0, 8007174 <rand+0x20>
 8007168:	4602      	mov	r2, r0
 800716a:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <rand+0x60>)
 800716c:	4812      	ldr	r0, [pc, #72]	; (80071b8 <rand+0x64>)
 800716e:	214e      	movs	r1, #78	; 0x4e
 8007170:	f000 f908 	bl	8007384 <__assert_func>
 8007174:	4a11      	ldr	r2, [pc, #68]	; (80071bc <rand+0x68>)
 8007176:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <rand+0x6c>)
 8007178:	e9c0 2300 	strd	r2, r3, [r0]
 800717c:	4b11      	ldr	r3, [pc, #68]	; (80071c4 <rand+0x70>)
 800717e:	6083      	str	r3, [r0, #8]
 8007180:	230b      	movs	r3, #11
 8007182:	8183      	strh	r3, [r0, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	2300      	movs	r3, #0
 8007188:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800718c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800718e:	4a0e      	ldr	r2, [pc, #56]	; (80071c8 <rand+0x74>)
 8007190:	6920      	ldr	r0, [r4, #16]
 8007192:	6963      	ldr	r3, [r4, #20]
 8007194:	490d      	ldr	r1, [pc, #52]	; (80071cc <rand+0x78>)
 8007196:	4342      	muls	r2, r0
 8007198:	fb01 2203 	mla	r2, r1, r3, r2
 800719c:	fba0 0101 	umull	r0, r1, r0, r1
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	eb42 0001 	adc.w	r0, r2, r1
 80071a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80071aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80071ae:	bd10      	pop	{r4, pc}
 80071b0:	24000010 	.word	0x24000010
 80071b4:	08009368 	.word	0x08009368
 80071b8:	0800937f 	.word	0x0800937f
 80071bc:	abcd330e 	.word	0xabcd330e
 80071c0:	e66d1234 	.word	0xe66d1234
 80071c4:	0005deec 	.word	0x0005deec
 80071c8:	5851f42d 	.word	0x5851f42d
 80071cc:	4c957f2d 	.word	0x4c957f2d

080071d0 <time>:
 80071d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071d2:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <time+0x30>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	4669      	mov	r1, sp
 80071d8:	4604      	mov	r4, r0
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	f001 f8b4 	bl	8008348 <_gettimeofday_r>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	bfbe      	ittt	lt
 80071e4:	f04f 32ff 	movlt.w	r2, #4294967295
 80071e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80071ec:	e9cd 2300 	strdlt	r2, r3, [sp]
 80071f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071f4:	b10c      	cbz	r4, 80071fa <time+0x2a>
 80071f6:	e9c4 0100 	strd	r0, r1, [r4]
 80071fa:	b004      	add	sp, #16
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	bf00      	nop
 8007200:	24000010 	.word	0x24000010

08007204 <__swbuf_r>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	460e      	mov	r6, r1
 8007208:	4614      	mov	r4, r2
 800720a:	4605      	mov	r5, r0
 800720c:	b118      	cbz	r0, 8007216 <__swbuf_r+0x12>
 800720e:	6983      	ldr	r3, [r0, #24]
 8007210:	b90b      	cbnz	r3, 8007216 <__swbuf_r+0x12>
 8007212:	f000 ffe9 	bl	80081e8 <__sinit>
 8007216:	4b21      	ldr	r3, [pc, #132]	; (800729c <__swbuf_r+0x98>)
 8007218:	429c      	cmp	r4, r3
 800721a:	d12b      	bne.n	8007274 <__swbuf_r+0x70>
 800721c:	686c      	ldr	r4, [r5, #4]
 800721e:	69a3      	ldr	r3, [r4, #24]
 8007220:	60a3      	str	r3, [r4, #8]
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	071a      	lsls	r2, r3, #28
 8007226:	d52f      	bpl.n	8007288 <__swbuf_r+0x84>
 8007228:	6923      	ldr	r3, [r4, #16]
 800722a:	b36b      	cbz	r3, 8007288 <__swbuf_r+0x84>
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	6820      	ldr	r0, [r4, #0]
 8007230:	1ac0      	subs	r0, r0, r3
 8007232:	6963      	ldr	r3, [r4, #20]
 8007234:	b2f6      	uxtb	r6, r6
 8007236:	4283      	cmp	r3, r0
 8007238:	4637      	mov	r7, r6
 800723a:	dc04      	bgt.n	8007246 <__swbuf_r+0x42>
 800723c:	4621      	mov	r1, r4
 800723e:	4628      	mov	r0, r5
 8007240:	f000 ff3e 	bl	80080c0 <_fflush_r>
 8007244:	bb30      	cbnz	r0, 8007294 <__swbuf_r+0x90>
 8007246:	68a3      	ldr	r3, [r4, #8]
 8007248:	3b01      	subs	r3, #1
 800724a:	60a3      	str	r3, [r4, #8]
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	6022      	str	r2, [r4, #0]
 8007252:	701e      	strb	r6, [r3, #0]
 8007254:	6963      	ldr	r3, [r4, #20]
 8007256:	3001      	adds	r0, #1
 8007258:	4283      	cmp	r3, r0
 800725a:	d004      	beq.n	8007266 <__swbuf_r+0x62>
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	07db      	lsls	r3, r3, #31
 8007260:	d506      	bpl.n	8007270 <__swbuf_r+0x6c>
 8007262:	2e0a      	cmp	r6, #10
 8007264:	d104      	bne.n	8007270 <__swbuf_r+0x6c>
 8007266:	4621      	mov	r1, r4
 8007268:	4628      	mov	r0, r5
 800726a:	f000 ff29 	bl	80080c0 <_fflush_r>
 800726e:	b988      	cbnz	r0, 8007294 <__swbuf_r+0x90>
 8007270:	4638      	mov	r0, r7
 8007272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <__swbuf_r+0x9c>)
 8007276:	429c      	cmp	r4, r3
 8007278:	d101      	bne.n	800727e <__swbuf_r+0x7a>
 800727a:	68ac      	ldr	r4, [r5, #8]
 800727c:	e7cf      	b.n	800721e <__swbuf_r+0x1a>
 800727e:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <__swbuf_r+0xa0>)
 8007280:	429c      	cmp	r4, r3
 8007282:	bf08      	it	eq
 8007284:	68ec      	ldreq	r4, [r5, #12]
 8007286:	e7ca      	b.n	800721e <__swbuf_r+0x1a>
 8007288:	4621      	mov	r1, r4
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f80c 	bl	80072a8 <__swsetup_r>
 8007290:	2800      	cmp	r0, #0
 8007292:	d0cb      	beq.n	800722c <__swbuf_r+0x28>
 8007294:	f04f 37ff 	mov.w	r7, #4294967295
 8007298:	e7ea      	b.n	8007270 <__swbuf_r+0x6c>
 800729a:	bf00      	nop
 800729c:	080094b0 	.word	0x080094b0
 80072a0:	080094d0 	.word	0x080094d0
 80072a4:	08009490 	.word	0x08009490

080072a8 <__swsetup_r>:
 80072a8:	4b32      	ldr	r3, [pc, #200]	; (8007374 <__swsetup_r+0xcc>)
 80072aa:	b570      	push	{r4, r5, r6, lr}
 80072ac:	681d      	ldr	r5, [r3, #0]
 80072ae:	4606      	mov	r6, r0
 80072b0:	460c      	mov	r4, r1
 80072b2:	b125      	cbz	r5, 80072be <__swsetup_r+0x16>
 80072b4:	69ab      	ldr	r3, [r5, #24]
 80072b6:	b913      	cbnz	r3, 80072be <__swsetup_r+0x16>
 80072b8:	4628      	mov	r0, r5
 80072ba:	f000 ff95 	bl	80081e8 <__sinit>
 80072be:	4b2e      	ldr	r3, [pc, #184]	; (8007378 <__swsetup_r+0xd0>)
 80072c0:	429c      	cmp	r4, r3
 80072c2:	d10f      	bne.n	80072e4 <__swsetup_r+0x3c>
 80072c4:	686c      	ldr	r4, [r5, #4]
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072cc:	0719      	lsls	r1, r3, #28
 80072ce:	d42c      	bmi.n	800732a <__swsetup_r+0x82>
 80072d0:	06dd      	lsls	r5, r3, #27
 80072d2:	d411      	bmi.n	80072f8 <__swsetup_r+0x50>
 80072d4:	2309      	movs	r3, #9
 80072d6:	6033      	str	r3, [r6, #0]
 80072d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072dc:	81a3      	strh	r3, [r4, #12]
 80072de:	f04f 30ff 	mov.w	r0, #4294967295
 80072e2:	e03e      	b.n	8007362 <__swsetup_r+0xba>
 80072e4:	4b25      	ldr	r3, [pc, #148]	; (800737c <__swsetup_r+0xd4>)
 80072e6:	429c      	cmp	r4, r3
 80072e8:	d101      	bne.n	80072ee <__swsetup_r+0x46>
 80072ea:	68ac      	ldr	r4, [r5, #8]
 80072ec:	e7eb      	b.n	80072c6 <__swsetup_r+0x1e>
 80072ee:	4b24      	ldr	r3, [pc, #144]	; (8007380 <__swsetup_r+0xd8>)
 80072f0:	429c      	cmp	r4, r3
 80072f2:	bf08      	it	eq
 80072f4:	68ec      	ldreq	r4, [r5, #12]
 80072f6:	e7e6      	b.n	80072c6 <__swsetup_r+0x1e>
 80072f8:	0758      	lsls	r0, r3, #29
 80072fa:	d512      	bpl.n	8007322 <__swsetup_r+0x7a>
 80072fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072fe:	b141      	cbz	r1, 8007312 <__swsetup_r+0x6a>
 8007300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007304:	4299      	cmp	r1, r3
 8007306:	d002      	beq.n	800730e <__swsetup_r+0x66>
 8007308:	4630      	mov	r0, r6
 800730a:	f001 fc4b 	bl	8008ba4 <_free_r>
 800730e:	2300      	movs	r3, #0
 8007310:	6363      	str	r3, [r4, #52]	; 0x34
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007318:	81a3      	strh	r3, [r4, #12]
 800731a:	2300      	movs	r3, #0
 800731c:	6063      	str	r3, [r4, #4]
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f043 0308 	orr.w	r3, r3, #8
 8007328:	81a3      	strh	r3, [r4, #12]
 800732a:	6923      	ldr	r3, [r4, #16]
 800732c:	b94b      	cbnz	r3, 8007342 <__swsetup_r+0x9a>
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007338:	d003      	beq.n	8007342 <__swsetup_r+0x9a>
 800733a:	4621      	mov	r1, r4
 800733c:	4630      	mov	r0, r6
 800733e:	f001 f841 	bl	80083c4 <__smakebuf_r>
 8007342:	89a0      	ldrh	r0, [r4, #12]
 8007344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007348:	f010 0301 	ands.w	r3, r0, #1
 800734c:	d00a      	beq.n	8007364 <__swsetup_r+0xbc>
 800734e:	2300      	movs	r3, #0
 8007350:	60a3      	str	r3, [r4, #8]
 8007352:	6963      	ldr	r3, [r4, #20]
 8007354:	425b      	negs	r3, r3
 8007356:	61a3      	str	r3, [r4, #24]
 8007358:	6923      	ldr	r3, [r4, #16]
 800735a:	b943      	cbnz	r3, 800736e <__swsetup_r+0xc6>
 800735c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007360:	d1ba      	bne.n	80072d8 <__swsetup_r+0x30>
 8007362:	bd70      	pop	{r4, r5, r6, pc}
 8007364:	0781      	lsls	r1, r0, #30
 8007366:	bf58      	it	pl
 8007368:	6963      	ldrpl	r3, [r4, #20]
 800736a:	60a3      	str	r3, [r4, #8]
 800736c:	e7f4      	b.n	8007358 <__swsetup_r+0xb0>
 800736e:	2000      	movs	r0, #0
 8007370:	e7f7      	b.n	8007362 <__swsetup_r+0xba>
 8007372:	bf00      	nop
 8007374:	24000010 	.word	0x24000010
 8007378:	080094b0 	.word	0x080094b0
 800737c:	080094d0 	.word	0x080094d0
 8007380:	08009490 	.word	0x08009490

08007384 <__assert_func>:
 8007384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007386:	4614      	mov	r4, r2
 8007388:	461a      	mov	r2, r3
 800738a:	4b09      	ldr	r3, [pc, #36]	; (80073b0 <__assert_func+0x2c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4605      	mov	r5, r0
 8007390:	68d8      	ldr	r0, [r3, #12]
 8007392:	b14c      	cbz	r4, 80073a8 <__assert_func+0x24>
 8007394:	4b07      	ldr	r3, [pc, #28]	; (80073b4 <__assert_func+0x30>)
 8007396:	9100      	str	r1, [sp, #0]
 8007398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800739c:	4906      	ldr	r1, [pc, #24]	; (80073b8 <__assert_func+0x34>)
 800739e:	462b      	mov	r3, r5
 80073a0:	f000 ffa0 	bl	80082e4 <fiprintf>
 80073a4:	f001 fe9e 	bl	80090e4 <abort>
 80073a8:	4b04      	ldr	r3, [pc, #16]	; (80073bc <__assert_func+0x38>)
 80073aa:	461c      	mov	r4, r3
 80073ac:	e7f3      	b.n	8007396 <__assert_func+0x12>
 80073ae:	bf00      	nop
 80073b0:	24000010 	.word	0x24000010
 80073b4:	080093da 	.word	0x080093da
 80073b8:	080093e7 	.word	0x080093e7
 80073bc:	08009415 	.word	0x08009415

080073c0 <quorem>:
 80073c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	6903      	ldr	r3, [r0, #16]
 80073c6:	690c      	ldr	r4, [r1, #16]
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	4607      	mov	r7, r0
 80073cc:	f2c0 8081 	blt.w	80074d2 <quorem+0x112>
 80073d0:	3c01      	subs	r4, #1
 80073d2:	f101 0814 	add.w	r8, r1, #20
 80073d6:	f100 0514 	add.w	r5, r0, #20
 80073da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073e8:	3301      	adds	r3, #1
 80073ea:	429a      	cmp	r2, r3
 80073ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80073f8:	d331      	bcc.n	800745e <quorem+0x9e>
 80073fa:	f04f 0e00 	mov.w	lr, #0
 80073fe:	4640      	mov	r0, r8
 8007400:	46ac      	mov	ip, r5
 8007402:	46f2      	mov	sl, lr
 8007404:	f850 2b04 	ldr.w	r2, [r0], #4
 8007408:	b293      	uxth	r3, r2
 800740a:	fb06 e303 	mla	r3, r6, r3, lr
 800740e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007412:	b29b      	uxth	r3, r3
 8007414:	ebaa 0303 	sub.w	r3, sl, r3
 8007418:	f8dc a000 	ldr.w	sl, [ip]
 800741c:	0c12      	lsrs	r2, r2, #16
 800741e:	fa13 f38a 	uxtah	r3, r3, sl
 8007422:	fb06 e202 	mla	r2, r6, r2, lr
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	9b00      	ldr	r3, [sp, #0]
 800742a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800742e:	b292      	uxth	r2, r2
 8007430:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007438:	f8bd 3000 	ldrh.w	r3, [sp]
 800743c:	4581      	cmp	r9, r0
 800743e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007442:	f84c 3b04 	str.w	r3, [ip], #4
 8007446:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800744a:	d2db      	bcs.n	8007404 <quorem+0x44>
 800744c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007450:	b92b      	cbnz	r3, 800745e <quorem+0x9e>
 8007452:	9b01      	ldr	r3, [sp, #4]
 8007454:	3b04      	subs	r3, #4
 8007456:	429d      	cmp	r5, r3
 8007458:	461a      	mov	r2, r3
 800745a:	d32e      	bcc.n	80074ba <quorem+0xfa>
 800745c:	613c      	str	r4, [r7, #16]
 800745e:	4638      	mov	r0, r7
 8007460:	f001 fa88 	bl	8008974 <__mcmp>
 8007464:	2800      	cmp	r0, #0
 8007466:	db24      	blt.n	80074b2 <quorem+0xf2>
 8007468:	3601      	adds	r6, #1
 800746a:	4628      	mov	r0, r5
 800746c:	f04f 0c00 	mov.w	ip, #0
 8007470:	f858 2b04 	ldr.w	r2, [r8], #4
 8007474:	f8d0 e000 	ldr.w	lr, [r0]
 8007478:	b293      	uxth	r3, r2
 800747a:	ebac 0303 	sub.w	r3, ip, r3
 800747e:	0c12      	lsrs	r2, r2, #16
 8007480:	fa13 f38e 	uxtah	r3, r3, lr
 8007484:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007488:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800748c:	b29b      	uxth	r3, r3
 800748e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007492:	45c1      	cmp	r9, r8
 8007494:	f840 3b04 	str.w	r3, [r0], #4
 8007498:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800749c:	d2e8      	bcs.n	8007470 <quorem+0xb0>
 800749e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074a6:	b922      	cbnz	r2, 80074b2 <quorem+0xf2>
 80074a8:	3b04      	subs	r3, #4
 80074aa:	429d      	cmp	r5, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	d30a      	bcc.n	80074c6 <quorem+0x106>
 80074b0:	613c      	str	r4, [r7, #16]
 80074b2:	4630      	mov	r0, r6
 80074b4:	b003      	add	sp, #12
 80074b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ba:	6812      	ldr	r2, [r2, #0]
 80074bc:	3b04      	subs	r3, #4
 80074be:	2a00      	cmp	r2, #0
 80074c0:	d1cc      	bne.n	800745c <quorem+0x9c>
 80074c2:	3c01      	subs	r4, #1
 80074c4:	e7c7      	b.n	8007456 <quorem+0x96>
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	3b04      	subs	r3, #4
 80074ca:	2a00      	cmp	r2, #0
 80074cc:	d1f0      	bne.n	80074b0 <quorem+0xf0>
 80074ce:	3c01      	subs	r4, #1
 80074d0:	e7eb      	b.n	80074aa <quorem+0xea>
 80074d2:	2000      	movs	r0, #0
 80074d4:	e7ee      	b.n	80074b4 <quorem+0xf4>
	...

080074d8 <_dtoa_r>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	ed2d 8b02 	vpush	{d8}
 80074e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074e2:	b091      	sub	sp, #68	; 0x44
 80074e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80074e8:	ec59 8b10 	vmov	r8, r9, d0
 80074ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80074ee:	9106      	str	r1, [sp, #24]
 80074f0:	4606      	mov	r6, r0
 80074f2:	9208      	str	r2, [sp, #32]
 80074f4:	930c      	str	r3, [sp, #48]	; 0x30
 80074f6:	b975      	cbnz	r5, 8007516 <_dtoa_r+0x3e>
 80074f8:	2010      	movs	r0, #16
 80074fa:	f000 ffa3 	bl	8008444 <malloc>
 80074fe:	4602      	mov	r2, r0
 8007500:	6270      	str	r0, [r6, #36]	; 0x24
 8007502:	b920      	cbnz	r0, 800750e <_dtoa_r+0x36>
 8007504:	4baa      	ldr	r3, [pc, #680]	; (80077b0 <_dtoa_r+0x2d8>)
 8007506:	21ea      	movs	r1, #234	; 0xea
 8007508:	48aa      	ldr	r0, [pc, #680]	; (80077b4 <_dtoa_r+0x2dc>)
 800750a:	f7ff ff3b 	bl	8007384 <__assert_func>
 800750e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007512:	6005      	str	r5, [r0, #0]
 8007514:	60c5      	str	r5, [r0, #12]
 8007516:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007518:	6819      	ldr	r1, [r3, #0]
 800751a:	b151      	cbz	r1, 8007532 <_dtoa_r+0x5a>
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	604a      	str	r2, [r1, #4]
 8007520:	2301      	movs	r3, #1
 8007522:	4093      	lsls	r3, r2
 8007524:	608b      	str	r3, [r1, #8]
 8007526:	4630      	mov	r0, r6
 8007528:	f000 ffe2 	bl	80084f0 <_Bfree>
 800752c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	f1b9 0300 	subs.w	r3, r9, #0
 8007536:	bfbb      	ittet	lt
 8007538:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800753c:	9303      	strlt	r3, [sp, #12]
 800753e:	2300      	movge	r3, #0
 8007540:	2201      	movlt	r2, #1
 8007542:	bfac      	ite	ge
 8007544:	6023      	strge	r3, [r4, #0]
 8007546:	6022      	strlt	r2, [r4, #0]
 8007548:	4b9b      	ldr	r3, [pc, #620]	; (80077b8 <_dtoa_r+0x2e0>)
 800754a:	9c03      	ldr	r4, [sp, #12]
 800754c:	43a3      	bics	r3, r4
 800754e:	d11c      	bne.n	800758a <_dtoa_r+0xb2>
 8007550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007552:	f242 730f 	movw	r3, #9999	; 0x270f
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800755c:	ea53 0308 	orrs.w	r3, r3, r8
 8007560:	f000 84fd 	beq.w	8007f5e <_dtoa_r+0xa86>
 8007564:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007566:	b963      	cbnz	r3, 8007582 <_dtoa_r+0xaa>
 8007568:	4b94      	ldr	r3, [pc, #592]	; (80077bc <_dtoa_r+0x2e4>)
 800756a:	e01f      	b.n	80075ac <_dtoa_r+0xd4>
 800756c:	4b94      	ldr	r3, [pc, #592]	; (80077c0 <_dtoa_r+0x2e8>)
 800756e:	9301      	str	r3, [sp, #4]
 8007570:	3308      	adds	r3, #8
 8007572:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	9801      	ldr	r0, [sp, #4]
 8007578:	b011      	add	sp, #68	; 0x44
 800757a:	ecbd 8b02 	vpop	{d8}
 800757e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007582:	4b8e      	ldr	r3, [pc, #568]	; (80077bc <_dtoa_r+0x2e4>)
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	3303      	adds	r3, #3
 8007588:	e7f3      	b.n	8007572 <_dtoa_r+0x9a>
 800758a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800758e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007596:	d10b      	bne.n	80075b0 <_dtoa_r+0xd8>
 8007598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800759a:	2301      	movs	r3, #1
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 84d9 	beq.w	8007f58 <_dtoa_r+0xa80>
 80075a6:	4887      	ldr	r0, [pc, #540]	; (80077c4 <_dtoa_r+0x2ec>)
 80075a8:	6018      	str	r0, [r3, #0]
 80075aa:	1e43      	subs	r3, r0, #1
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	e7e2      	b.n	8007576 <_dtoa_r+0x9e>
 80075b0:	a90f      	add	r1, sp, #60	; 0x3c
 80075b2:	aa0e      	add	r2, sp, #56	; 0x38
 80075b4:	4630      	mov	r0, r6
 80075b6:	eeb0 0b48 	vmov.f64	d0, d8
 80075ba:	f001 fa81 	bl	8008ac0 <__d2b>
 80075be:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80075c2:	4605      	mov	r5, r0
 80075c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80075c6:	2900      	cmp	r1, #0
 80075c8:	d046      	beq.n	8007658 <_dtoa_r+0x180>
 80075ca:	ee18 4a90 	vmov	r4, s17
 80075ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80075d2:	ec53 2b18 	vmov	r2, r3, d8
 80075d6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80075da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80075de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80075e2:	2400      	movs	r4, #0
 80075e4:	ec43 2b16 	vmov	d6, r2, r3
 80075e8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80075ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007798 <_dtoa_r+0x2c0>
 80075f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80075f4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80077a0 <_dtoa_r+0x2c8>
 80075f8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80075fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80077a8 <_dtoa_r+0x2d0>
 8007600:	ee07 1a90 	vmov	s15, r1
 8007604:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007608:	eeb0 7b46 	vmov.f64	d7, d6
 800760c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007610:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007614:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761c:	ee16 ba90 	vmov	fp, s13
 8007620:	940a      	str	r4, [sp, #40]	; 0x28
 8007622:	d508      	bpl.n	8007636 <_dtoa_r+0x15e>
 8007624:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007628:	eeb4 6b47 	vcmp.f64	d6, d7
 800762c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007630:	bf18      	it	ne
 8007632:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007636:	f1bb 0f16 	cmp.w	fp, #22
 800763a:	d82f      	bhi.n	800769c <_dtoa_r+0x1c4>
 800763c:	4b62      	ldr	r3, [pc, #392]	; (80077c8 <_dtoa_r+0x2f0>)
 800763e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007642:	ed93 7b00 	vldr	d7, [r3]
 8007646:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800764a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764e:	d501      	bpl.n	8007654 <_dtoa_r+0x17c>
 8007650:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007654:	2300      	movs	r3, #0
 8007656:	e022      	b.n	800769e <_dtoa_r+0x1c6>
 8007658:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800765a:	4401      	add	r1, r0
 800765c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007660:	2b20      	cmp	r3, #32
 8007662:	bfc1      	itttt	gt
 8007664:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007668:	fa04 f303 	lslgt.w	r3, r4, r3
 800766c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007670:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007674:	bfd6      	itet	le
 8007676:	f1c3 0320 	rsble	r3, r3, #32
 800767a:	ea43 0808 	orrgt.w	r8, r3, r8
 800767e:	fa08 f803 	lslle.w	r8, r8, r3
 8007682:	ee07 8a90 	vmov	s15, r8
 8007686:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800768a:	3901      	subs	r1, #1
 800768c:	ee17 4a90 	vmov	r4, s15
 8007690:	ec53 2b17 	vmov	r2, r3, d7
 8007694:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007698:	2401      	movs	r4, #1
 800769a:	e7a3      	b.n	80075e4 <_dtoa_r+0x10c>
 800769c:	2301      	movs	r3, #1
 800769e:	930b      	str	r3, [sp, #44]	; 0x2c
 80076a0:	1a43      	subs	r3, r0, r1
 80076a2:	1e5a      	subs	r2, r3, #1
 80076a4:	bf45      	ittet	mi
 80076a6:	f1c3 0301 	rsbmi	r3, r3, #1
 80076aa:	9304      	strmi	r3, [sp, #16]
 80076ac:	2300      	movpl	r3, #0
 80076ae:	2300      	movmi	r3, #0
 80076b0:	9205      	str	r2, [sp, #20]
 80076b2:	bf54      	ite	pl
 80076b4:	9304      	strpl	r3, [sp, #16]
 80076b6:	9305      	strmi	r3, [sp, #20]
 80076b8:	f1bb 0f00 	cmp.w	fp, #0
 80076bc:	db18      	blt.n	80076f0 <_dtoa_r+0x218>
 80076be:	9b05      	ldr	r3, [sp, #20]
 80076c0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80076c4:	445b      	add	r3, fp
 80076c6:	9305      	str	r3, [sp, #20]
 80076c8:	2300      	movs	r3, #0
 80076ca:	9a06      	ldr	r2, [sp, #24]
 80076cc:	2a09      	cmp	r2, #9
 80076ce:	d849      	bhi.n	8007764 <_dtoa_r+0x28c>
 80076d0:	2a05      	cmp	r2, #5
 80076d2:	bfc4      	itt	gt
 80076d4:	3a04      	subgt	r2, #4
 80076d6:	9206      	strgt	r2, [sp, #24]
 80076d8:	9a06      	ldr	r2, [sp, #24]
 80076da:	f1a2 0202 	sub.w	r2, r2, #2
 80076de:	bfcc      	ite	gt
 80076e0:	2400      	movgt	r4, #0
 80076e2:	2401      	movle	r4, #1
 80076e4:	2a03      	cmp	r2, #3
 80076e6:	d848      	bhi.n	800777a <_dtoa_r+0x2a2>
 80076e8:	e8df f002 	tbb	[pc, r2]
 80076ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80076f0:	9b04      	ldr	r3, [sp, #16]
 80076f2:	2200      	movs	r2, #0
 80076f4:	eba3 030b 	sub.w	r3, r3, fp
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	9209      	str	r2, [sp, #36]	; 0x24
 80076fc:	f1cb 0300 	rsb	r3, fp, #0
 8007700:	e7e3      	b.n	80076ca <_dtoa_r+0x1f2>
 8007702:	2200      	movs	r2, #0
 8007704:	9207      	str	r2, [sp, #28]
 8007706:	9a08      	ldr	r2, [sp, #32]
 8007708:	2a00      	cmp	r2, #0
 800770a:	dc39      	bgt.n	8007780 <_dtoa_r+0x2a8>
 800770c:	f04f 0a01 	mov.w	sl, #1
 8007710:	46d1      	mov	r9, sl
 8007712:	4652      	mov	r2, sl
 8007714:	f8cd a020 	str.w	sl, [sp, #32]
 8007718:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800771a:	2100      	movs	r1, #0
 800771c:	6079      	str	r1, [r7, #4]
 800771e:	2004      	movs	r0, #4
 8007720:	f100 0c14 	add.w	ip, r0, #20
 8007724:	4594      	cmp	ip, r2
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	d92f      	bls.n	800778a <_dtoa_r+0x2b2>
 800772a:	4630      	mov	r0, r6
 800772c:	930d      	str	r3, [sp, #52]	; 0x34
 800772e:	f000 fe9f 	bl	8008470 <_Balloc>
 8007732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007734:	9001      	str	r0, [sp, #4]
 8007736:	4602      	mov	r2, r0
 8007738:	2800      	cmp	r0, #0
 800773a:	d149      	bne.n	80077d0 <_dtoa_r+0x2f8>
 800773c:	4b23      	ldr	r3, [pc, #140]	; (80077cc <_dtoa_r+0x2f4>)
 800773e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007742:	e6e1      	b.n	8007508 <_dtoa_r+0x30>
 8007744:	2201      	movs	r2, #1
 8007746:	e7dd      	b.n	8007704 <_dtoa_r+0x22c>
 8007748:	2200      	movs	r2, #0
 800774a:	9207      	str	r2, [sp, #28]
 800774c:	9a08      	ldr	r2, [sp, #32]
 800774e:	eb0b 0a02 	add.w	sl, fp, r2
 8007752:	f10a 0901 	add.w	r9, sl, #1
 8007756:	464a      	mov	r2, r9
 8007758:	2a01      	cmp	r2, #1
 800775a:	bfb8      	it	lt
 800775c:	2201      	movlt	r2, #1
 800775e:	e7db      	b.n	8007718 <_dtoa_r+0x240>
 8007760:	2201      	movs	r2, #1
 8007762:	e7f2      	b.n	800774a <_dtoa_r+0x272>
 8007764:	2401      	movs	r4, #1
 8007766:	2200      	movs	r2, #0
 8007768:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800776c:	f04f 3aff 	mov.w	sl, #4294967295
 8007770:	2100      	movs	r1, #0
 8007772:	46d1      	mov	r9, sl
 8007774:	2212      	movs	r2, #18
 8007776:	9108      	str	r1, [sp, #32]
 8007778:	e7ce      	b.n	8007718 <_dtoa_r+0x240>
 800777a:	2201      	movs	r2, #1
 800777c:	9207      	str	r2, [sp, #28]
 800777e:	e7f5      	b.n	800776c <_dtoa_r+0x294>
 8007780:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007784:	46d1      	mov	r9, sl
 8007786:	4652      	mov	r2, sl
 8007788:	e7c6      	b.n	8007718 <_dtoa_r+0x240>
 800778a:	3101      	adds	r1, #1
 800778c:	6079      	str	r1, [r7, #4]
 800778e:	0040      	lsls	r0, r0, #1
 8007790:	e7c6      	b.n	8007720 <_dtoa_r+0x248>
 8007792:	bf00      	nop
 8007794:	f3af 8000 	nop.w
 8007798:	636f4361 	.word	0x636f4361
 800779c:	3fd287a7 	.word	0x3fd287a7
 80077a0:	8b60c8b3 	.word	0x8b60c8b3
 80077a4:	3fc68a28 	.word	0x3fc68a28
 80077a8:	509f79fb 	.word	0x509f79fb
 80077ac:	3fd34413 	.word	0x3fd34413
 80077b0:	08009368 	.word	0x08009368
 80077b4:	08009423 	.word	0x08009423
 80077b8:	7ff00000 	.word	0x7ff00000
 80077bc:	0800941f 	.word	0x0800941f
 80077c0:	08009416 	.word	0x08009416
 80077c4:	08009345 	.word	0x08009345
 80077c8:	08009578 	.word	0x08009578
 80077cc:	0800947e 	.word	0x0800947e
 80077d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80077d2:	9901      	ldr	r1, [sp, #4]
 80077d4:	6011      	str	r1, [r2, #0]
 80077d6:	f1b9 0f0e 	cmp.w	r9, #14
 80077da:	d86c      	bhi.n	80078b6 <_dtoa_r+0x3de>
 80077dc:	2c00      	cmp	r4, #0
 80077de:	d06a      	beq.n	80078b6 <_dtoa_r+0x3de>
 80077e0:	f1bb 0f00 	cmp.w	fp, #0
 80077e4:	f340 80a0 	ble.w	8007928 <_dtoa_r+0x450>
 80077e8:	49c1      	ldr	r1, [pc, #772]	; (8007af0 <_dtoa_r+0x618>)
 80077ea:	f00b 020f 	and.w	r2, fp, #15
 80077ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80077f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80077f6:	ed92 7b00 	vldr	d7, [r2]
 80077fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80077fe:	f000 8087 	beq.w	8007910 <_dtoa_r+0x438>
 8007802:	4abc      	ldr	r2, [pc, #752]	; (8007af4 <_dtoa_r+0x61c>)
 8007804:	ed92 6b08 	vldr	d6, [r2, #32]
 8007808:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800780c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007810:	f001 010f 	and.w	r1, r1, #15
 8007814:	2203      	movs	r2, #3
 8007816:	48b7      	ldr	r0, [pc, #732]	; (8007af4 <_dtoa_r+0x61c>)
 8007818:	2900      	cmp	r1, #0
 800781a:	d17b      	bne.n	8007914 <_dtoa_r+0x43c>
 800781c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007820:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007824:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800782a:	2900      	cmp	r1, #0
 800782c:	f000 80a2 	beq.w	8007974 <_dtoa_r+0x49c>
 8007830:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007834:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007838:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800783c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007840:	f140 8098 	bpl.w	8007974 <_dtoa_r+0x49c>
 8007844:	f1b9 0f00 	cmp.w	r9, #0
 8007848:	f000 8094 	beq.w	8007974 <_dtoa_r+0x49c>
 800784c:	f1ba 0f00 	cmp.w	sl, #0
 8007850:	dd2f      	ble.n	80078b2 <_dtoa_r+0x3da>
 8007852:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007856:	ee27 7b06 	vmul.f64	d7, d7, d6
 800785a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800785e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007862:	3201      	adds	r2, #1
 8007864:	4650      	mov	r0, sl
 8007866:	ed9d 6b02 	vldr	d6, [sp, #8]
 800786a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800786e:	ee07 2a90 	vmov	s15, r2
 8007872:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007876:	eea7 5b06 	vfma.f64	d5, d7, d6
 800787a:	ee15 4a90 	vmov	r4, s11
 800787e:	ec52 1b15 	vmov	r1, r2, d5
 8007882:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007886:	2800      	cmp	r0, #0
 8007888:	d177      	bne.n	800797a <_dtoa_r+0x4a2>
 800788a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800788e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007892:	ec42 1b17 	vmov	d7, r1, r2
 8007896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800789a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789e:	f300 8263 	bgt.w	8007d68 <_dtoa_r+0x890>
 80078a2:	eeb1 7b47 	vneg.f64	d7, d7
 80078a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ae:	f100 8258 	bmi.w	8007d62 <_dtoa_r+0x88a>
 80078b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80078b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	f2c0 811d 	blt.w	8007af8 <_dtoa_r+0x620>
 80078be:	f1bb 0f0e 	cmp.w	fp, #14
 80078c2:	f300 8119 	bgt.w	8007af8 <_dtoa_r+0x620>
 80078c6:	4b8a      	ldr	r3, [pc, #552]	; (8007af0 <_dtoa_r+0x618>)
 80078c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078cc:	ed93 6b00 	vldr	d6, [r3]
 80078d0:	9b08      	ldr	r3, [sp, #32]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f280 80b7 	bge.w	8007a46 <_dtoa_r+0x56e>
 80078d8:	f1b9 0f00 	cmp.w	r9, #0
 80078dc:	f300 80b3 	bgt.w	8007a46 <_dtoa_r+0x56e>
 80078e0:	f040 823f 	bne.w	8007d62 <_dtoa_r+0x88a>
 80078e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80078e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80078ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f8:	464c      	mov	r4, r9
 80078fa:	464f      	mov	r7, r9
 80078fc:	f280 8215 	bge.w	8007d2a <_dtoa_r+0x852>
 8007900:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007904:	2331      	movs	r3, #49	; 0x31
 8007906:	f808 3b01 	strb.w	r3, [r8], #1
 800790a:	f10b 0b01 	add.w	fp, fp, #1
 800790e:	e211      	b.n	8007d34 <_dtoa_r+0x85c>
 8007910:	2202      	movs	r2, #2
 8007912:	e780      	b.n	8007816 <_dtoa_r+0x33e>
 8007914:	07cc      	lsls	r4, r1, #31
 8007916:	d504      	bpl.n	8007922 <_dtoa_r+0x44a>
 8007918:	ed90 6b00 	vldr	d6, [r0]
 800791c:	3201      	adds	r2, #1
 800791e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007922:	1049      	asrs	r1, r1, #1
 8007924:	3008      	adds	r0, #8
 8007926:	e777      	b.n	8007818 <_dtoa_r+0x340>
 8007928:	d022      	beq.n	8007970 <_dtoa_r+0x498>
 800792a:	f1cb 0100 	rsb	r1, fp, #0
 800792e:	4a70      	ldr	r2, [pc, #448]	; (8007af0 <_dtoa_r+0x618>)
 8007930:	f001 000f 	and.w	r0, r1, #15
 8007934:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007938:	ed92 7b00 	vldr	d7, [r2]
 800793c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007940:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007944:	486b      	ldr	r0, [pc, #428]	; (8007af4 <_dtoa_r+0x61c>)
 8007946:	1109      	asrs	r1, r1, #4
 8007948:	2400      	movs	r4, #0
 800794a:	2202      	movs	r2, #2
 800794c:	b929      	cbnz	r1, 800795a <_dtoa_r+0x482>
 800794e:	2c00      	cmp	r4, #0
 8007950:	f43f af6a 	beq.w	8007828 <_dtoa_r+0x350>
 8007954:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007958:	e766      	b.n	8007828 <_dtoa_r+0x350>
 800795a:	07cf      	lsls	r7, r1, #31
 800795c:	d505      	bpl.n	800796a <_dtoa_r+0x492>
 800795e:	ed90 6b00 	vldr	d6, [r0]
 8007962:	3201      	adds	r2, #1
 8007964:	2401      	movs	r4, #1
 8007966:	ee27 7b06 	vmul.f64	d7, d7, d6
 800796a:	1049      	asrs	r1, r1, #1
 800796c:	3008      	adds	r0, #8
 800796e:	e7ed      	b.n	800794c <_dtoa_r+0x474>
 8007970:	2202      	movs	r2, #2
 8007972:	e759      	b.n	8007828 <_dtoa_r+0x350>
 8007974:	465f      	mov	r7, fp
 8007976:	4648      	mov	r0, r9
 8007978:	e775      	b.n	8007866 <_dtoa_r+0x38e>
 800797a:	ec42 1b17 	vmov	d7, r1, r2
 800797e:	4a5c      	ldr	r2, [pc, #368]	; (8007af0 <_dtoa_r+0x618>)
 8007980:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007984:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007988:	9a01      	ldr	r2, [sp, #4]
 800798a:	1814      	adds	r4, r2, r0
 800798c:	9a07      	ldr	r2, [sp, #28]
 800798e:	b352      	cbz	r2, 80079e6 <_dtoa_r+0x50e>
 8007990:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007994:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007998:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800799c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80079a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80079a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80079a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80079ac:	ee14 2a90 	vmov	r2, s9
 80079b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80079b4:	3230      	adds	r2, #48	; 0x30
 80079b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80079ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c2:	f808 2b01 	strb.w	r2, [r8], #1
 80079c6:	d439      	bmi.n	8007a3c <_dtoa_r+0x564>
 80079c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80079cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80079d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d4:	d472      	bmi.n	8007abc <_dtoa_r+0x5e4>
 80079d6:	45a0      	cmp	r8, r4
 80079d8:	f43f af6b 	beq.w	80078b2 <_dtoa_r+0x3da>
 80079dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80079e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80079e4:	e7e0      	b.n	80079a8 <_dtoa_r+0x4d0>
 80079e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80079ee:	4621      	mov	r1, r4
 80079f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80079f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80079f8:	ee14 2a90 	vmov	r2, s9
 80079fc:	3230      	adds	r2, #48	; 0x30
 80079fe:	f808 2b01 	strb.w	r2, [r8], #1
 8007a02:	45a0      	cmp	r8, r4
 8007a04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007a08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007a0c:	d118      	bne.n	8007a40 <_dtoa_r+0x568>
 8007a0e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007a12:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007a16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1e:	dc4d      	bgt.n	8007abc <_dtoa_r+0x5e4>
 8007a20:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2c:	f57f af41 	bpl.w	80078b2 <_dtoa_r+0x3da>
 8007a30:	4688      	mov	r8, r1
 8007a32:	3901      	subs	r1, #1
 8007a34:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007a38:	2b30      	cmp	r3, #48	; 0x30
 8007a3a:	d0f9      	beq.n	8007a30 <_dtoa_r+0x558>
 8007a3c:	46bb      	mov	fp, r7
 8007a3e:	e02a      	b.n	8007a96 <_dtoa_r+0x5be>
 8007a40:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007a44:	e7d6      	b.n	80079f4 <_dtoa_r+0x51c>
 8007a46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a4a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007a4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a52:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007a56:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007a5a:	ee15 3a10 	vmov	r3, s10
 8007a5e:	3330      	adds	r3, #48	; 0x30
 8007a60:	f808 3b01 	strb.w	r3, [r8], #1
 8007a64:	9b01      	ldr	r3, [sp, #4]
 8007a66:	eba8 0303 	sub.w	r3, r8, r3
 8007a6a:	4599      	cmp	r9, r3
 8007a6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007a70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007a74:	d133      	bne.n	8007ade <_dtoa_r+0x606>
 8007a76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007a7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a82:	dc1a      	bgt.n	8007aba <_dtoa_r+0x5e2>
 8007a84:	eeb4 7b46 	vcmp.f64	d7, d6
 8007a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8c:	d103      	bne.n	8007a96 <_dtoa_r+0x5be>
 8007a8e:	ee15 3a10 	vmov	r3, s10
 8007a92:	07d9      	lsls	r1, r3, #31
 8007a94:	d411      	bmi.n	8007aba <_dtoa_r+0x5e2>
 8007a96:	4629      	mov	r1, r5
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f000 fd29 	bl	80084f0 <_Bfree>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aa2:	f888 3000 	strb.w	r3, [r8]
 8007aa6:	f10b 0301 	add.w	r3, fp, #1
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f43f ad61 	beq.w	8007576 <_dtoa_r+0x9e>
 8007ab4:	f8c3 8000 	str.w	r8, [r3]
 8007ab8:	e55d      	b.n	8007576 <_dtoa_r+0x9e>
 8007aba:	465f      	mov	r7, fp
 8007abc:	4643      	mov	r3, r8
 8007abe:	4698      	mov	r8, r3
 8007ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ac4:	2a39      	cmp	r2, #57	; 0x39
 8007ac6:	d106      	bne.n	8007ad6 <_dtoa_r+0x5fe>
 8007ac8:	9a01      	ldr	r2, [sp, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d1f7      	bne.n	8007abe <_dtoa_r+0x5e6>
 8007ace:	9901      	ldr	r1, [sp, #4]
 8007ad0:	2230      	movs	r2, #48	; 0x30
 8007ad2:	3701      	adds	r7, #1
 8007ad4:	700a      	strb	r2, [r1, #0]
 8007ad6:	781a      	ldrb	r2, [r3, #0]
 8007ad8:	3201      	adds	r2, #1
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	e7ae      	b.n	8007a3c <_dtoa_r+0x564>
 8007ade:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ae2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aea:	d1b2      	bne.n	8007a52 <_dtoa_r+0x57a>
 8007aec:	e7d3      	b.n	8007a96 <_dtoa_r+0x5be>
 8007aee:	bf00      	nop
 8007af0:	08009578 	.word	0x08009578
 8007af4:	08009550 	.word	0x08009550
 8007af8:	9907      	ldr	r1, [sp, #28]
 8007afa:	2900      	cmp	r1, #0
 8007afc:	f000 80d0 	beq.w	8007ca0 <_dtoa_r+0x7c8>
 8007b00:	9906      	ldr	r1, [sp, #24]
 8007b02:	2901      	cmp	r1, #1
 8007b04:	f300 80b4 	bgt.w	8007c70 <_dtoa_r+0x798>
 8007b08:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b0a:	2900      	cmp	r1, #0
 8007b0c:	f000 80ac 	beq.w	8007c68 <_dtoa_r+0x790>
 8007b10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b14:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007b18:	461c      	mov	r4, r3
 8007b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1c:	9b04      	ldr	r3, [sp, #16]
 8007b1e:	4413      	add	r3, r2
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	9b05      	ldr	r3, [sp, #20]
 8007b24:	2101      	movs	r1, #1
 8007b26:	4413      	add	r3, r2
 8007b28:	4630      	mov	r0, r6
 8007b2a:	9305      	str	r3, [sp, #20]
 8007b2c:	f000 fd98 	bl	8008660 <__i2b>
 8007b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b32:	4607      	mov	r7, r0
 8007b34:	f1b8 0f00 	cmp.w	r8, #0
 8007b38:	dd0d      	ble.n	8007b56 <_dtoa_r+0x67e>
 8007b3a:	9a05      	ldr	r2, [sp, #20]
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	dd0a      	ble.n	8007b56 <_dtoa_r+0x67e>
 8007b40:	4542      	cmp	r2, r8
 8007b42:	9904      	ldr	r1, [sp, #16]
 8007b44:	bfa8      	it	ge
 8007b46:	4642      	movge	r2, r8
 8007b48:	1a89      	subs	r1, r1, r2
 8007b4a:	9104      	str	r1, [sp, #16]
 8007b4c:	9905      	ldr	r1, [sp, #20]
 8007b4e:	eba8 0802 	sub.w	r8, r8, r2
 8007b52:	1a8a      	subs	r2, r1, r2
 8007b54:	9205      	str	r2, [sp, #20]
 8007b56:	b303      	cbz	r3, 8007b9a <_dtoa_r+0x6c2>
 8007b58:	9a07      	ldr	r2, [sp, #28]
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	f000 80a5 	beq.w	8007caa <_dtoa_r+0x7d2>
 8007b60:	2c00      	cmp	r4, #0
 8007b62:	dd13      	ble.n	8007b8c <_dtoa_r+0x6b4>
 8007b64:	4639      	mov	r1, r7
 8007b66:	4622      	mov	r2, r4
 8007b68:	4630      	mov	r0, r6
 8007b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8007b6c:	f000 fe38 	bl	80087e0 <__pow5mult>
 8007b70:	462a      	mov	r2, r5
 8007b72:	4601      	mov	r1, r0
 8007b74:	4607      	mov	r7, r0
 8007b76:	4630      	mov	r0, r6
 8007b78:	f000 fd88 	bl	800868c <__multiply>
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	900a      	str	r0, [sp, #40]	; 0x28
 8007b80:	4630      	mov	r0, r6
 8007b82:	f000 fcb5 	bl	80084f0 <_Bfree>
 8007b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b8a:	4615      	mov	r5, r2
 8007b8c:	1b1a      	subs	r2, r3, r4
 8007b8e:	d004      	beq.n	8007b9a <_dtoa_r+0x6c2>
 8007b90:	4629      	mov	r1, r5
 8007b92:	4630      	mov	r0, r6
 8007b94:	f000 fe24 	bl	80087e0 <__pow5mult>
 8007b98:	4605      	mov	r5, r0
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f000 fd5f 	bl	8008660 <__i2b>
 8007ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	f340 8081 	ble.w	8007cae <_dtoa_r+0x7d6>
 8007bac:	461a      	mov	r2, r3
 8007bae:	4601      	mov	r1, r0
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f000 fe15 	bl	80087e0 <__pow5mult>
 8007bb6:	9b06      	ldr	r3, [sp, #24]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	4604      	mov	r4, r0
 8007bbc:	dd7a      	ble.n	8007cb4 <_dtoa_r+0x7dc>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	930a      	str	r3, [sp, #40]	; 0x28
 8007bc2:	6922      	ldr	r2, [r4, #16]
 8007bc4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007bc8:	6910      	ldr	r0, [r2, #16]
 8007bca:	f000 fcf9 	bl	80085c0 <__hi0bits>
 8007bce:	f1c0 0020 	rsb	r0, r0, #32
 8007bd2:	9b05      	ldr	r3, [sp, #20]
 8007bd4:	4418      	add	r0, r3
 8007bd6:	f010 001f 	ands.w	r0, r0, #31
 8007bda:	f000 808c 	beq.w	8007cf6 <_dtoa_r+0x81e>
 8007bde:	f1c0 0220 	rsb	r2, r0, #32
 8007be2:	2a04      	cmp	r2, #4
 8007be4:	f340 8085 	ble.w	8007cf2 <_dtoa_r+0x81a>
 8007be8:	f1c0 001c 	rsb	r0, r0, #28
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	4403      	add	r3, r0
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	9b05      	ldr	r3, [sp, #20]
 8007bf4:	4403      	add	r3, r0
 8007bf6:	4480      	add	r8, r0
 8007bf8:	9305      	str	r3, [sp, #20]
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dd05      	ble.n	8007c0c <_dtoa_r+0x734>
 8007c00:	4629      	mov	r1, r5
 8007c02:	461a      	mov	r2, r3
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 fe45 	bl	8008894 <__lshift>
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	9b05      	ldr	r3, [sp, #20]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dd05      	ble.n	8007c1e <_dtoa_r+0x746>
 8007c12:	4621      	mov	r1, r4
 8007c14:	461a      	mov	r2, r3
 8007c16:	4630      	mov	r0, r6
 8007c18:	f000 fe3c 	bl	8008894 <__lshift>
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d06a      	beq.n	8007cfa <_dtoa_r+0x822>
 8007c24:	4621      	mov	r1, r4
 8007c26:	4628      	mov	r0, r5
 8007c28:	f000 fea4 	bl	8008974 <__mcmp>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	da64      	bge.n	8007cfa <_dtoa_r+0x822>
 8007c30:	2300      	movs	r3, #0
 8007c32:	4629      	mov	r1, r5
 8007c34:	220a      	movs	r2, #10
 8007c36:	4630      	mov	r0, r6
 8007c38:	f000 fc7c 	bl	8008534 <__multadd>
 8007c3c:	9b07      	ldr	r3, [sp, #28]
 8007c3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c42:	4605      	mov	r5, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8191 	beq.w	8007f6c <_dtoa_r+0xa94>
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	220a      	movs	r2, #10
 8007c50:	4630      	mov	r0, r6
 8007c52:	f000 fc6f 	bl	8008534 <__multadd>
 8007c56:	f1ba 0f00 	cmp.w	sl, #0
 8007c5a:	4607      	mov	r7, r0
 8007c5c:	f300 808d 	bgt.w	8007d7a <_dtoa_r+0x8a2>
 8007c60:	9b06      	ldr	r3, [sp, #24]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	dc50      	bgt.n	8007d08 <_dtoa_r+0x830>
 8007c66:	e088      	b.n	8007d7a <_dtoa_r+0x8a2>
 8007c68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007c6e:	e751      	b.n	8007b14 <_dtoa_r+0x63c>
 8007c70:	f109 34ff 	add.w	r4, r9, #4294967295
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	bfbf      	itttt	lt
 8007c78:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007c7a:	1ae3      	sublt	r3, r4, r3
 8007c7c:	18d2      	addlt	r2, r2, r3
 8007c7e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007c80:	bfb6      	itet	lt
 8007c82:	4623      	movlt	r3, r4
 8007c84:	1b1c      	subge	r4, r3, r4
 8007c86:	2400      	movlt	r4, #0
 8007c88:	f1b9 0f00 	cmp.w	r9, #0
 8007c8c:	bfb5      	itete	lt
 8007c8e:	9a04      	ldrlt	r2, [sp, #16]
 8007c90:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007c94:	eba2 0809 	sublt.w	r8, r2, r9
 8007c98:	464a      	movge	r2, r9
 8007c9a:	bfb8      	it	lt
 8007c9c:	2200      	movlt	r2, #0
 8007c9e:	e73c      	b.n	8007b1a <_dtoa_r+0x642>
 8007ca0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007ca4:	9f07      	ldr	r7, [sp, #28]
 8007ca6:	461c      	mov	r4, r3
 8007ca8:	e744      	b.n	8007b34 <_dtoa_r+0x65c>
 8007caa:	461a      	mov	r2, r3
 8007cac:	e770      	b.n	8007b90 <_dtoa_r+0x6b8>
 8007cae:	9b06      	ldr	r3, [sp, #24]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	dc18      	bgt.n	8007ce6 <_dtoa_r+0x80e>
 8007cb4:	9b02      	ldr	r3, [sp, #8]
 8007cb6:	b9b3      	cbnz	r3, 8007ce6 <_dtoa_r+0x80e>
 8007cb8:	9b03      	ldr	r3, [sp, #12]
 8007cba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007cbe:	b9a2      	cbnz	r2, 8007cea <_dtoa_r+0x812>
 8007cc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007cc4:	0d12      	lsrs	r2, r2, #20
 8007cc6:	0512      	lsls	r2, r2, #20
 8007cc8:	b18a      	cbz	r2, 8007cee <_dtoa_r+0x816>
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	9b05      	ldr	r3, [sp, #20]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	9305      	str	r3, [sp, #20]
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8007cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f47f af70 	bne.w	8007bc2 <_dtoa_r+0x6ea>
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	e775      	b.n	8007bd2 <_dtoa_r+0x6fa>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e7f6      	b.n	8007cd8 <_dtoa_r+0x800>
 8007cea:	9b02      	ldr	r3, [sp, #8]
 8007cec:	e7f4      	b.n	8007cd8 <_dtoa_r+0x800>
 8007cee:	920a      	str	r2, [sp, #40]	; 0x28
 8007cf0:	e7f3      	b.n	8007cda <_dtoa_r+0x802>
 8007cf2:	d082      	beq.n	8007bfa <_dtoa_r+0x722>
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	301c      	adds	r0, #28
 8007cf8:	e778      	b.n	8007bec <_dtoa_r+0x714>
 8007cfa:	f1b9 0f00 	cmp.w	r9, #0
 8007cfe:	dc37      	bgt.n	8007d70 <_dtoa_r+0x898>
 8007d00:	9b06      	ldr	r3, [sp, #24]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	dd34      	ble.n	8007d70 <_dtoa_r+0x898>
 8007d06:	46ca      	mov	sl, r9
 8007d08:	f1ba 0f00 	cmp.w	sl, #0
 8007d0c:	d10d      	bne.n	8007d2a <_dtoa_r+0x852>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4653      	mov	r3, sl
 8007d12:	2205      	movs	r2, #5
 8007d14:	4630      	mov	r0, r6
 8007d16:	f000 fc0d 	bl	8008534 <__multadd>
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 fe28 	bl	8008974 <__mcmp>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	f73f adeb 	bgt.w	8007900 <_dtoa_r+0x428>
 8007d2a:	9b08      	ldr	r3, [sp, #32]
 8007d2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d30:	ea6f 0b03 	mvn.w	fp, r3
 8007d34:	f04f 0900 	mov.w	r9, #0
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f000 fbd8 	bl	80084f0 <_Bfree>
 8007d40:	2f00      	cmp	r7, #0
 8007d42:	f43f aea8 	beq.w	8007a96 <_dtoa_r+0x5be>
 8007d46:	f1b9 0f00 	cmp.w	r9, #0
 8007d4a:	d005      	beq.n	8007d58 <_dtoa_r+0x880>
 8007d4c:	45b9      	cmp	r9, r7
 8007d4e:	d003      	beq.n	8007d58 <_dtoa_r+0x880>
 8007d50:	4649      	mov	r1, r9
 8007d52:	4630      	mov	r0, r6
 8007d54:	f000 fbcc 	bl	80084f0 <_Bfree>
 8007d58:	4639      	mov	r1, r7
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f000 fbc8 	bl	80084f0 <_Bfree>
 8007d60:	e699      	b.n	8007a96 <_dtoa_r+0x5be>
 8007d62:	2400      	movs	r4, #0
 8007d64:	4627      	mov	r7, r4
 8007d66:	e7e0      	b.n	8007d2a <_dtoa_r+0x852>
 8007d68:	46bb      	mov	fp, r7
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	e5c7      	b.n	8007900 <_dtoa_r+0x428>
 8007d70:	9b07      	ldr	r3, [sp, #28]
 8007d72:	46ca      	mov	sl, r9
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8100 	beq.w	8007f7a <_dtoa_r+0xaa2>
 8007d7a:	f1b8 0f00 	cmp.w	r8, #0
 8007d7e:	dd05      	ble.n	8007d8c <_dtoa_r+0x8b4>
 8007d80:	4639      	mov	r1, r7
 8007d82:	4642      	mov	r2, r8
 8007d84:	4630      	mov	r0, r6
 8007d86:	f000 fd85 	bl	8008894 <__lshift>
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d05d      	beq.n	8007e4e <_dtoa_r+0x976>
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 fb6b 	bl	8008470 <_Balloc>
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	b928      	cbnz	r0, 8007daa <_dtoa_r+0x8d2>
 8007d9e:	4b82      	ldr	r3, [pc, #520]	; (8007fa8 <_dtoa_r+0xad0>)
 8007da0:	4602      	mov	r2, r0
 8007da2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007da6:	f7ff bbaf 	b.w	8007508 <_dtoa_r+0x30>
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	3202      	adds	r2, #2
 8007dae:	0092      	lsls	r2, r2, #2
 8007db0:	f107 010c 	add.w	r1, r7, #12
 8007db4:	300c      	adds	r0, #12
 8007db6:	f000 fb4d 	bl	8008454 <memcpy>
 8007dba:	2201      	movs	r2, #1
 8007dbc:	4641      	mov	r1, r8
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f000 fd68 	bl	8008894 <__lshift>
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	9304      	str	r3, [sp, #16]
 8007dca:	9b01      	ldr	r3, [sp, #4]
 8007dcc:	4453      	add	r3, sl
 8007dce:	9308      	str	r3, [sp, #32]
 8007dd0:	9b02      	ldr	r3, [sp, #8]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	46b9      	mov	r9, r7
 8007dd8:	9307      	str	r3, [sp, #28]
 8007dda:	4607      	mov	r7, r0
 8007ddc:	9b04      	ldr	r3, [sp, #16]
 8007dde:	4621      	mov	r1, r4
 8007de0:	3b01      	subs	r3, #1
 8007de2:	4628      	mov	r0, r5
 8007de4:	9302      	str	r3, [sp, #8]
 8007de6:	f7ff faeb 	bl	80073c0 <quorem>
 8007dea:	4603      	mov	r3, r0
 8007dec:	3330      	adds	r3, #48	; 0x30
 8007dee:	9005      	str	r0, [sp, #20]
 8007df0:	4649      	mov	r1, r9
 8007df2:	4628      	mov	r0, r5
 8007df4:	9309      	str	r3, [sp, #36]	; 0x24
 8007df6:	f000 fdbd 	bl	8008974 <__mcmp>
 8007dfa:	463a      	mov	r2, r7
 8007dfc:	4682      	mov	sl, r0
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4630      	mov	r0, r6
 8007e02:	f000 fdd3 	bl	80089ac <__mdiff>
 8007e06:	68c2      	ldr	r2, [r0, #12]
 8007e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e0a:	4680      	mov	r8, r0
 8007e0c:	bb0a      	cbnz	r2, 8007e52 <_dtoa_r+0x97a>
 8007e0e:	4601      	mov	r1, r0
 8007e10:	4628      	mov	r0, r5
 8007e12:	f000 fdaf 	bl	8008974 <__mcmp>
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	4602      	mov	r2, r0
 8007e1a:	4641      	mov	r1, r8
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007e22:	f000 fb65 	bl	80084f0 <_Bfree>
 8007e26:	9b06      	ldr	r3, [sp, #24]
 8007e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e2a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007e2e:	ea43 0102 	orr.w	r1, r3, r2
 8007e32:	9b07      	ldr	r3, [sp, #28]
 8007e34:	430b      	orrs	r3, r1
 8007e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e38:	d10d      	bne.n	8007e56 <_dtoa_r+0x97e>
 8007e3a:	2b39      	cmp	r3, #57	; 0x39
 8007e3c:	d029      	beq.n	8007e92 <_dtoa_r+0x9ba>
 8007e3e:	f1ba 0f00 	cmp.w	sl, #0
 8007e42:	dd01      	ble.n	8007e48 <_dtoa_r+0x970>
 8007e44:	9b05      	ldr	r3, [sp, #20]
 8007e46:	3331      	adds	r3, #49	; 0x31
 8007e48:	9a02      	ldr	r2, [sp, #8]
 8007e4a:	7013      	strb	r3, [r2, #0]
 8007e4c:	e774      	b.n	8007d38 <_dtoa_r+0x860>
 8007e4e:	4638      	mov	r0, r7
 8007e50:	e7b8      	b.n	8007dc4 <_dtoa_r+0x8ec>
 8007e52:	2201      	movs	r2, #1
 8007e54:	e7e1      	b.n	8007e1a <_dtoa_r+0x942>
 8007e56:	f1ba 0f00 	cmp.w	sl, #0
 8007e5a:	db06      	blt.n	8007e6a <_dtoa_r+0x992>
 8007e5c:	9906      	ldr	r1, [sp, #24]
 8007e5e:	ea41 0a0a 	orr.w	sl, r1, sl
 8007e62:	9907      	ldr	r1, [sp, #28]
 8007e64:	ea5a 0101 	orrs.w	r1, sl, r1
 8007e68:	d120      	bne.n	8007eac <_dtoa_r+0x9d4>
 8007e6a:	2a00      	cmp	r2, #0
 8007e6c:	ddec      	ble.n	8007e48 <_dtoa_r+0x970>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	2201      	movs	r2, #1
 8007e72:	4630      	mov	r0, r6
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	f000 fd0d 	bl	8008894 <__lshift>
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	f000 fd79 	bl	8008974 <__mcmp>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	dc02      	bgt.n	8007e8e <_dtoa_r+0x9b6>
 8007e88:	d1de      	bne.n	8007e48 <_dtoa_r+0x970>
 8007e8a:	07da      	lsls	r2, r3, #31
 8007e8c:	d5dc      	bpl.n	8007e48 <_dtoa_r+0x970>
 8007e8e:	2b39      	cmp	r3, #57	; 0x39
 8007e90:	d1d8      	bne.n	8007e44 <_dtoa_r+0x96c>
 8007e92:	9a02      	ldr	r2, [sp, #8]
 8007e94:	2339      	movs	r3, #57	; 0x39
 8007e96:	7013      	strb	r3, [r2, #0]
 8007e98:	4643      	mov	r3, r8
 8007e9a:	4698      	mov	r8, r3
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007ea2:	2a39      	cmp	r2, #57	; 0x39
 8007ea4:	d051      	beq.n	8007f4a <_dtoa_r+0xa72>
 8007ea6:	3201      	adds	r2, #1
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	e745      	b.n	8007d38 <_dtoa_r+0x860>
 8007eac:	2a00      	cmp	r2, #0
 8007eae:	dd03      	ble.n	8007eb8 <_dtoa_r+0x9e0>
 8007eb0:	2b39      	cmp	r3, #57	; 0x39
 8007eb2:	d0ee      	beq.n	8007e92 <_dtoa_r+0x9ba>
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	e7c7      	b.n	8007e48 <_dtoa_r+0x970>
 8007eb8:	9a04      	ldr	r2, [sp, #16]
 8007eba:	9908      	ldr	r1, [sp, #32]
 8007ebc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ec0:	428a      	cmp	r2, r1
 8007ec2:	d02b      	beq.n	8007f1c <_dtoa_r+0xa44>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	220a      	movs	r2, #10
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f000 fb32 	bl	8008534 <__multadd>
 8007ed0:	45b9      	cmp	r9, r7
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	f04f 0300 	mov.w	r3, #0
 8007ed8:	f04f 020a 	mov.w	r2, #10
 8007edc:	4649      	mov	r1, r9
 8007ede:	4630      	mov	r0, r6
 8007ee0:	d107      	bne.n	8007ef2 <_dtoa_r+0xa1a>
 8007ee2:	f000 fb27 	bl	8008534 <__multadd>
 8007ee6:	4681      	mov	r9, r0
 8007ee8:	4607      	mov	r7, r0
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	3301      	adds	r3, #1
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	e774      	b.n	8007ddc <_dtoa_r+0x904>
 8007ef2:	f000 fb1f 	bl	8008534 <__multadd>
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	4681      	mov	r9, r0
 8007efa:	2300      	movs	r3, #0
 8007efc:	220a      	movs	r2, #10
 8007efe:	4630      	mov	r0, r6
 8007f00:	f000 fb18 	bl	8008534 <__multadd>
 8007f04:	4607      	mov	r7, r0
 8007f06:	e7f0      	b.n	8007eea <_dtoa_r+0xa12>
 8007f08:	f1ba 0f00 	cmp.w	sl, #0
 8007f0c:	9a01      	ldr	r2, [sp, #4]
 8007f0e:	bfcc      	ite	gt
 8007f10:	46d0      	movgt	r8, sl
 8007f12:	f04f 0801 	movle.w	r8, #1
 8007f16:	4490      	add	r8, r2
 8007f18:	f04f 0900 	mov.w	r9, #0
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	2201      	movs	r2, #1
 8007f20:	4630      	mov	r0, r6
 8007f22:	9302      	str	r3, [sp, #8]
 8007f24:	f000 fcb6 	bl	8008894 <__lshift>
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4605      	mov	r5, r0
 8007f2c:	f000 fd22 	bl	8008974 <__mcmp>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	dcb1      	bgt.n	8007e98 <_dtoa_r+0x9c0>
 8007f34:	d102      	bne.n	8007f3c <_dtoa_r+0xa64>
 8007f36:	9b02      	ldr	r3, [sp, #8]
 8007f38:	07db      	lsls	r3, r3, #31
 8007f3a:	d4ad      	bmi.n	8007e98 <_dtoa_r+0x9c0>
 8007f3c:	4643      	mov	r3, r8
 8007f3e:	4698      	mov	r8, r3
 8007f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f44:	2a30      	cmp	r2, #48	; 0x30
 8007f46:	d0fa      	beq.n	8007f3e <_dtoa_r+0xa66>
 8007f48:	e6f6      	b.n	8007d38 <_dtoa_r+0x860>
 8007f4a:	9a01      	ldr	r2, [sp, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d1a4      	bne.n	8007e9a <_dtoa_r+0x9c2>
 8007f50:	f10b 0b01 	add.w	fp, fp, #1
 8007f54:	2331      	movs	r3, #49	; 0x31
 8007f56:	e778      	b.n	8007e4a <_dtoa_r+0x972>
 8007f58:	4b14      	ldr	r3, [pc, #80]	; (8007fac <_dtoa_r+0xad4>)
 8007f5a:	f7ff bb27 	b.w	80075ac <_dtoa_r+0xd4>
 8007f5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f47f ab03 	bne.w	800756c <_dtoa_r+0x94>
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <_dtoa_r+0xad8>)
 8007f68:	f7ff bb20 	b.w	80075ac <_dtoa_r+0xd4>
 8007f6c:	f1ba 0f00 	cmp.w	sl, #0
 8007f70:	dc03      	bgt.n	8007f7a <_dtoa_r+0xaa2>
 8007f72:	9b06      	ldr	r3, [sp, #24]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	f73f aec7 	bgt.w	8007d08 <_dtoa_r+0x830>
 8007f7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f7ff fa1d 	bl	80073c0 <quorem>
 8007f86:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f8a:	f808 3b01 	strb.w	r3, [r8], #1
 8007f8e:	9a01      	ldr	r2, [sp, #4]
 8007f90:	eba8 0202 	sub.w	r2, r8, r2
 8007f94:	4592      	cmp	sl, r2
 8007f96:	ddb7      	ble.n	8007f08 <_dtoa_r+0xa30>
 8007f98:	4629      	mov	r1, r5
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	220a      	movs	r2, #10
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f000 fac8 	bl	8008534 <__multadd>
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	e7ea      	b.n	8007f7e <_dtoa_r+0xaa6>
 8007fa8:	0800947e 	.word	0x0800947e
 8007fac:	08009344 	.word	0x08009344
 8007fb0:	08009416 	.word	0x08009416

08007fb4 <__sflush_r>:
 8007fb4:	898a      	ldrh	r2, [r1, #12]
 8007fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fba:	4605      	mov	r5, r0
 8007fbc:	0710      	lsls	r0, r2, #28
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	d458      	bmi.n	8008074 <__sflush_r+0xc0>
 8007fc2:	684b      	ldr	r3, [r1, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	dc05      	bgt.n	8007fd4 <__sflush_r+0x20>
 8007fc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	dc02      	bgt.n	8007fd4 <__sflush_r+0x20>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fd6:	2e00      	cmp	r6, #0
 8007fd8:	d0f9      	beq.n	8007fce <__sflush_r+0x1a>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fe0:	682f      	ldr	r7, [r5, #0]
 8007fe2:	602b      	str	r3, [r5, #0]
 8007fe4:	d032      	beq.n	800804c <__sflush_r+0x98>
 8007fe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	075a      	lsls	r2, r3, #29
 8007fec:	d505      	bpl.n	8007ffa <__sflush_r+0x46>
 8007fee:	6863      	ldr	r3, [r4, #4]
 8007ff0:	1ac0      	subs	r0, r0, r3
 8007ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ff4:	b10b      	cbz	r3, 8007ffa <__sflush_r+0x46>
 8007ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ff8:	1ac0      	subs	r0, r0, r3
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008000:	6a21      	ldr	r1, [r4, #32]
 8008002:	4628      	mov	r0, r5
 8008004:	47b0      	blx	r6
 8008006:	1c43      	adds	r3, r0, #1
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	d106      	bne.n	800801a <__sflush_r+0x66>
 800800c:	6829      	ldr	r1, [r5, #0]
 800800e:	291d      	cmp	r1, #29
 8008010:	d82c      	bhi.n	800806c <__sflush_r+0xb8>
 8008012:	4a2a      	ldr	r2, [pc, #168]	; (80080bc <__sflush_r+0x108>)
 8008014:	40ca      	lsrs	r2, r1
 8008016:	07d6      	lsls	r6, r2, #31
 8008018:	d528      	bpl.n	800806c <__sflush_r+0xb8>
 800801a:	2200      	movs	r2, #0
 800801c:	6062      	str	r2, [r4, #4]
 800801e:	04d9      	lsls	r1, r3, #19
 8008020:	6922      	ldr	r2, [r4, #16]
 8008022:	6022      	str	r2, [r4, #0]
 8008024:	d504      	bpl.n	8008030 <__sflush_r+0x7c>
 8008026:	1c42      	adds	r2, r0, #1
 8008028:	d101      	bne.n	800802e <__sflush_r+0x7a>
 800802a:	682b      	ldr	r3, [r5, #0]
 800802c:	b903      	cbnz	r3, 8008030 <__sflush_r+0x7c>
 800802e:	6560      	str	r0, [r4, #84]	; 0x54
 8008030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008032:	602f      	str	r7, [r5, #0]
 8008034:	2900      	cmp	r1, #0
 8008036:	d0ca      	beq.n	8007fce <__sflush_r+0x1a>
 8008038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800803c:	4299      	cmp	r1, r3
 800803e:	d002      	beq.n	8008046 <__sflush_r+0x92>
 8008040:	4628      	mov	r0, r5
 8008042:	f000 fdaf 	bl	8008ba4 <_free_r>
 8008046:	2000      	movs	r0, #0
 8008048:	6360      	str	r0, [r4, #52]	; 0x34
 800804a:	e7c1      	b.n	8007fd0 <__sflush_r+0x1c>
 800804c:	6a21      	ldr	r1, [r4, #32]
 800804e:	2301      	movs	r3, #1
 8008050:	4628      	mov	r0, r5
 8008052:	47b0      	blx	r6
 8008054:	1c41      	adds	r1, r0, #1
 8008056:	d1c7      	bne.n	8007fe8 <__sflush_r+0x34>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0c4      	beq.n	8007fe8 <__sflush_r+0x34>
 800805e:	2b1d      	cmp	r3, #29
 8008060:	d001      	beq.n	8008066 <__sflush_r+0xb2>
 8008062:	2b16      	cmp	r3, #22
 8008064:	d101      	bne.n	800806a <__sflush_r+0xb6>
 8008066:	602f      	str	r7, [r5, #0]
 8008068:	e7b1      	b.n	8007fce <__sflush_r+0x1a>
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	e7ad      	b.n	8007fd0 <__sflush_r+0x1c>
 8008074:	690f      	ldr	r7, [r1, #16]
 8008076:	2f00      	cmp	r7, #0
 8008078:	d0a9      	beq.n	8007fce <__sflush_r+0x1a>
 800807a:	0793      	lsls	r3, r2, #30
 800807c:	680e      	ldr	r6, [r1, #0]
 800807e:	bf08      	it	eq
 8008080:	694b      	ldreq	r3, [r1, #20]
 8008082:	600f      	str	r7, [r1, #0]
 8008084:	bf18      	it	ne
 8008086:	2300      	movne	r3, #0
 8008088:	eba6 0807 	sub.w	r8, r6, r7
 800808c:	608b      	str	r3, [r1, #8]
 800808e:	f1b8 0f00 	cmp.w	r8, #0
 8008092:	dd9c      	ble.n	8007fce <__sflush_r+0x1a>
 8008094:	6a21      	ldr	r1, [r4, #32]
 8008096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008098:	4643      	mov	r3, r8
 800809a:	463a      	mov	r2, r7
 800809c:	4628      	mov	r0, r5
 800809e:	47b0      	blx	r6
 80080a0:	2800      	cmp	r0, #0
 80080a2:	dc06      	bgt.n	80080b2 <__sflush_r+0xfe>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	e78e      	b.n	8007fd0 <__sflush_r+0x1c>
 80080b2:	4407      	add	r7, r0
 80080b4:	eba8 0800 	sub.w	r8, r8, r0
 80080b8:	e7e9      	b.n	800808e <__sflush_r+0xda>
 80080ba:	bf00      	nop
 80080bc:	20400001 	.word	0x20400001

080080c0 <_fflush_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	690b      	ldr	r3, [r1, #16]
 80080c4:	4605      	mov	r5, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	b913      	cbnz	r3, 80080d0 <_fflush_r+0x10>
 80080ca:	2500      	movs	r5, #0
 80080cc:	4628      	mov	r0, r5
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	b118      	cbz	r0, 80080da <_fflush_r+0x1a>
 80080d2:	6983      	ldr	r3, [r0, #24]
 80080d4:	b90b      	cbnz	r3, 80080da <_fflush_r+0x1a>
 80080d6:	f000 f887 	bl	80081e8 <__sinit>
 80080da:	4b14      	ldr	r3, [pc, #80]	; (800812c <_fflush_r+0x6c>)
 80080dc:	429c      	cmp	r4, r3
 80080de:	d11b      	bne.n	8008118 <_fflush_r+0x58>
 80080e0:	686c      	ldr	r4, [r5, #4]
 80080e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0ef      	beq.n	80080ca <_fflush_r+0xa>
 80080ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080ec:	07d0      	lsls	r0, r2, #31
 80080ee:	d404      	bmi.n	80080fa <_fflush_r+0x3a>
 80080f0:	0599      	lsls	r1, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_fflush_r+0x3a>
 80080f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080f6:	f000 f93e 	bl	8008376 <__retarget_lock_acquire_recursive>
 80080fa:	4628      	mov	r0, r5
 80080fc:	4621      	mov	r1, r4
 80080fe:	f7ff ff59 	bl	8007fb4 <__sflush_r>
 8008102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008104:	07da      	lsls	r2, r3, #31
 8008106:	4605      	mov	r5, r0
 8008108:	d4e0      	bmi.n	80080cc <_fflush_r+0xc>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	059b      	lsls	r3, r3, #22
 800810e:	d4dd      	bmi.n	80080cc <_fflush_r+0xc>
 8008110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008112:	f000 f931 	bl	8008378 <__retarget_lock_release_recursive>
 8008116:	e7d9      	b.n	80080cc <_fflush_r+0xc>
 8008118:	4b05      	ldr	r3, [pc, #20]	; (8008130 <_fflush_r+0x70>)
 800811a:	429c      	cmp	r4, r3
 800811c:	d101      	bne.n	8008122 <_fflush_r+0x62>
 800811e:	68ac      	ldr	r4, [r5, #8]
 8008120:	e7df      	b.n	80080e2 <_fflush_r+0x22>
 8008122:	4b04      	ldr	r3, [pc, #16]	; (8008134 <_fflush_r+0x74>)
 8008124:	429c      	cmp	r4, r3
 8008126:	bf08      	it	eq
 8008128:	68ec      	ldreq	r4, [r5, #12]
 800812a:	e7da      	b.n	80080e2 <_fflush_r+0x22>
 800812c:	080094b0 	.word	0x080094b0
 8008130:	080094d0 	.word	0x080094d0
 8008134:	08009490 	.word	0x08009490

08008138 <std>:
 8008138:	2300      	movs	r3, #0
 800813a:	b510      	push	{r4, lr}
 800813c:	4604      	mov	r4, r0
 800813e:	e9c0 3300 	strd	r3, r3, [r0]
 8008142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008146:	6083      	str	r3, [r0, #8]
 8008148:	8181      	strh	r1, [r0, #12]
 800814a:	6643      	str	r3, [r0, #100]	; 0x64
 800814c:	81c2      	strh	r2, [r0, #14]
 800814e:	6183      	str	r3, [r0, #24]
 8008150:	4619      	mov	r1, r3
 8008152:	2208      	movs	r2, #8
 8008154:	305c      	adds	r0, #92	; 0x5c
 8008156:	f7fe faf5 	bl	8006744 <memset>
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <std+0x38>)
 800815c:	6263      	str	r3, [r4, #36]	; 0x24
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <std+0x3c>)
 8008160:	62a3      	str	r3, [r4, #40]	; 0x28
 8008162:	4b05      	ldr	r3, [pc, #20]	; (8008178 <std+0x40>)
 8008164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008166:	4b05      	ldr	r3, [pc, #20]	; (800817c <std+0x44>)
 8008168:	6224      	str	r4, [r4, #32]
 800816a:	6323      	str	r3, [r4, #48]	; 0x30
 800816c:	bd10      	pop	{r4, pc}
 800816e:	bf00      	nop
 8008170:	08009039 	.word	0x08009039
 8008174:	0800905b 	.word	0x0800905b
 8008178:	08009093 	.word	0x08009093
 800817c:	080090b7 	.word	0x080090b7

08008180 <_cleanup_r>:
 8008180:	4901      	ldr	r1, [pc, #4]	; (8008188 <_cleanup_r+0x8>)
 8008182:	f000 b8c1 	b.w	8008308 <_fwalk_reent>
 8008186:	bf00      	nop
 8008188:	080080c1 	.word	0x080080c1

0800818c <__sfmoreglue>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	2268      	movs	r2, #104	; 0x68
 8008190:	1e4d      	subs	r5, r1, #1
 8008192:	4355      	muls	r5, r2
 8008194:	460e      	mov	r6, r1
 8008196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800819a:	f000 fd6f 	bl	8008c7c <_malloc_r>
 800819e:	4604      	mov	r4, r0
 80081a0:	b140      	cbz	r0, 80081b4 <__sfmoreglue+0x28>
 80081a2:	2100      	movs	r1, #0
 80081a4:	e9c0 1600 	strd	r1, r6, [r0]
 80081a8:	300c      	adds	r0, #12
 80081aa:	60a0      	str	r0, [r4, #8]
 80081ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081b0:	f7fe fac8 	bl	8006744 <memset>
 80081b4:	4620      	mov	r0, r4
 80081b6:	bd70      	pop	{r4, r5, r6, pc}

080081b8 <__sfp_lock_acquire>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__sfp_lock_acquire+0x8>)
 80081ba:	f000 b8dc 	b.w	8008376 <__retarget_lock_acquire_recursive>
 80081be:	bf00      	nop
 80081c0:	24000951 	.word	0x24000951

080081c4 <__sfp_lock_release>:
 80081c4:	4801      	ldr	r0, [pc, #4]	; (80081cc <__sfp_lock_release+0x8>)
 80081c6:	f000 b8d7 	b.w	8008378 <__retarget_lock_release_recursive>
 80081ca:	bf00      	nop
 80081cc:	24000951 	.word	0x24000951

080081d0 <__sinit_lock_acquire>:
 80081d0:	4801      	ldr	r0, [pc, #4]	; (80081d8 <__sinit_lock_acquire+0x8>)
 80081d2:	f000 b8d0 	b.w	8008376 <__retarget_lock_acquire_recursive>
 80081d6:	bf00      	nop
 80081d8:	24000952 	.word	0x24000952

080081dc <__sinit_lock_release>:
 80081dc:	4801      	ldr	r0, [pc, #4]	; (80081e4 <__sinit_lock_release+0x8>)
 80081de:	f000 b8cb 	b.w	8008378 <__retarget_lock_release_recursive>
 80081e2:	bf00      	nop
 80081e4:	24000952 	.word	0x24000952

080081e8 <__sinit>:
 80081e8:	b510      	push	{r4, lr}
 80081ea:	4604      	mov	r4, r0
 80081ec:	f7ff fff0 	bl	80081d0 <__sinit_lock_acquire>
 80081f0:	69a3      	ldr	r3, [r4, #24]
 80081f2:	b11b      	cbz	r3, 80081fc <__sinit+0x14>
 80081f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f8:	f7ff bff0 	b.w	80081dc <__sinit_lock_release>
 80081fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008200:	6523      	str	r3, [r4, #80]	; 0x50
 8008202:	4b13      	ldr	r3, [pc, #76]	; (8008250 <__sinit+0x68>)
 8008204:	4a13      	ldr	r2, [pc, #76]	; (8008254 <__sinit+0x6c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	62a2      	str	r2, [r4, #40]	; 0x28
 800820a:	42a3      	cmp	r3, r4
 800820c:	bf04      	itt	eq
 800820e:	2301      	moveq	r3, #1
 8008210:	61a3      	streq	r3, [r4, #24]
 8008212:	4620      	mov	r0, r4
 8008214:	f000 f820 	bl	8008258 <__sfp>
 8008218:	6060      	str	r0, [r4, #4]
 800821a:	4620      	mov	r0, r4
 800821c:	f000 f81c 	bl	8008258 <__sfp>
 8008220:	60a0      	str	r0, [r4, #8]
 8008222:	4620      	mov	r0, r4
 8008224:	f000 f818 	bl	8008258 <__sfp>
 8008228:	2200      	movs	r2, #0
 800822a:	60e0      	str	r0, [r4, #12]
 800822c:	2104      	movs	r1, #4
 800822e:	6860      	ldr	r0, [r4, #4]
 8008230:	f7ff ff82 	bl	8008138 <std>
 8008234:	68a0      	ldr	r0, [r4, #8]
 8008236:	2201      	movs	r2, #1
 8008238:	2109      	movs	r1, #9
 800823a:	f7ff ff7d 	bl	8008138 <std>
 800823e:	68e0      	ldr	r0, [r4, #12]
 8008240:	2202      	movs	r2, #2
 8008242:	2112      	movs	r1, #18
 8008244:	f7ff ff78 	bl	8008138 <std>
 8008248:	2301      	movs	r3, #1
 800824a:	61a3      	str	r3, [r4, #24]
 800824c:	e7d2      	b.n	80081f4 <__sinit+0xc>
 800824e:	bf00      	nop
 8008250:	08009330 	.word	0x08009330
 8008254:	08008181 	.word	0x08008181

08008258 <__sfp>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	4607      	mov	r7, r0
 800825c:	f7ff ffac 	bl	80081b8 <__sfp_lock_acquire>
 8008260:	4b1e      	ldr	r3, [pc, #120]	; (80082dc <__sfp+0x84>)
 8008262:	681e      	ldr	r6, [r3, #0]
 8008264:	69b3      	ldr	r3, [r6, #24]
 8008266:	b913      	cbnz	r3, 800826e <__sfp+0x16>
 8008268:	4630      	mov	r0, r6
 800826a:	f7ff ffbd 	bl	80081e8 <__sinit>
 800826e:	3648      	adds	r6, #72	; 0x48
 8008270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008274:	3b01      	subs	r3, #1
 8008276:	d503      	bpl.n	8008280 <__sfp+0x28>
 8008278:	6833      	ldr	r3, [r6, #0]
 800827a:	b30b      	cbz	r3, 80082c0 <__sfp+0x68>
 800827c:	6836      	ldr	r6, [r6, #0]
 800827e:	e7f7      	b.n	8008270 <__sfp+0x18>
 8008280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008284:	b9d5      	cbnz	r5, 80082bc <__sfp+0x64>
 8008286:	4b16      	ldr	r3, [pc, #88]	; (80082e0 <__sfp+0x88>)
 8008288:	60e3      	str	r3, [r4, #12]
 800828a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800828e:	6665      	str	r5, [r4, #100]	; 0x64
 8008290:	f000 f870 	bl	8008374 <__retarget_lock_init_recursive>
 8008294:	f7ff ff96 	bl	80081c4 <__sfp_lock_release>
 8008298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800829c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082a0:	6025      	str	r5, [r4, #0]
 80082a2:	61a5      	str	r5, [r4, #24]
 80082a4:	2208      	movs	r2, #8
 80082a6:	4629      	mov	r1, r5
 80082a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082ac:	f7fe fa4a 	bl	8006744 <memset>
 80082b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082b8:	4620      	mov	r0, r4
 80082ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082bc:	3468      	adds	r4, #104	; 0x68
 80082be:	e7d9      	b.n	8008274 <__sfp+0x1c>
 80082c0:	2104      	movs	r1, #4
 80082c2:	4638      	mov	r0, r7
 80082c4:	f7ff ff62 	bl	800818c <__sfmoreglue>
 80082c8:	4604      	mov	r4, r0
 80082ca:	6030      	str	r0, [r6, #0]
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d1d5      	bne.n	800827c <__sfp+0x24>
 80082d0:	f7ff ff78 	bl	80081c4 <__sfp_lock_release>
 80082d4:	230c      	movs	r3, #12
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	e7ee      	b.n	80082b8 <__sfp+0x60>
 80082da:	bf00      	nop
 80082dc:	08009330 	.word	0x08009330
 80082e0:	ffff0001 	.word	0xffff0001

080082e4 <fiprintf>:
 80082e4:	b40e      	push	{r1, r2, r3}
 80082e6:	b503      	push	{r0, r1, lr}
 80082e8:	4601      	mov	r1, r0
 80082ea:	ab03      	add	r3, sp, #12
 80082ec:	4805      	ldr	r0, [pc, #20]	; (8008304 <fiprintf+0x20>)
 80082ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f2:	6800      	ldr	r0, [r0, #0]
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	f000 fd5f 	bl	8008db8 <_vfiprintf_r>
 80082fa:	b002      	add	sp, #8
 80082fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008300:	b003      	add	sp, #12
 8008302:	4770      	bx	lr
 8008304:	24000010 	.word	0x24000010

08008308 <_fwalk_reent>:
 8008308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800830c:	4606      	mov	r6, r0
 800830e:	4688      	mov	r8, r1
 8008310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008314:	2700      	movs	r7, #0
 8008316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800831a:	f1b9 0901 	subs.w	r9, r9, #1
 800831e:	d505      	bpl.n	800832c <_fwalk_reent+0x24>
 8008320:	6824      	ldr	r4, [r4, #0]
 8008322:	2c00      	cmp	r4, #0
 8008324:	d1f7      	bne.n	8008316 <_fwalk_reent+0xe>
 8008326:	4638      	mov	r0, r7
 8008328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800832c:	89ab      	ldrh	r3, [r5, #12]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d907      	bls.n	8008342 <_fwalk_reent+0x3a>
 8008332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008336:	3301      	adds	r3, #1
 8008338:	d003      	beq.n	8008342 <_fwalk_reent+0x3a>
 800833a:	4629      	mov	r1, r5
 800833c:	4630      	mov	r0, r6
 800833e:	47c0      	blx	r8
 8008340:	4307      	orrs	r7, r0
 8008342:	3568      	adds	r5, #104	; 0x68
 8008344:	e7e9      	b.n	800831a <_fwalk_reent+0x12>
	...

08008348 <_gettimeofday_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d07      	ldr	r5, [pc, #28]	; (8008368 <_gettimeofday_r+0x20>)
 800834c:	2300      	movs	r3, #0
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	4611      	mov	r1, r2
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	f000 ff93 	bl	8009280 <_gettimeofday>
 800835a:	1c43      	adds	r3, r0, #1
 800835c:	d102      	bne.n	8008364 <_gettimeofday_r+0x1c>
 800835e:	682b      	ldr	r3, [r5, #0]
 8008360:	b103      	cbz	r3, 8008364 <_gettimeofday_r+0x1c>
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	bd38      	pop	{r3, r4, r5, pc}
 8008366:	bf00      	nop
 8008368:	2400095c 	.word	0x2400095c

0800836c <_localeconv_r>:
 800836c:	4800      	ldr	r0, [pc, #0]	; (8008370 <_localeconv_r+0x4>)
 800836e:	4770      	bx	lr
 8008370:	24000164 	.word	0x24000164

08008374 <__retarget_lock_init_recursive>:
 8008374:	4770      	bx	lr

08008376 <__retarget_lock_acquire_recursive>:
 8008376:	4770      	bx	lr

08008378 <__retarget_lock_release_recursive>:
 8008378:	4770      	bx	lr

0800837a <__swhatbuf_r>:
 800837a:	b570      	push	{r4, r5, r6, lr}
 800837c:	460e      	mov	r6, r1
 800837e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008382:	2900      	cmp	r1, #0
 8008384:	b096      	sub	sp, #88	; 0x58
 8008386:	4614      	mov	r4, r2
 8008388:	461d      	mov	r5, r3
 800838a:	da08      	bge.n	800839e <__swhatbuf_r+0x24>
 800838c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	602a      	str	r2, [r5, #0]
 8008394:	061a      	lsls	r2, r3, #24
 8008396:	d410      	bmi.n	80083ba <__swhatbuf_r+0x40>
 8008398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800839c:	e00e      	b.n	80083bc <__swhatbuf_r+0x42>
 800839e:	466a      	mov	r2, sp
 80083a0:	f000 feb8 	bl	8009114 <_fstat_r>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	dbf1      	blt.n	800838c <__swhatbuf_r+0x12>
 80083a8:	9a01      	ldr	r2, [sp, #4]
 80083aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083b2:	425a      	negs	r2, r3
 80083b4:	415a      	adcs	r2, r3
 80083b6:	602a      	str	r2, [r5, #0]
 80083b8:	e7ee      	b.n	8008398 <__swhatbuf_r+0x1e>
 80083ba:	2340      	movs	r3, #64	; 0x40
 80083bc:	2000      	movs	r0, #0
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	b016      	add	sp, #88	; 0x58
 80083c2:	bd70      	pop	{r4, r5, r6, pc}

080083c4 <__smakebuf_r>:
 80083c4:	898b      	ldrh	r3, [r1, #12]
 80083c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083c8:	079d      	lsls	r5, r3, #30
 80083ca:	4606      	mov	r6, r0
 80083cc:	460c      	mov	r4, r1
 80083ce:	d507      	bpl.n	80083e0 <__smakebuf_r+0x1c>
 80083d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	6123      	str	r3, [r4, #16]
 80083d8:	2301      	movs	r3, #1
 80083da:	6163      	str	r3, [r4, #20]
 80083dc:	b002      	add	sp, #8
 80083de:	bd70      	pop	{r4, r5, r6, pc}
 80083e0:	ab01      	add	r3, sp, #4
 80083e2:	466a      	mov	r2, sp
 80083e4:	f7ff ffc9 	bl	800837a <__swhatbuf_r>
 80083e8:	9900      	ldr	r1, [sp, #0]
 80083ea:	4605      	mov	r5, r0
 80083ec:	4630      	mov	r0, r6
 80083ee:	f000 fc45 	bl	8008c7c <_malloc_r>
 80083f2:	b948      	cbnz	r0, 8008408 <__smakebuf_r+0x44>
 80083f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f8:	059a      	lsls	r2, r3, #22
 80083fa:	d4ef      	bmi.n	80083dc <__smakebuf_r+0x18>
 80083fc:	f023 0303 	bic.w	r3, r3, #3
 8008400:	f043 0302 	orr.w	r3, r3, #2
 8008404:	81a3      	strh	r3, [r4, #12]
 8008406:	e7e3      	b.n	80083d0 <__smakebuf_r+0xc>
 8008408:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <__smakebuf_r+0x7c>)
 800840a:	62b3      	str	r3, [r6, #40]	; 0x28
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	6020      	str	r0, [r4, #0]
 8008410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	9b00      	ldr	r3, [sp, #0]
 8008418:	6163      	str	r3, [r4, #20]
 800841a:	9b01      	ldr	r3, [sp, #4]
 800841c:	6120      	str	r0, [r4, #16]
 800841e:	b15b      	cbz	r3, 8008438 <__smakebuf_r+0x74>
 8008420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008424:	4630      	mov	r0, r6
 8008426:	f000 fe87 	bl	8009138 <_isatty_r>
 800842a:	b128      	cbz	r0, 8008438 <__smakebuf_r+0x74>
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	f023 0303 	bic.w	r3, r3, #3
 8008432:	f043 0301 	orr.w	r3, r3, #1
 8008436:	81a3      	strh	r3, [r4, #12]
 8008438:	89a0      	ldrh	r0, [r4, #12]
 800843a:	4305      	orrs	r5, r0
 800843c:	81a5      	strh	r5, [r4, #12]
 800843e:	e7cd      	b.n	80083dc <__smakebuf_r+0x18>
 8008440:	08008181 	.word	0x08008181

08008444 <malloc>:
 8008444:	4b02      	ldr	r3, [pc, #8]	; (8008450 <malloc+0xc>)
 8008446:	4601      	mov	r1, r0
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	f000 bc17 	b.w	8008c7c <_malloc_r>
 800844e:	bf00      	nop
 8008450:	24000010 	.word	0x24000010

08008454 <memcpy>:
 8008454:	440a      	add	r2, r1
 8008456:	4291      	cmp	r1, r2
 8008458:	f100 33ff 	add.w	r3, r0, #4294967295
 800845c:	d100      	bne.n	8008460 <memcpy+0xc>
 800845e:	4770      	bx	lr
 8008460:	b510      	push	{r4, lr}
 8008462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800846a:	4291      	cmp	r1, r2
 800846c:	d1f9      	bne.n	8008462 <memcpy+0xe>
 800846e:	bd10      	pop	{r4, pc}

08008470 <_Balloc>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008474:	4604      	mov	r4, r0
 8008476:	460d      	mov	r5, r1
 8008478:	b976      	cbnz	r6, 8008498 <_Balloc+0x28>
 800847a:	2010      	movs	r0, #16
 800847c:	f7ff ffe2 	bl	8008444 <malloc>
 8008480:	4602      	mov	r2, r0
 8008482:	6260      	str	r0, [r4, #36]	; 0x24
 8008484:	b920      	cbnz	r0, 8008490 <_Balloc+0x20>
 8008486:	4b18      	ldr	r3, [pc, #96]	; (80084e8 <_Balloc+0x78>)
 8008488:	4818      	ldr	r0, [pc, #96]	; (80084ec <_Balloc+0x7c>)
 800848a:	2166      	movs	r1, #102	; 0x66
 800848c:	f7fe ff7a 	bl	8007384 <__assert_func>
 8008490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008494:	6006      	str	r6, [r0, #0]
 8008496:	60c6      	str	r6, [r0, #12]
 8008498:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800849a:	68f3      	ldr	r3, [r6, #12]
 800849c:	b183      	cbz	r3, 80084c0 <_Balloc+0x50>
 800849e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084a6:	b9b8      	cbnz	r0, 80084d8 <_Balloc+0x68>
 80084a8:	2101      	movs	r1, #1
 80084aa:	fa01 f605 	lsl.w	r6, r1, r5
 80084ae:	1d72      	adds	r2, r6, #5
 80084b0:	0092      	lsls	r2, r2, #2
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 fb60 	bl	8008b78 <_calloc_r>
 80084b8:	b160      	cbz	r0, 80084d4 <_Balloc+0x64>
 80084ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084be:	e00e      	b.n	80084de <_Balloc+0x6e>
 80084c0:	2221      	movs	r2, #33	; 0x21
 80084c2:	2104      	movs	r1, #4
 80084c4:	4620      	mov	r0, r4
 80084c6:	f000 fb57 	bl	8008b78 <_calloc_r>
 80084ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084cc:	60f0      	str	r0, [r6, #12]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e4      	bne.n	800849e <_Balloc+0x2e>
 80084d4:	2000      	movs	r0, #0
 80084d6:	bd70      	pop	{r4, r5, r6, pc}
 80084d8:	6802      	ldr	r2, [r0, #0]
 80084da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084de:	2300      	movs	r3, #0
 80084e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084e4:	e7f7      	b.n	80084d6 <_Balloc+0x66>
 80084e6:	bf00      	nop
 80084e8:	08009368 	.word	0x08009368
 80084ec:	080094f0 	.word	0x080094f0

080084f0 <_Bfree>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084f4:	4605      	mov	r5, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	b976      	cbnz	r6, 8008518 <_Bfree+0x28>
 80084fa:	2010      	movs	r0, #16
 80084fc:	f7ff ffa2 	bl	8008444 <malloc>
 8008500:	4602      	mov	r2, r0
 8008502:	6268      	str	r0, [r5, #36]	; 0x24
 8008504:	b920      	cbnz	r0, 8008510 <_Bfree+0x20>
 8008506:	4b09      	ldr	r3, [pc, #36]	; (800852c <_Bfree+0x3c>)
 8008508:	4809      	ldr	r0, [pc, #36]	; (8008530 <_Bfree+0x40>)
 800850a:	218a      	movs	r1, #138	; 0x8a
 800850c:	f7fe ff3a 	bl	8007384 <__assert_func>
 8008510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008514:	6006      	str	r6, [r0, #0]
 8008516:	60c6      	str	r6, [r0, #12]
 8008518:	b13c      	cbz	r4, 800852a <_Bfree+0x3a>
 800851a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800851c:	6862      	ldr	r2, [r4, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008524:	6021      	str	r1, [r4, #0]
 8008526:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800852a:	bd70      	pop	{r4, r5, r6, pc}
 800852c:	08009368 	.word	0x08009368
 8008530:	080094f0 	.word	0x080094f0

08008534 <__multadd>:
 8008534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	690d      	ldr	r5, [r1, #16]
 800853a:	4607      	mov	r7, r0
 800853c:	460c      	mov	r4, r1
 800853e:	461e      	mov	r6, r3
 8008540:	f101 0c14 	add.w	ip, r1, #20
 8008544:	2000      	movs	r0, #0
 8008546:	f8dc 3000 	ldr.w	r3, [ip]
 800854a:	b299      	uxth	r1, r3
 800854c:	fb02 6101 	mla	r1, r2, r1, r6
 8008550:	0c1e      	lsrs	r6, r3, #16
 8008552:	0c0b      	lsrs	r3, r1, #16
 8008554:	fb02 3306 	mla	r3, r2, r6, r3
 8008558:	b289      	uxth	r1, r1
 800855a:	3001      	adds	r0, #1
 800855c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008560:	4285      	cmp	r5, r0
 8008562:	f84c 1b04 	str.w	r1, [ip], #4
 8008566:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800856a:	dcec      	bgt.n	8008546 <__multadd+0x12>
 800856c:	b30e      	cbz	r6, 80085b2 <__multadd+0x7e>
 800856e:	68a3      	ldr	r3, [r4, #8]
 8008570:	42ab      	cmp	r3, r5
 8008572:	dc19      	bgt.n	80085a8 <__multadd+0x74>
 8008574:	6861      	ldr	r1, [r4, #4]
 8008576:	4638      	mov	r0, r7
 8008578:	3101      	adds	r1, #1
 800857a:	f7ff ff79 	bl	8008470 <_Balloc>
 800857e:	4680      	mov	r8, r0
 8008580:	b928      	cbnz	r0, 800858e <__multadd+0x5a>
 8008582:	4602      	mov	r2, r0
 8008584:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <__multadd+0x84>)
 8008586:	480d      	ldr	r0, [pc, #52]	; (80085bc <__multadd+0x88>)
 8008588:	21b5      	movs	r1, #181	; 0xb5
 800858a:	f7fe fefb 	bl	8007384 <__assert_func>
 800858e:	6922      	ldr	r2, [r4, #16]
 8008590:	3202      	adds	r2, #2
 8008592:	f104 010c 	add.w	r1, r4, #12
 8008596:	0092      	lsls	r2, r2, #2
 8008598:	300c      	adds	r0, #12
 800859a:	f7ff ff5b 	bl	8008454 <memcpy>
 800859e:	4621      	mov	r1, r4
 80085a0:	4638      	mov	r0, r7
 80085a2:	f7ff ffa5 	bl	80084f0 <_Bfree>
 80085a6:	4644      	mov	r4, r8
 80085a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085ac:	3501      	adds	r5, #1
 80085ae:	615e      	str	r6, [r3, #20]
 80085b0:	6125      	str	r5, [r4, #16]
 80085b2:	4620      	mov	r0, r4
 80085b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b8:	0800947e 	.word	0x0800947e
 80085bc:	080094f0 	.word	0x080094f0

080085c0 <__hi0bits>:
 80085c0:	0c03      	lsrs	r3, r0, #16
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	b9d3      	cbnz	r3, 80085fc <__hi0bits+0x3c>
 80085c6:	0400      	lsls	r0, r0, #16
 80085c8:	2310      	movs	r3, #16
 80085ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085ce:	bf04      	itt	eq
 80085d0:	0200      	lsleq	r0, r0, #8
 80085d2:	3308      	addeq	r3, #8
 80085d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085d8:	bf04      	itt	eq
 80085da:	0100      	lsleq	r0, r0, #4
 80085dc:	3304      	addeq	r3, #4
 80085de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085e2:	bf04      	itt	eq
 80085e4:	0080      	lsleq	r0, r0, #2
 80085e6:	3302      	addeq	r3, #2
 80085e8:	2800      	cmp	r0, #0
 80085ea:	db05      	blt.n	80085f8 <__hi0bits+0x38>
 80085ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085f0:	f103 0301 	add.w	r3, r3, #1
 80085f4:	bf08      	it	eq
 80085f6:	2320      	moveq	r3, #32
 80085f8:	4618      	mov	r0, r3
 80085fa:	4770      	bx	lr
 80085fc:	2300      	movs	r3, #0
 80085fe:	e7e4      	b.n	80085ca <__hi0bits+0xa>

08008600 <__lo0bits>:
 8008600:	6803      	ldr	r3, [r0, #0]
 8008602:	f013 0207 	ands.w	r2, r3, #7
 8008606:	4601      	mov	r1, r0
 8008608:	d00b      	beq.n	8008622 <__lo0bits+0x22>
 800860a:	07da      	lsls	r2, r3, #31
 800860c:	d423      	bmi.n	8008656 <__lo0bits+0x56>
 800860e:	0798      	lsls	r0, r3, #30
 8008610:	bf49      	itett	mi
 8008612:	085b      	lsrmi	r3, r3, #1
 8008614:	089b      	lsrpl	r3, r3, #2
 8008616:	2001      	movmi	r0, #1
 8008618:	600b      	strmi	r3, [r1, #0]
 800861a:	bf5c      	itt	pl
 800861c:	600b      	strpl	r3, [r1, #0]
 800861e:	2002      	movpl	r0, #2
 8008620:	4770      	bx	lr
 8008622:	b298      	uxth	r0, r3
 8008624:	b9a8      	cbnz	r0, 8008652 <__lo0bits+0x52>
 8008626:	0c1b      	lsrs	r3, r3, #16
 8008628:	2010      	movs	r0, #16
 800862a:	b2da      	uxtb	r2, r3
 800862c:	b90a      	cbnz	r2, 8008632 <__lo0bits+0x32>
 800862e:	3008      	adds	r0, #8
 8008630:	0a1b      	lsrs	r3, r3, #8
 8008632:	071a      	lsls	r2, r3, #28
 8008634:	bf04      	itt	eq
 8008636:	091b      	lsreq	r3, r3, #4
 8008638:	3004      	addeq	r0, #4
 800863a:	079a      	lsls	r2, r3, #30
 800863c:	bf04      	itt	eq
 800863e:	089b      	lsreq	r3, r3, #2
 8008640:	3002      	addeq	r0, #2
 8008642:	07da      	lsls	r2, r3, #31
 8008644:	d403      	bmi.n	800864e <__lo0bits+0x4e>
 8008646:	085b      	lsrs	r3, r3, #1
 8008648:	f100 0001 	add.w	r0, r0, #1
 800864c:	d005      	beq.n	800865a <__lo0bits+0x5a>
 800864e:	600b      	str	r3, [r1, #0]
 8008650:	4770      	bx	lr
 8008652:	4610      	mov	r0, r2
 8008654:	e7e9      	b.n	800862a <__lo0bits+0x2a>
 8008656:	2000      	movs	r0, #0
 8008658:	4770      	bx	lr
 800865a:	2020      	movs	r0, #32
 800865c:	4770      	bx	lr
	...

08008660 <__i2b>:
 8008660:	b510      	push	{r4, lr}
 8008662:	460c      	mov	r4, r1
 8008664:	2101      	movs	r1, #1
 8008666:	f7ff ff03 	bl	8008470 <_Balloc>
 800866a:	4602      	mov	r2, r0
 800866c:	b928      	cbnz	r0, 800867a <__i2b+0x1a>
 800866e:	4b05      	ldr	r3, [pc, #20]	; (8008684 <__i2b+0x24>)
 8008670:	4805      	ldr	r0, [pc, #20]	; (8008688 <__i2b+0x28>)
 8008672:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008676:	f7fe fe85 	bl	8007384 <__assert_func>
 800867a:	2301      	movs	r3, #1
 800867c:	6144      	str	r4, [r0, #20]
 800867e:	6103      	str	r3, [r0, #16]
 8008680:	bd10      	pop	{r4, pc}
 8008682:	bf00      	nop
 8008684:	0800947e 	.word	0x0800947e
 8008688:	080094f0 	.word	0x080094f0

0800868c <__multiply>:
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	4691      	mov	r9, r2
 8008692:	690a      	ldr	r2, [r1, #16]
 8008694:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008698:	429a      	cmp	r2, r3
 800869a:	bfb8      	it	lt
 800869c:	460b      	movlt	r3, r1
 800869e:	460c      	mov	r4, r1
 80086a0:	bfbc      	itt	lt
 80086a2:	464c      	movlt	r4, r9
 80086a4:	4699      	movlt	r9, r3
 80086a6:	6927      	ldr	r7, [r4, #16]
 80086a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086ac:	68a3      	ldr	r3, [r4, #8]
 80086ae:	6861      	ldr	r1, [r4, #4]
 80086b0:	eb07 060a 	add.w	r6, r7, sl
 80086b4:	42b3      	cmp	r3, r6
 80086b6:	b085      	sub	sp, #20
 80086b8:	bfb8      	it	lt
 80086ba:	3101      	addlt	r1, #1
 80086bc:	f7ff fed8 	bl	8008470 <_Balloc>
 80086c0:	b930      	cbnz	r0, 80086d0 <__multiply+0x44>
 80086c2:	4602      	mov	r2, r0
 80086c4:	4b44      	ldr	r3, [pc, #272]	; (80087d8 <__multiply+0x14c>)
 80086c6:	4845      	ldr	r0, [pc, #276]	; (80087dc <__multiply+0x150>)
 80086c8:	f240 115d 	movw	r1, #349	; 0x15d
 80086cc:	f7fe fe5a 	bl	8007384 <__assert_func>
 80086d0:	f100 0514 	add.w	r5, r0, #20
 80086d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086d8:	462b      	mov	r3, r5
 80086da:	2200      	movs	r2, #0
 80086dc:	4543      	cmp	r3, r8
 80086de:	d321      	bcc.n	8008724 <__multiply+0x98>
 80086e0:	f104 0314 	add.w	r3, r4, #20
 80086e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086e8:	f109 0314 	add.w	r3, r9, #20
 80086ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086f0:	9202      	str	r2, [sp, #8]
 80086f2:	1b3a      	subs	r2, r7, r4
 80086f4:	3a15      	subs	r2, #21
 80086f6:	f022 0203 	bic.w	r2, r2, #3
 80086fa:	3204      	adds	r2, #4
 80086fc:	f104 0115 	add.w	r1, r4, #21
 8008700:	428f      	cmp	r7, r1
 8008702:	bf38      	it	cc
 8008704:	2204      	movcc	r2, #4
 8008706:	9201      	str	r2, [sp, #4]
 8008708:	9a02      	ldr	r2, [sp, #8]
 800870a:	9303      	str	r3, [sp, #12]
 800870c:	429a      	cmp	r2, r3
 800870e:	d80c      	bhi.n	800872a <__multiply+0x9e>
 8008710:	2e00      	cmp	r6, #0
 8008712:	dd03      	ble.n	800871c <__multiply+0x90>
 8008714:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008718:	2b00      	cmp	r3, #0
 800871a:	d05a      	beq.n	80087d2 <__multiply+0x146>
 800871c:	6106      	str	r6, [r0, #16]
 800871e:	b005      	add	sp, #20
 8008720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008724:	f843 2b04 	str.w	r2, [r3], #4
 8008728:	e7d8      	b.n	80086dc <__multiply+0x50>
 800872a:	f8b3 a000 	ldrh.w	sl, [r3]
 800872e:	f1ba 0f00 	cmp.w	sl, #0
 8008732:	d024      	beq.n	800877e <__multiply+0xf2>
 8008734:	f104 0e14 	add.w	lr, r4, #20
 8008738:	46a9      	mov	r9, r5
 800873a:	f04f 0c00 	mov.w	ip, #0
 800873e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008742:	f8d9 1000 	ldr.w	r1, [r9]
 8008746:	fa1f fb82 	uxth.w	fp, r2
 800874a:	b289      	uxth	r1, r1
 800874c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008750:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008754:	f8d9 2000 	ldr.w	r2, [r9]
 8008758:	4461      	add	r1, ip
 800875a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800875e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008762:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008766:	b289      	uxth	r1, r1
 8008768:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800876c:	4577      	cmp	r7, lr
 800876e:	f849 1b04 	str.w	r1, [r9], #4
 8008772:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008776:	d8e2      	bhi.n	800873e <__multiply+0xb2>
 8008778:	9a01      	ldr	r2, [sp, #4]
 800877a:	f845 c002 	str.w	ip, [r5, r2]
 800877e:	9a03      	ldr	r2, [sp, #12]
 8008780:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008784:	3304      	adds	r3, #4
 8008786:	f1b9 0f00 	cmp.w	r9, #0
 800878a:	d020      	beq.n	80087ce <__multiply+0x142>
 800878c:	6829      	ldr	r1, [r5, #0]
 800878e:	f104 0c14 	add.w	ip, r4, #20
 8008792:	46ae      	mov	lr, r5
 8008794:	f04f 0a00 	mov.w	sl, #0
 8008798:	f8bc b000 	ldrh.w	fp, [ip]
 800879c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087a0:	fb09 220b 	mla	r2, r9, fp, r2
 80087a4:	4492      	add	sl, r2
 80087a6:	b289      	uxth	r1, r1
 80087a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80087ac:	f84e 1b04 	str.w	r1, [lr], #4
 80087b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80087b4:	f8be 1000 	ldrh.w	r1, [lr]
 80087b8:	0c12      	lsrs	r2, r2, #16
 80087ba:	fb09 1102 	mla	r1, r9, r2, r1
 80087be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80087c2:	4567      	cmp	r7, ip
 80087c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087c8:	d8e6      	bhi.n	8008798 <__multiply+0x10c>
 80087ca:	9a01      	ldr	r2, [sp, #4]
 80087cc:	50a9      	str	r1, [r5, r2]
 80087ce:	3504      	adds	r5, #4
 80087d0:	e79a      	b.n	8008708 <__multiply+0x7c>
 80087d2:	3e01      	subs	r6, #1
 80087d4:	e79c      	b.n	8008710 <__multiply+0x84>
 80087d6:	bf00      	nop
 80087d8:	0800947e 	.word	0x0800947e
 80087dc:	080094f0 	.word	0x080094f0

080087e0 <__pow5mult>:
 80087e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e4:	4615      	mov	r5, r2
 80087e6:	f012 0203 	ands.w	r2, r2, #3
 80087ea:	4606      	mov	r6, r0
 80087ec:	460f      	mov	r7, r1
 80087ee:	d007      	beq.n	8008800 <__pow5mult+0x20>
 80087f0:	4c25      	ldr	r4, [pc, #148]	; (8008888 <__pow5mult+0xa8>)
 80087f2:	3a01      	subs	r2, #1
 80087f4:	2300      	movs	r3, #0
 80087f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087fa:	f7ff fe9b 	bl	8008534 <__multadd>
 80087fe:	4607      	mov	r7, r0
 8008800:	10ad      	asrs	r5, r5, #2
 8008802:	d03d      	beq.n	8008880 <__pow5mult+0xa0>
 8008804:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008806:	b97c      	cbnz	r4, 8008828 <__pow5mult+0x48>
 8008808:	2010      	movs	r0, #16
 800880a:	f7ff fe1b 	bl	8008444 <malloc>
 800880e:	4602      	mov	r2, r0
 8008810:	6270      	str	r0, [r6, #36]	; 0x24
 8008812:	b928      	cbnz	r0, 8008820 <__pow5mult+0x40>
 8008814:	4b1d      	ldr	r3, [pc, #116]	; (800888c <__pow5mult+0xac>)
 8008816:	481e      	ldr	r0, [pc, #120]	; (8008890 <__pow5mult+0xb0>)
 8008818:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800881c:	f7fe fdb2 	bl	8007384 <__assert_func>
 8008820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008824:	6004      	str	r4, [r0, #0]
 8008826:	60c4      	str	r4, [r0, #12]
 8008828:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800882c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008830:	b94c      	cbnz	r4, 8008846 <__pow5mult+0x66>
 8008832:	f240 2171 	movw	r1, #625	; 0x271
 8008836:	4630      	mov	r0, r6
 8008838:	f7ff ff12 	bl	8008660 <__i2b>
 800883c:	2300      	movs	r3, #0
 800883e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008842:	4604      	mov	r4, r0
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	f04f 0900 	mov.w	r9, #0
 800884a:	07eb      	lsls	r3, r5, #31
 800884c:	d50a      	bpl.n	8008864 <__pow5mult+0x84>
 800884e:	4639      	mov	r1, r7
 8008850:	4622      	mov	r2, r4
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff ff1a 	bl	800868c <__multiply>
 8008858:	4639      	mov	r1, r7
 800885a:	4680      	mov	r8, r0
 800885c:	4630      	mov	r0, r6
 800885e:	f7ff fe47 	bl	80084f0 <_Bfree>
 8008862:	4647      	mov	r7, r8
 8008864:	106d      	asrs	r5, r5, #1
 8008866:	d00b      	beq.n	8008880 <__pow5mult+0xa0>
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	b938      	cbnz	r0, 800887c <__pow5mult+0x9c>
 800886c:	4622      	mov	r2, r4
 800886e:	4621      	mov	r1, r4
 8008870:	4630      	mov	r0, r6
 8008872:	f7ff ff0b 	bl	800868c <__multiply>
 8008876:	6020      	str	r0, [r4, #0]
 8008878:	f8c0 9000 	str.w	r9, [r0]
 800887c:	4604      	mov	r4, r0
 800887e:	e7e4      	b.n	800884a <__pow5mult+0x6a>
 8008880:	4638      	mov	r0, r7
 8008882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008886:	bf00      	nop
 8008888:	08009640 	.word	0x08009640
 800888c:	08009368 	.word	0x08009368
 8008890:	080094f0 	.word	0x080094f0

08008894 <__lshift>:
 8008894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008898:	460c      	mov	r4, r1
 800889a:	6849      	ldr	r1, [r1, #4]
 800889c:	6923      	ldr	r3, [r4, #16]
 800889e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088a2:	68a3      	ldr	r3, [r4, #8]
 80088a4:	4607      	mov	r7, r0
 80088a6:	4691      	mov	r9, r2
 80088a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088ac:	f108 0601 	add.w	r6, r8, #1
 80088b0:	42b3      	cmp	r3, r6
 80088b2:	db0b      	blt.n	80088cc <__lshift+0x38>
 80088b4:	4638      	mov	r0, r7
 80088b6:	f7ff fddb 	bl	8008470 <_Balloc>
 80088ba:	4605      	mov	r5, r0
 80088bc:	b948      	cbnz	r0, 80088d2 <__lshift+0x3e>
 80088be:	4602      	mov	r2, r0
 80088c0:	4b2a      	ldr	r3, [pc, #168]	; (800896c <__lshift+0xd8>)
 80088c2:	482b      	ldr	r0, [pc, #172]	; (8008970 <__lshift+0xdc>)
 80088c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088c8:	f7fe fd5c 	bl	8007384 <__assert_func>
 80088cc:	3101      	adds	r1, #1
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	e7ee      	b.n	80088b0 <__lshift+0x1c>
 80088d2:	2300      	movs	r3, #0
 80088d4:	f100 0114 	add.w	r1, r0, #20
 80088d8:	f100 0210 	add.w	r2, r0, #16
 80088dc:	4618      	mov	r0, r3
 80088de:	4553      	cmp	r3, sl
 80088e0:	db37      	blt.n	8008952 <__lshift+0xbe>
 80088e2:	6920      	ldr	r0, [r4, #16]
 80088e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088e8:	f104 0314 	add.w	r3, r4, #20
 80088ec:	f019 091f 	ands.w	r9, r9, #31
 80088f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80088f8:	d02f      	beq.n	800895a <__lshift+0xc6>
 80088fa:	f1c9 0e20 	rsb	lr, r9, #32
 80088fe:	468a      	mov	sl, r1
 8008900:	f04f 0c00 	mov.w	ip, #0
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	fa02 f209 	lsl.w	r2, r2, r9
 800890a:	ea42 020c 	orr.w	r2, r2, ip
 800890e:	f84a 2b04 	str.w	r2, [sl], #4
 8008912:	f853 2b04 	ldr.w	r2, [r3], #4
 8008916:	4298      	cmp	r0, r3
 8008918:	fa22 fc0e 	lsr.w	ip, r2, lr
 800891c:	d8f2      	bhi.n	8008904 <__lshift+0x70>
 800891e:	1b03      	subs	r3, r0, r4
 8008920:	3b15      	subs	r3, #21
 8008922:	f023 0303 	bic.w	r3, r3, #3
 8008926:	3304      	adds	r3, #4
 8008928:	f104 0215 	add.w	r2, r4, #21
 800892c:	4290      	cmp	r0, r2
 800892e:	bf38      	it	cc
 8008930:	2304      	movcc	r3, #4
 8008932:	f841 c003 	str.w	ip, [r1, r3]
 8008936:	f1bc 0f00 	cmp.w	ip, #0
 800893a:	d001      	beq.n	8008940 <__lshift+0xac>
 800893c:	f108 0602 	add.w	r6, r8, #2
 8008940:	3e01      	subs	r6, #1
 8008942:	4638      	mov	r0, r7
 8008944:	612e      	str	r6, [r5, #16]
 8008946:	4621      	mov	r1, r4
 8008948:	f7ff fdd2 	bl	80084f0 <_Bfree>
 800894c:	4628      	mov	r0, r5
 800894e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008952:	f842 0f04 	str.w	r0, [r2, #4]!
 8008956:	3301      	adds	r3, #1
 8008958:	e7c1      	b.n	80088de <__lshift+0x4a>
 800895a:	3904      	subs	r1, #4
 800895c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008960:	f841 2f04 	str.w	r2, [r1, #4]!
 8008964:	4298      	cmp	r0, r3
 8008966:	d8f9      	bhi.n	800895c <__lshift+0xc8>
 8008968:	e7ea      	b.n	8008940 <__lshift+0xac>
 800896a:	bf00      	nop
 800896c:	0800947e 	.word	0x0800947e
 8008970:	080094f0 	.word	0x080094f0

08008974 <__mcmp>:
 8008974:	b530      	push	{r4, r5, lr}
 8008976:	6902      	ldr	r2, [r0, #16]
 8008978:	690c      	ldr	r4, [r1, #16]
 800897a:	1b12      	subs	r2, r2, r4
 800897c:	d10e      	bne.n	800899c <__mcmp+0x28>
 800897e:	f100 0314 	add.w	r3, r0, #20
 8008982:	3114      	adds	r1, #20
 8008984:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008988:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800898c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008990:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008994:	42a5      	cmp	r5, r4
 8008996:	d003      	beq.n	80089a0 <__mcmp+0x2c>
 8008998:	d305      	bcc.n	80089a6 <__mcmp+0x32>
 800899a:	2201      	movs	r2, #1
 800899c:	4610      	mov	r0, r2
 800899e:	bd30      	pop	{r4, r5, pc}
 80089a0:	4283      	cmp	r3, r0
 80089a2:	d3f3      	bcc.n	800898c <__mcmp+0x18>
 80089a4:	e7fa      	b.n	800899c <__mcmp+0x28>
 80089a6:	f04f 32ff 	mov.w	r2, #4294967295
 80089aa:	e7f7      	b.n	800899c <__mcmp+0x28>

080089ac <__mdiff>:
 80089ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	460c      	mov	r4, r1
 80089b2:	4606      	mov	r6, r0
 80089b4:	4611      	mov	r1, r2
 80089b6:	4620      	mov	r0, r4
 80089b8:	4690      	mov	r8, r2
 80089ba:	f7ff ffdb 	bl	8008974 <__mcmp>
 80089be:	1e05      	subs	r5, r0, #0
 80089c0:	d110      	bne.n	80089e4 <__mdiff+0x38>
 80089c2:	4629      	mov	r1, r5
 80089c4:	4630      	mov	r0, r6
 80089c6:	f7ff fd53 	bl	8008470 <_Balloc>
 80089ca:	b930      	cbnz	r0, 80089da <__mdiff+0x2e>
 80089cc:	4b3a      	ldr	r3, [pc, #232]	; (8008ab8 <__mdiff+0x10c>)
 80089ce:	4602      	mov	r2, r0
 80089d0:	f240 2132 	movw	r1, #562	; 0x232
 80089d4:	4839      	ldr	r0, [pc, #228]	; (8008abc <__mdiff+0x110>)
 80089d6:	f7fe fcd5 	bl	8007384 <__assert_func>
 80089da:	2301      	movs	r3, #1
 80089dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e4:	bfa4      	itt	ge
 80089e6:	4643      	movge	r3, r8
 80089e8:	46a0      	movge	r8, r4
 80089ea:	4630      	mov	r0, r6
 80089ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089f0:	bfa6      	itte	ge
 80089f2:	461c      	movge	r4, r3
 80089f4:	2500      	movge	r5, #0
 80089f6:	2501      	movlt	r5, #1
 80089f8:	f7ff fd3a 	bl	8008470 <_Balloc>
 80089fc:	b920      	cbnz	r0, 8008a08 <__mdiff+0x5c>
 80089fe:	4b2e      	ldr	r3, [pc, #184]	; (8008ab8 <__mdiff+0x10c>)
 8008a00:	4602      	mov	r2, r0
 8008a02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a06:	e7e5      	b.n	80089d4 <__mdiff+0x28>
 8008a08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a0c:	6926      	ldr	r6, [r4, #16]
 8008a0e:	60c5      	str	r5, [r0, #12]
 8008a10:	f104 0914 	add.w	r9, r4, #20
 8008a14:	f108 0514 	add.w	r5, r8, #20
 8008a18:	f100 0e14 	add.w	lr, r0, #20
 8008a1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a24:	f108 0210 	add.w	r2, r8, #16
 8008a28:	46f2      	mov	sl, lr
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a34:	fa1f f883 	uxth.w	r8, r3
 8008a38:	fa11 f18b 	uxtah	r1, r1, fp
 8008a3c:	0c1b      	lsrs	r3, r3, #16
 8008a3e:	eba1 0808 	sub.w	r8, r1, r8
 8008a42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a4a:	fa1f f888 	uxth.w	r8, r8
 8008a4e:	1419      	asrs	r1, r3, #16
 8008a50:	454e      	cmp	r6, r9
 8008a52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a56:	f84a 3b04 	str.w	r3, [sl], #4
 8008a5a:	d8e7      	bhi.n	8008a2c <__mdiff+0x80>
 8008a5c:	1b33      	subs	r3, r6, r4
 8008a5e:	3b15      	subs	r3, #21
 8008a60:	f023 0303 	bic.w	r3, r3, #3
 8008a64:	3304      	adds	r3, #4
 8008a66:	3415      	adds	r4, #21
 8008a68:	42a6      	cmp	r6, r4
 8008a6a:	bf38      	it	cc
 8008a6c:	2304      	movcc	r3, #4
 8008a6e:	441d      	add	r5, r3
 8008a70:	4473      	add	r3, lr
 8008a72:	469e      	mov	lr, r3
 8008a74:	462e      	mov	r6, r5
 8008a76:	4566      	cmp	r6, ip
 8008a78:	d30e      	bcc.n	8008a98 <__mdiff+0xec>
 8008a7a:	f10c 0203 	add.w	r2, ip, #3
 8008a7e:	1b52      	subs	r2, r2, r5
 8008a80:	f022 0203 	bic.w	r2, r2, #3
 8008a84:	3d03      	subs	r5, #3
 8008a86:	45ac      	cmp	ip, r5
 8008a88:	bf38      	it	cc
 8008a8a:	2200      	movcc	r2, #0
 8008a8c:	441a      	add	r2, r3
 8008a8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a92:	b17b      	cbz	r3, 8008ab4 <__mdiff+0x108>
 8008a94:	6107      	str	r7, [r0, #16]
 8008a96:	e7a3      	b.n	80089e0 <__mdiff+0x34>
 8008a98:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a9c:	fa11 f288 	uxtah	r2, r1, r8
 8008aa0:	1414      	asrs	r4, r2, #16
 8008aa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008aa6:	b292      	uxth	r2, r2
 8008aa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008aac:	f84e 2b04 	str.w	r2, [lr], #4
 8008ab0:	1421      	asrs	r1, r4, #16
 8008ab2:	e7e0      	b.n	8008a76 <__mdiff+0xca>
 8008ab4:	3f01      	subs	r7, #1
 8008ab6:	e7ea      	b.n	8008a8e <__mdiff+0xe2>
 8008ab8:	0800947e 	.word	0x0800947e
 8008abc:	080094f0 	.word	0x080094f0

08008ac0 <__d2b>:
 8008ac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ac4:	4689      	mov	r9, r1
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	ec57 6b10 	vmov	r6, r7, d0
 8008acc:	4690      	mov	r8, r2
 8008ace:	f7ff fccf 	bl	8008470 <_Balloc>
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	b930      	cbnz	r0, 8008ae4 <__d2b+0x24>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	4b25      	ldr	r3, [pc, #148]	; (8008b70 <__d2b+0xb0>)
 8008ada:	4826      	ldr	r0, [pc, #152]	; (8008b74 <__d2b+0xb4>)
 8008adc:	f240 310a 	movw	r1, #778	; 0x30a
 8008ae0:	f7fe fc50 	bl	8007384 <__assert_func>
 8008ae4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008aec:	bb35      	cbnz	r5, 8008b3c <__d2b+0x7c>
 8008aee:	2e00      	cmp	r6, #0
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	d028      	beq.n	8008b46 <__d2b+0x86>
 8008af4:	4668      	mov	r0, sp
 8008af6:	9600      	str	r6, [sp, #0]
 8008af8:	f7ff fd82 	bl	8008600 <__lo0bits>
 8008afc:	9900      	ldr	r1, [sp, #0]
 8008afe:	b300      	cbz	r0, 8008b42 <__d2b+0x82>
 8008b00:	9a01      	ldr	r2, [sp, #4]
 8008b02:	f1c0 0320 	rsb	r3, r0, #32
 8008b06:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0a:	430b      	orrs	r3, r1
 8008b0c:	40c2      	lsrs	r2, r0
 8008b0e:	6163      	str	r3, [r4, #20]
 8008b10:	9201      	str	r2, [sp, #4]
 8008b12:	9b01      	ldr	r3, [sp, #4]
 8008b14:	61a3      	str	r3, [r4, #24]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bf14      	ite	ne
 8008b1a:	2202      	movne	r2, #2
 8008b1c:	2201      	moveq	r2, #1
 8008b1e:	6122      	str	r2, [r4, #16]
 8008b20:	b1d5      	cbz	r5, 8008b58 <__d2b+0x98>
 8008b22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b26:	4405      	add	r5, r0
 8008b28:	f8c9 5000 	str.w	r5, [r9]
 8008b2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b30:	f8c8 0000 	str.w	r0, [r8]
 8008b34:	4620      	mov	r0, r4
 8008b36:	b003      	add	sp, #12
 8008b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b40:	e7d5      	b.n	8008aee <__d2b+0x2e>
 8008b42:	6161      	str	r1, [r4, #20]
 8008b44:	e7e5      	b.n	8008b12 <__d2b+0x52>
 8008b46:	a801      	add	r0, sp, #4
 8008b48:	f7ff fd5a 	bl	8008600 <__lo0bits>
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	6163      	str	r3, [r4, #20]
 8008b50:	2201      	movs	r2, #1
 8008b52:	6122      	str	r2, [r4, #16]
 8008b54:	3020      	adds	r0, #32
 8008b56:	e7e3      	b.n	8008b20 <__d2b+0x60>
 8008b58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b60:	f8c9 0000 	str.w	r0, [r9]
 8008b64:	6918      	ldr	r0, [r3, #16]
 8008b66:	f7ff fd2b 	bl	80085c0 <__hi0bits>
 8008b6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b6e:	e7df      	b.n	8008b30 <__d2b+0x70>
 8008b70:	0800947e 	.word	0x0800947e
 8008b74:	080094f0 	.word	0x080094f0

08008b78 <_calloc_r>:
 8008b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b7a:	fba1 2402 	umull	r2, r4, r1, r2
 8008b7e:	b94c      	cbnz	r4, 8008b94 <_calloc_r+0x1c>
 8008b80:	4611      	mov	r1, r2
 8008b82:	9201      	str	r2, [sp, #4]
 8008b84:	f000 f87a 	bl	8008c7c <_malloc_r>
 8008b88:	9a01      	ldr	r2, [sp, #4]
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	b930      	cbnz	r0, 8008b9c <_calloc_r+0x24>
 8008b8e:	4628      	mov	r0, r5
 8008b90:	b003      	add	sp, #12
 8008b92:	bd30      	pop	{r4, r5, pc}
 8008b94:	220c      	movs	r2, #12
 8008b96:	6002      	str	r2, [r0, #0]
 8008b98:	2500      	movs	r5, #0
 8008b9a:	e7f8      	b.n	8008b8e <_calloc_r+0x16>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	f7fd fdd1 	bl	8006744 <memset>
 8008ba2:	e7f4      	b.n	8008b8e <_calloc_r+0x16>

08008ba4 <_free_r>:
 8008ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ba6:	2900      	cmp	r1, #0
 8008ba8:	d044      	beq.n	8008c34 <_free_r+0x90>
 8008baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bae:	9001      	str	r0, [sp, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8008bb6:	bfb8      	it	lt
 8008bb8:	18e4      	addlt	r4, r4, r3
 8008bba:	f000 faf1 	bl	80091a0 <__malloc_lock>
 8008bbe:	4a1e      	ldr	r2, [pc, #120]	; (8008c38 <_free_r+0x94>)
 8008bc0:	9801      	ldr	r0, [sp, #4]
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	b933      	cbnz	r3, 8008bd4 <_free_r+0x30>
 8008bc6:	6063      	str	r3, [r4, #4]
 8008bc8:	6014      	str	r4, [r2, #0]
 8008bca:	b003      	add	sp, #12
 8008bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bd0:	f000 baec 	b.w	80091ac <__malloc_unlock>
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	d908      	bls.n	8008bea <_free_r+0x46>
 8008bd8:	6825      	ldr	r5, [r4, #0]
 8008bda:	1961      	adds	r1, r4, r5
 8008bdc:	428b      	cmp	r3, r1
 8008bde:	bf01      	itttt	eq
 8008be0:	6819      	ldreq	r1, [r3, #0]
 8008be2:	685b      	ldreq	r3, [r3, #4]
 8008be4:	1949      	addeq	r1, r1, r5
 8008be6:	6021      	streq	r1, [r4, #0]
 8008be8:	e7ed      	b.n	8008bc6 <_free_r+0x22>
 8008bea:	461a      	mov	r2, r3
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	b10b      	cbz	r3, 8008bf4 <_free_r+0x50>
 8008bf0:	42a3      	cmp	r3, r4
 8008bf2:	d9fa      	bls.n	8008bea <_free_r+0x46>
 8008bf4:	6811      	ldr	r1, [r2, #0]
 8008bf6:	1855      	adds	r5, r2, r1
 8008bf8:	42a5      	cmp	r5, r4
 8008bfa:	d10b      	bne.n	8008c14 <_free_r+0x70>
 8008bfc:	6824      	ldr	r4, [r4, #0]
 8008bfe:	4421      	add	r1, r4
 8008c00:	1854      	adds	r4, r2, r1
 8008c02:	42a3      	cmp	r3, r4
 8008c04:	6011      	str	r1, [r2, #0]
 8008c06:	d1e0      	bne.n	8008bca <_free_r+0x26>
 8008c08:	681c      	ldr	r4, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	6053      	str	r3, [r2, #4]
 8008c0e:	4421      	add	r1, r4
 8008c10:	6011      	str	r1, [r2, #0]
 8008c12:	e7da      	b.n	8008bca <_free_r+0x26>
 8008c14:	d902      	bls.n	8008c1c <_free_r+0x78>
 8008c16:	230c      	movs	r3, #12
 8008c18:	6003      	str	r3, [r0, #0]
 8008c1a:	e7d6      	b.n	8008bca <_free_r+0x26>
 8008c1c:	6825      	ldr	r5, [r4, #0]
 8008c1e:	1961      	adds	r1, r4, r5
 8008c20:	428b      	cmp	r3, r1
 8008c22:	bf04      	itt	eq
 8008c24:	6819      	ldreq	r1, [r3, #0]
 8008c26:	685b      	ldreq	r3, [r3, #4]
 8008c28:	6063      	str	r3, [r4, #4]
 8008c2a:	bf04      	itt	eq
 8008c2c:	1949      	addeq	r1, r1, r5
 8008c2e:	6021      	streq	r1, [r4, #0]
 8008c30:	6054      	str	r4, [r2, #4]
 8008c32:	e7ca      	b.n	8008bca <_free_r+0x26>
 8008c34:	b003      	add	sp, #12
 8008c36:	bd30      	pop	{r4, r5, pc}
 8008c38:	24000954 	.word	0x24000954

08008c3c <sbrk_aligned>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	4e0e      	ldr	r6, [pc, #56]	; (8008c78 <sbrk_aligned+0x3c>)
 8008c40:	460c      	mov	r4, r1
 8008c42:	6831      	ldr	r1, [r6, #0]
 8008c44:	4605      	mov	r5, r0
 8008c46:	b911      	cbnz	r1, 8008c4e <sbrk_aligned+0x12>
 8008c48:	f000 f9e6 	bl	8009018 <_sbrk_r>
 8008c4c:	6030      	str	r0, [r6, #0]
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f000 f9e1 	bl	8009018 <_sbrk_r>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	d00a      	beq.n	8008c70 <sbrk_aligned+0x34>
 8008c5a:	1cc4      	adds	r4, r0, #3
 8008c5c:	f024 0403 	bic.w	r4, r4, #3
 8008c60:	42a0      	cmp	r0, r4
 8008c62:	d007      	beq.n	8008c74 <sbrk_aligned+0x38>
 8008c64:	1a21      	subs	r1, r4, r0
 8008c66:	4628      	mov	r0, r5
 8008c68:	f000 f9d6 	bl	8009018 <_sbrk_r>
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d101      	bne.n	8008c74 <sbrk_aligned+0x38>
 8008c70:	f04f 34ff 	mov.w	r4, #4294967295
 8008c74:	4620      	mov	r0, r4
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
 8008c78:	24000958 	.word	0x24000958

08008c7c <_malloc_r>:
 8008c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c80:	1ccd      	adds	r5, r1, #3
 8008c82:	f025 0503 	bic.w	r5, r5, #3
 8008c86:	3508      	adds	r5, #8
 8008c88:	2d0c      	cmp	r5, #12
 8008c8a:	bf38      	it	cc
 8008c8c:	250c      	movcc	r5, #12
 8008c8e:	2d00      	cmp	r5, #0
 8008c90:	4607      	mov	r7, r0
 8008c92:	db01      	blt.n	8008c98 <_malloc_r+0x1c>
 8008c94:	42a9      	cmp	r1, r5
 8008c96:	d905      	bls.n	8008ca4 <_malloc_r+0x28>
 8008c98:	230c      	movs	r3, #12
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	2600      	movs	r6, #0
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca4:	4e2e      	ldr	r6, [pc, #184]	; (8008d60 <_malloc_r+0xe4>)
 8008ca6:	f000 fa7b 	bl	80091a0 <__malloc_lock>
 8008caa:	6833      	ldr	r3, [r6, #0]
 8008cac:	461c      	mov	r4, r3
 8008cae:	bb34      	cbnz	r4, 8008cfe <_malloc_r+0x82>
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	f7ff ffc2 	bl	8008c3c <sbrk_aligned>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	4604      	mov	r4, r0
 8008cbc:	d14d      	bne.n	8008d5a <_malloc_r+0xde>
 8008cbe:	6834      	ldr	r4, [r6, #0]
 8008cc0:	4626      	mov	r6, r4
 8008cc2:	2e00      	cmp	r6, #0
 8008cc4:	d140      	bne.n	8008d48 <_malloc_r+0xcc>
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	4631      	mov	r1, r6
 8008cca:	4638      	mov	r0, r7
 8008ccc:	eb04 0803 	add.w	r8, r4, r3
 8008cd0:	f000 f9a2 	bl	8009018 <_sbrk_r>
 8008cd4:	4580      	cmp	r8, r0
 8008cd6:	d13a      	bne.n	8008d4e <_malloc_r+0xd2>
 8008cd8:	6821      	ldr	r1, [r4, #0]
 8008cda:	3503      	adds	r5, #3
 8008cdc:	1a6d      	subs	r5, r5, r1
 8008cde:	f025 0503 	bic.w	r5, r5, #3
 8008ce2:	3508      	adds	r5, #8
 8008ce4:	2d0c      	cmp	r5, #12
 8008ce6:	bf38      	it	cc
 8008ce8:	250c      	movcc	r5, #12
 8008cea:	4629      	mov	r1, r5
 8008cec:	4638      	mov	r0, r7
 8008cee:	f7ff ffa5 	bl	8008c3c <sbrk_aligned>
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	d02b      	beq.n	8008d4e <_malloc_r+0xd2>
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	442b      	add	r3, r5
 8008cfa:	6023      	str	r3, [r4, #0]
 8008cfc:	e00e      	b.n	8008d1c <_malloc_r+0xa0>
 8008cfe:	6822      	ldr	r2, [r4, #0]
 8008d00:	1b52      	subs	r2, r2, r5
 8008d02:	d41e      	bmi.n	8008d42 <_malloc_r+0xc6>
 8008d04:	2a0b      	cmp	r2, #11
 8008d06:	d916      	bls.n	8008d36 <_malloc_r+0xba>
 8008d08:	1961      	adds	r1, r4, r5
 8008d0a:	42a3      	cmp	r3, r4
 8008d0c:	6025      	str	r5, [r4, #0]
 8008d0e:	bf18      	it	ne
 8008d10:	6059      	strne	r1, [r3, #4]
 8008d12:	6863      	ldr	r3, [r4, #4]
 8008d14:	bf08      	it	eq
 8008d16:	6031      	streq	r1, [r6, #0]
 8008d18:	5162      	str	r2, [r4, r5]
 8008d1a:	604b      	str	r3, [r1, #4]
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f104 060b 	add.w	r6, r4, #11
 8008d22:	f000 fa43 	bl	80091ac <__malloc_unlock>
 8008d26:	f026 0607 	bic.w	r6, r6, #7
 8008d2a:	1d23      	adds	r3, r4, #4
 8008d2c:	1af2      	subs	r2, r6, r3
 8008d2e:	d0b6      	beq.n	8008c9e <_malloc_r+0x22>
 8008d30:	1b9b      	subs	r3, r3, r6
 8008d32:	50a3      	str	r3, [r4, r2]
 8008d34:	e7b3      	b.n	8008c9e <_malloc_r+0x22>
 8008d36:	6862      	ldr	r2, [r4, #4]
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	bf0c      	ite	eq
 8008d3c:	6032      	streq	r2, [r6, #0]
 8008d3e:	605a      	strne	r2, [r3, #4]
 8008d40:	e7ec      	b.n	8008d1c <_malloc_r+0xa0>
 8008d42:	4623      	mov	r3, r4
 8008d44:	6864      	ldr	r4, [r4, #4]
 8008d46:	e7b2      	b.n	8008cae <_malloc_r+0x32>
 8008d48:	4634      	mov	r4, r6
 8008d4a:	6876      	ldr	r6, [r6, #4]
 8008d4c:	e7b9      	b.n	8008cc2 <_malloc_r+0x46>
 8008d4e:	230c      	movs	r3, #12
 8008d50:	603b      	str	r3, [r7, #0]
 8008d52:	4638      	mov	r0, r7
 8008d54:	f000 fa2a 	bl	80091ac <__malloc_unlock>
 8008d58:	e7a1      	b.n	8008c9e <_malloc_r+0x22>
 8008d5a:	6025      	str	r5, [r4, #0]
 8008d5c:	e7de      	b.n	8008d1c <_malloc_r+0xa0>
 8008d5e:	bf00      	nop
 8008d60:	24000954 	.word	0x24000954

08008d64 <__sfputc_r>:
 8008d64:	6893      	ldr	r3, [r2, #8]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	b410      	push	{r4}
 8008d6c:	6093      	str	r3, [r2, #8]
 8008d6e:	da08      	bge.n	8008d82 <__sfputc_r+0x1e>
 8008d70:	6994      	ldr	r4, [r2, #24]
 8008d72:	42a3      	cmp	r3, r4
 8008d74:	db01      	blt.n	8008d7a <__sfputc_r+0x16>
 8008d76:	290a      	cmp	r1, #10
 8008d78:	d103      	bne.n	8008d82 <__sfputc_r+0x1e>
 8008d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d7e:	f7fe ba41 	b.w	8007204 <__swbuf_r>
 8008d82:	6813      	ldr	r3, [r2, #0]
 8008d84:	1c58      	adds	r0, r3, #1
 8008d86:	6010      	str	r0, [r2, #0]
 8008d88:	7019      	strb	r1, [r3, #0]
 8008d8a:	4608      	mov	r0, r1
 8008d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <__sfputs_r>:
 8008d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d94:	4606      	mov	r6, r0
 8008d96:	460f      	mov	r7, r1
 8008d98:	4614      	mov	r4, r2
 8008d9a:	18d5      	adds	r5, r2, r3
 8008d9c:	42ac      	cmp	r4, r5
 8008d9e:	d101      	bne.n	8008da4 <__sfputs_r+0x12>
 8008da0:	2000      	movs	r0, #0
 8008da2:	e007      	b.n	8008db4 <__sfputs_r+0x22>
 8008da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da8:	463a      	mov	r2, r7
 8008daa:	4630      	mov	r0, r6
 8008dac:	f7ff ffda 	bl	8008d64 <__sfputc_r>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d1f3      	bne.n	8008d9c <__sfputs_r+0xa>
 8008db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008db8 <_vfiprintf_r>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	460d      	mov	r5, r1
 8008dbe:	b09d      	sub	sp, #116	; 0x74
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	4698      	mov	r8, r3
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	b118      	cbz	r0, 8008dd0 <_vfiprintf_r+0x18>
 8008dc8:	6983      	ldr	r3, [r0, #24]
 8008dca:	b90b      	cbnz	r3, 8008dd0 <_vfiprintf_r+0x18>
 8008dcc:	f7ff fa0c 	bl	80081e8 <__sinit>
 8008dd0:	4b89      	ldr	r3, [pc, #548]	; (8008ff8 <_vfiprintf_r+0x240>)
 8008dd2:	429d      	cmp	r5, r3
 8008dd4:	d11b      	bne.n	8008e0e <_vfiprintf_r+0x56>
 8008dd6:	6875      	ldr	r5, [r6, #4]
 8008dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dda:	07d9      	lsls	r1, r3, #31
 8008ddc:	d405      	bmi.n	8008dea <_vfiprintf_r+0x32>
 8008dde:	89ab      	ldrh	r3, [r5, #12]
 8008de0:	059a      	lsls	r2, r3, #22
 8008de2:	d402      	bmi.n	8008dea <_vfiprintf_r+0x32>
 8008de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008de6:	f7ff fac6 	bl	8008376 <__retarget_lock_acquire_recursive>
 8008dea:	89ab      	ldrh	r3, [r5, #12]
 8008dec:	071b      	lsls	r3, r3, #28
 8008dee:	d501      	bpl.n	8008df4 <_vfiprintf_r+0x3c>
 8008df0:	692b      	ldr	r3, [r5, #16]
 8008df2:	b9eb      	cbnz	r3, 8008e30 <_vfiprintf_r+0x78>
 8008df4:	4629      	mov	r1, r5
 8008df6:	4630      	mov	r0, r6
 8008df8:	f7fe fa56 	bl	80072a8 <__swsetup_r>
 8008dfc:	b1c0      	cbz	r0, 8008e30 <_vfiprintf_r+0x78>
 8008dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e00:	07dc      	lsls	r4, r3, #31
 8008e02:	d50e      	bpl.n	8008e22 <_vfiprintf_r+0x6a>
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	b01d      	add	sp, #116	; 0x74
 8008e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0e:	4b7b      	ldr	r3, [pc, #492]	; (8008ffc <_vfiprintf_r+0x244>)
 8008e10:	429d      	cmp	r5, r3
 8008e12:	d101      	bne.n	8008e18 <_vfiprintf_r+0x60>
 8008e14:	68b5      	ldr	r5, [r6, #8]
 8008e16:	e7df      	b.n	8008dd8 <_vfiprintf_r+0x20>
 8008e18:	4b79      	ldr	r3, [pc, #484]	; (8009000 <_vfiprintf_r+0x248>)
 8008e1a:	429d      	cmp	r5, r3
 8008e1c:	bf08      	it	eq
 8008e1e:	68f5      	ldreq	r5, [r6, #12]
 8008e20:	e7da      	b.n	8008dd8 <_vfiprintf_r+0x20>
 8008e22:	89ab      	ldrh	r3, [r5, #12]
 8008e24:	0598      	lsls	r0, r3, #22
 8008e26:	d4ed      	bmi.n	8008e04 <_vfiprintf_r+0x4c>
 8008e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e2a:	f7ff faa5 	bl	8008378 <__retarget_lock_release_recursive>
 8008e2e:	e7e9      	b.n	8008e04 <_vfiprintf_r+0x4c>
 8008e30:	2300      	movs	r3, #0
 8008e32:	9309      	str	r3, [sp, #36]	; 0x24
 8008e34:	2320      	movs	r3, #32
 8008e36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e3e:	2330      	movs	r3, #48	; 0x30
 8008e40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009004 <_vfiprintf_r+0x24c>
 8008e44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e48:	f04f 0901 	mov.w	r9, #1
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	469a      	mov	sl, r3
 8008e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e54:	b10a      	cbz	r2, 8008e5a <_vfiprintf_r+0xa2>
 8008e56:	2a25      	cmp	r2, #37	; 0x25
 8008e58:	d1f9      	bne.n	8008e4e <_vfiprintf_r+0x96>
 8008e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e5e:	d00b      	beq.n	8008e78 <_vfiprintf_r+0xc0>
 8008e60:	465b      	mov	r3, fp
 8008e62:	4622      	mov	r2, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	4630      	mov	r0, r6
 8008e68:	f7ff ff93 	bl	8008d92 <__sfputs_r>
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	f000 80aa 	beq.w	8008fc6 <_vfiprintf_r+0x20e>
 8008e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e74:	445a      	add	r2, fp
 8008e76:	9209      	str	r2, [sp, #36]	; 0x24
 8008e78:	f89a 3000 	ldrb.w	r3, [sl]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 80a2 	beq.w	8008fc6 <_vfiprintf_r+0x20e>
 8008e82:	2300      	movs	r3, #0
 8008e84:	f04f 32ff 	mov.w	r2, #4294967295
 8008e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e8c:	f10a 0a01 	add.w	sl, sl, #1
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	9307      	str	r3, [sp, #28]
 8008e94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e98:	931a      	str	r3, [sp, #104]	; 0x68
 8008e9a:	4654      	mov	r4, sl
 8008e9c:	2205      	movs	r2, #5
 8008e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea2:	4858      	ldr	r0, [pc, #352]	; (8009004 <_vfiprintf_r+0x24c>)
 8008ea4:	f7f7 fa24 	bl	80002f0 <memchr>
 8008ea8:	9a04      	ldr	r2, [sp, #16]
 8008eaa:	b9d8      	cbnz	r0, 8008ee4 <_vfiprintf_r+0x12c>
 8008eac:	06d1      	lsls	r1, r2, #27
 8008eae:	bf44      	itt	mi
 8008eb0:	2320      	movmi	r3, #32
 8008eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb6:	0713      	lsls	r3, r2, #28
 8008eb8:	bf44      	itt	mi
 8008eba:	232b      	movmi	r3, #43	; 0x2b
 8008ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec6:	d015      	beq.n	8008ef4 <_vfiprintf_r+0x13c>
 8008ec8:	9a07      	ldr	r2, [sp, #28]
 8008eca:	4654      	mov	r4, sl
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f04f 0c0a 	mov.w	ip, #10
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ed8:	3b30      	subs	r3, #48	; 0x30
 8008eda:	2b09      	cmp	r3, #9
 8008edc:	d94e      	bls.n	8008f7c <_vfiprintf_r+0x1c4>
 8008ede:	b1b0      	cbz	r0, 8008f0e <_vfiprintf_r+0x156>
 8008ee0:	9207      	str	r2, [sp, #28]
 8008ee2:	e014      	b.n	8008f0e <_vfiprintf_r+0x156>
 8008ee4:	eba0 0308 	sub.w	r3, r0, r8
 8008ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8008eec:	4313      	orrs	r3, r2
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	46a2      	mov	sl, r4
 8008ef2:	e7d2      	b.n	8008e9a <_vfiprintf_r+0xe2>
 8008ef4:	9b03      	ldr	r3, [sp, #12]
 8008ef6:	1d19      	adds	r1, r3, #4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	9103      	str	r1, [sp, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bfbb      	ittet	lt
 8008f00:	425b      	neglt	r3, r3
 8008f02:	f042 0202 	orrlt.w	r2, r2, #2
 8008f06:	9307      	strge	r3, [sp, #28]
 8008f08:	9307      	strlt	r3, [sp, #28]
 8008f0a:	bfb8      	it	lt
 8008f0c:	9204      	strlt	r2, [sp, #16]
 8008f0e:	7823      	ldrb	r3, [r4, #0]
 8008f10:	2b2e      	cmp	r3, #46	; 0x2e
 8008f12:	d10c      	bne.n	8008f2e <_vfiprintf_r+0x176>
 8008f14:	7863      	ldrb	r3, [r4, #1]
 8008f16:	2b2a      	cmp	r3, #42	; 0x2a
 8008f18:	d135      	bne.n	8008f86 <_vfiprintf_r+0x1ce>
 8008f1a:	9b03      	ldr	r3, [sp, #12]
 8008f1c:	1d1a      	adds	r2, r3, #4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	9203      	str	r2, [sp, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	bfb8      	it	lt
 8008f26:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f2a:	3402      	adds	r4, #2
 8008f2c:	9305      	str	r3, [sp, #20]
 8008f2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009014 <_vfiprintf_r+0x25c>
 8008f32:	7821      	ldrb	r1, [r4, #0]
 8008f34:	2203      	movs	r2, #3
 8008f36:	4650      	mov	r0, sl
 8008f38:	f7f7 f9da 	bl	80002f0 <memchr>
 8008f3c:	b140      	cbz	r0, 8008f50 <_vfiprintf_r+0x198>
 8008f3e:	2340      	movs	r3, #64	; 0x40
 8008f40:	eba0 000a 	sub.w	r0, r0, sl
 8008f44:	fa03 f000 	lsl.w	r0, r3, r0
 8008f48:	9b04      	ldr	r3, [sp, #16]
 8008f4a:	4303      	orrs	r3, r0
 8008f4c:	3401      	adds	r4, #1
 8008f4e:	9304      	str	r3, [sp, #16]
 8008f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f54:	482c      	ldr	r0, [pc, #176]	; (8009008 <_vfiprintf_r+0x250>)
 8008f56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f5a:	2206      	movs	r2, #6
 8008f5c:	f7f7 f9c8 	bl	80002f0 <memchr>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d03f      	beq.n	8008fe4 <_vfiprintf_r+0x22c>
 8008f64:	4b29      	ldr	r3, [pc, #164]	; (800900c <_vfiprintf_r+0x254>)
 8008f66:	bb1b      	cbnz	r3, 8008fb0 <_vfiprintf_r+0x1f8>
 8008f68:	9b03      	ldr	r3, [sp, #12]
 8008f6a:	3307      	adds	r3, #7
 8008f6c:	f023 0307 	bic.w	r3, r3, #7
 8008f70:	3308      	adds	r3, #8
 8008f72:	9303      	str	r3, [sp, #12]
 8008f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f76:	443b      	add	r3, r7
 8008f78:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7a:	e767      	b.n	8008e4c <_vfiprintf_r+0x94>
 8008f7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f80:	460c      	mov	r4, r1
 8008f82:	2001      	movs	r0, #1
 8008f84:	e7a5      	b.n	8008ed2 <_vfiprintf_r+0x11a>
 8008f86:	2300      	movs	r3, #0
 8008f88:	3401      	adds	r4, #1
 8008f8a:	9305      	str	r3, [sp, #20]
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	f04f 0c0a 	mov.w	ip, #10
 8008f92:	4620      	mov	r0, r4
 8008f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f98:	3a30      	subs	r2, #48	; 0x30
 8008f9a:	2a09      	cmp	r2, #9
 8008f9c:	d903      	bls.n	8008fa6 <_vfiprintf_r+0x1ee>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0c5      	beq.n	8008f2e <_vfiprintf_r+0x176>
 8008fa2:	9105      	str	r1, [sp, #20]
 8008fa4:	e7c3      	b.n	8008f2e <_vfiprintf_r+0x176>
 8008fa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008faa:	4604      	mov	r4, r0
 8008fac:	2301      	movs	r3, #1
 8008fae:	e7f0      	b.n	8008f92 <_vfiprintf_r+0x1da>
 8008fb0:	ab03      	add	r3, sp, #12
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	462a      	mov	r2, r5
 8008fb6:	4b16      	ldr	r3, [pc, #88]	; (8009010 <_vfiprintf_r+0x258>)
 8008fb8:	a904      	add	r1, sp, #16
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f7fd fc5c 	bl	8006878 <_printf_float>
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	1c78      	adds	r0, r7, #1
 8008fc4:	d1d6      	bne.n	8008f74 <_vfiprintf_r+0x1bc>
 8008fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fc8:	07d9      	lsls	r1, r3, #31
 8008fca:	d405      	bmi.n	8008fd8 <_vfiprintf_r+0x220>
 8008fcc:	89ab      	ldrh	r3, [r5, #12]
 8008fce:	059a      	lsls	r2, r3, #22
 8008fd0:	d402      	bmi.n	8008fd8 <_vfiprintf_r+0x220>
 8008fd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fd4:	f7ff f9d0 	bl	8008378 <__retarget_lock_release_recursive>
 8008fd8:	89ab      	ldrh	r3, [r5, #12]
 8008fda:	065b      	lsls	r3, r3, #25
 8008fdc:	f53f af12 	bmi.w	8008e04 <_vfiprintf_r+0x4c>
 8008fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fe2:	e711      	b.n	8008e08 <_vfiprintf_r+0x50>
 8008fe4:	ab03      	add	r3, sp, #12
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	462a      	mov	r2, r5
 8008fea:	4b09      	ldr	r3, [pc, #36]	; (8009010 <_vfiprintf_r+0x258>)
 8008fec:	a904      	add	r1, sp, #16
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f7fd fece 	bl	8006d90 <_printf_i>
 8008ff4:	e7e4      	b.n	8008fc0 <_vfiprintf_r+0x208>
 8008ff6:	bf00      	nop
 8008ff8:	080094b0 	.word	0x080094b0
 8008ffc:	080094d0 	.word	0x080094d0
 8009000:	08009490 	.word	0x08009490
 8009004:	0800964c 	.word	0x0800964c
 8009008:	08009656 	.word	0x08009656
 800900c:	08006879 	.word	0x08006879
 8009010:	08008d93 	.word	0x08008d93
 8009014:	08009652 	.word	0x08009652

08009018 <_sbrk_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4d06      	ldr	r5, [pc, #24]	; (8009034 <_sbrk_r+0x1c>)
 800901c:	2300      	movs	r3, #0
 800901e:	4604      	mov	r4, r0
 8009020:	4608      	mov	r0, r1
 8009022:	602b      	str	r3, [r5, #0]
 8009024:	f7f8 f8e0 	bl	80011e8 <_sbrk>
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	d102      	bne.n	8009032 <_sbrk_r+0x1a>
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	b103      	cbz	r3, 8009032 <_sbrk_r+0x1a>
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	bd38      	pop	{r3, r4, r5, pc}
 8009034:	2400095c 	.word	0x2400095c

08009038 <__sread>:
 8009038:	b510      	push	{r4, lr}
 800903a:	460c      	mov	r4, r1
 800903c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009040:	f000 f8ba 	bl	80091b8 <_read_r>
 8009044:	2800      	cmp	r0, #0
 8009046:	bfab      	itete	ge
 8009048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800904a:	89a3      	ldrhlt	r3, [r4, #12]
 800904c:	181b      	addge	r3, r3, r0
 800904e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009052:	bfac      	ite	ge
 8009054:	6563      	strge	r3, [r4, #84]	; 0x54
 8009056:	81a3      	strhlt	r3, [r4, #12]
 8009058:	bd10      	pop	{r4, pc}

0800905a <__swrite>:
 800905a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800905e:	461f      	mov	r7, r3
 8009060:	898b      	ldrh	r3, [r1, #12]
 8009062:	05db      	lsls	r3, r3, #23
 8009064:	4605      	mov	r5, r0
 8009066:	460c      	mov	r4, r1
 8009068:	4616      	mov	r6, r2
 800906a:	d505      	bpl.n	8009078 <__swrite+0x1e>
 800906c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009070:	2302      	movs	r3, #2
 8009072:	2200      	movs	r2, #0
 8009074:	f000 f870 	bl	8009158 <_lseek_r>
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800907e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009082:	81a3      	strh	r3, [r4, #12]
 8009084:	4632      	mov	r2, r6
 8009086:	463b      	mov	r3, r7
 8009088:	4628      	mov	r0, r5
 800908a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800908e:	f000 b817 	b.w	80090c0 <_write_r>

08009092 <__sseek>:
 8009092:	b510      	push	{r4, lr}
 8009094:	460c      	mov	r4, r1
 8009096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909a:	f000 f85d 	bl	8009158 <_lseek_r>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	bf15      	itete	ne
 80090a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090ae:	81a3      	strheq	r3, [r4, #12]
 80090b0:	bf18      	it	ne
 80090b2:	81a3      	strhne	r3, [r4, #12]
 80090b4:	bd10      	pop	{r4, pc}

080090b6 <__sclose>:
 80090b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ba:	f000 b81b 	b.w	80090f4 <_close_r>
	...

080090c0 <_write_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d07      	ldr	r5, [pc, #28]	; (80090e0 <_write_r+0x20>)
 80090c4:	4604      	mov	r4, r0
 80090c6:	4608      	mov	r0, r1
 80090c8:	4611      	mov	r1, r2
 80090ca:	2200      	movs	r2, #0
 80090cc:	602a      	str	r2, [r5, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	f7f8 f839 	bl	8001146 <_write>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_write_r+0x1e>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_write_r+0x1e>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	2400095c 	.word	0x2400095c

080090e4 <abort>:
 80090e4:	b508      	push	{r3, lr}
 80090e6:	2006      	movs	r0, #6
 80090e8:	f000 f8a0 	bl	800922c <raise>
 80090ec:	2001      	movs	r0, #1
 80090ee:	f7f8 f803 	bl	80010f8 <_exit>
	...

080090f4 <_close_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4d06      	ldr	r5, [pc, #24]	; (8009110 <_close_r+0x1c>)
 80090f8:	2300      	movs	r3, #0
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	602b      	str	r3, [r5, #0]
 8009100:	f7f8 f83d 	bl	800117e <_close>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d102      	bne.n	800910e <_close_r+0x1a>
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	b103      	cbz	r3, 800910e <_close_r+0x1a>
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	2400095c 	.word	0x2400095c

08009114 <_fstat_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d07      	ldr	r5, [pc, #28]	; (8009134 <_fstat_r+0x20>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	4611      	mov	r1, r2
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	f7f8 f838 	bl	8001196 <_fstat>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d102      	bne.n	8009130 <_fstat_r+0x1c>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	b103      	cbz	r3, 8009130 <_fstat_r+0x1c>
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	bd38      	pop	{r3, r4, r5, pc}
 8009132:	bf00      	nop
 8009134:	2400095c 	.word	0x2400095c

08009138 <_isatty_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4d06      	ldr	r5, [pc, #24]	; (8009154 <_isatty_r+0x1c>)
 800913c:	2300      	movs	r3, #0
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	602b      	str	r3, [r5, #0]
 8009144:	f7f8 f837 	bl	80011b6 <_isatty>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_isatty_r+0x1a>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_isatty_r+0x1a>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	2400095c 	.word	0x2400095c

08009158 <_lseek_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d07      	ldr	r5, [pc, #28]	; (8009178 <_lseek_r+0x20>)
 800915c:	4604      	mov	r4, r0
 800915e:	4608      	mov	r0, r1
 8009160:	4611      	mov	r1, r2
 8009162:	2200      	movs	r2, #0
 8009164:	602a      	str	r2, [r5, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	f7f8 f830 	bl	80011cc <_lseek>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_lseek_r+0x1e>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_lseek_r+0x1e>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	2400095c 	.word	0x2400095c

0800917c <__ascii_mbtowc>:
 800917c:	b082      	sub	sp, #8
 800917e:	b901      	cbnz	r1, 8009182 <__ascii_mbtowc+0x6>
 8009180:	a901      	add	r1, sp, #4
 8009182:	b142      	cbz	r2, 8009196 <__ascii_mbtowc+0x1a>
 8009184:	b14b      	cbz	r3, 800919a <__ascii_mbtowc+0x1e>
 8009186:	7813      	ldrb	r3, [r2, #0]
 8009188:	600b      	str	r3, [r1, #0]
 800918a:	7812      	ldrb	r2, [r2, #0]
 800918c:	1e10      	subs	r0, r2, #0
 800918e:	bf18      	it	ne
 8009190:	2001      	movne	r0, #1
 8009192:	b002      	add	sp, #8
 8009194:	4770      	bx	lr
 8009196:	4610      	mov	r0, r2
 8009198:	e7fb      	b.n	8009192 <__ascii_mbtowc+0x16>
 800919a:	f06f 0001 	mvn.w	r0, #1
 800919e:	e7f8      	b.n	8009192 <__ascii_mbtowc+0x16>

080091a0 <__malloc_lock>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__malloc_lock+0x8>)
 80091a2:	f7ff b8e8 	b.w	8008376 <__retarget_lock_acquire_recursive>
 80091a6:	bf00      	nop
 80091a8:	24000950 	.word	0x24000950

080091ac <__malloc_unlock>:
 80091ac:	4801      	ldr	r0, [pc, #4]	; (80091b4 <__malloc_unlock+0x8>)
 80091ae:	f7ff b8e3 	b.w	8008378 <__retarget_lock_release_recursive>
 80091b2:	bf00      	nop
 80091b4:	24000950 	.word	0x24000950

080091b8 <_read_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d07      	ldr	r5, [pc, #28]	; (80091d8 <_read_r+0x20>)
 80091bc:	4604      	mov	r4, r0
 80091be:	4608      	mov	r0, r1
 80091c0:	4611      	mov	r1, r2
 80091c2:	2200      	movs	r2, #0
 80091c4:	602a      	str	r2, [r5, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f7f7 ffa0 	bl	800110c <_read>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_read_r+0x1e>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_read_r+0x1e>
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	2400095c 	.word	0x2400095c

080091dc <_raise_r>:
 80091dc:	291f      	cmp	r1, #31
 80091de:	b538      	push	{r3, r4, r5, lr}
 80091e0:	4604      	mov	r4, r0
 80091e2:	460d      	mov	r5, r1
 80091e4:	d904      	bls.n	80091f0 <_raise_r+0x14>
 80091e6:	2316      	movs	r3, #22
 80091e8:	6003      	str	r3, [r0, #0]
 80091ea:	f04f 30ff 	mov.w	r0, #4294967295
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091f2:	b112      	cbz	r2, 80091fa <_raise_r+0x1e>
 80091f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091f8:	b94b      	cbnz	r3, 800920e <_raise_r+0x32>
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 f830 	bl	8009260 <_getpid_r>
 8009200:	462a      	mov	r2, r5
 8009202:	4601      	mov	r1, r0
 8009204:	4620      	mov	r0, r4
 8009206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800920a:	f000 b817 	b.w	800923c <_kill_r>
 800920e:	2b01      	cmp	r3, #1
 8009210:	d00a      	beq.n	8009228 <_raise_r+0x4c>
 8009212:	1c59      	adds	r1, r3, #1
 8009214:	d103      	bne.n	800921e <_raise_r+0x42>
 8009216:	2316      	movs	r3, #22
 8009218:	6003      	str	r3, [r0, #0]
 800921a:	2001      	movs	r0, #1
 800921c:	e7e7      	b.n	80091ee <_raise_r+0x12>
 800921e:	2400      	movs	r4, #0
 8009220:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009224:	4628      	mov	r0, r5
 8009226:	4798      	blx	r3
 8009228:	2000      	movs	r0, #0
 800922a:	e7e0      	b.n	80091ee <_raise_r+0x12>

0800922c <raise>:
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <raise+0xc>)
 800922e:	4601      	mov	r1, r0
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	f7ff bfd3 	b.w	80091dc <_raise_r>
 8009236:	bf00      	nop
 8009238:	24000010 	.word	0x24000010

0800923c <_kill_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d07      	ldr	r5, [pc, #28]	; (800925c <_kill_r+0x20>)
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	4611      	mov	r1, r2
 8009248:	602b      	str	r3, [r5, #0]
 800924a:	f7f7 ff45 	bl	80010d8 <_kill>
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d102      	bne.n	8009258 <_kill_r+0x1c>
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	b103      	cbz	r3, 8009258 <_kill_r+0x1c>
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	bd38      	pop	{r3, r4, r5, pc}
 800925a:	bf00      	nop
 800925c:	2400095c 	.word	0x2400095c

08009260 <_getpid_r>:
 8009260:	f7f7 bf32 	b.w	80010c8 <_getpid>

08009264 <__ascii_wctomb>:
 8009264:	b149      	cbz	r1, 800927a <__ascii_wctomb+0x16>
 8009266:	2aff      	cmp	r2, #255	; 0xff
 8009268:	bf85      	ittet	hi
 800926a:	238a      	movhi	r3, #138	; 0x8a
 800926c:	6003      	strhi	r3, [r0, #0]
 800926e:	700a      	strbls	r2, [r1, #0]
 8009270:	f04f 30ff 	movhi.w	r0, #4294967295
 8009274:	bf98      	it	ls
 8009276:	2001      	movls	r0, #1
 8009278:	4770      	bx	lr
 800927a:	4608      	mov	r0, r1
 800927c:	4770      	bx	lr
	...

08009280 <_gettimeofday>:
 8009280:	4b02      	ldr	r3, [pc, #8]	; (800928c <_gettimeofday+0xc>)
 8009282:	2258      	movs	r2, #88	; 0x58
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	f04f 30ff 	mov.w	r0, #4294967295
 800928a:	4770      	bx	lr
 800928c:	2400095c 	.word	0x2400095c

08009290 <_init>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	bf00      	nop
 8009294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009296:	bc08      	pop	{r3}
 8009298:	469e      	mov	lr, r3
 800929a:	4770      	bx	lr

0800929c <_fini>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr
